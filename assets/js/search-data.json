{
  
    
        "post0": {
            "title": "Note Template",
            "content": "Take some additional notes that you would like here for 3.12 and 3.13. We will be looking for additional notes from the presentation. . What are procedures? . Fill in the blanks please: . Procedure: a named group of programming instructions that may have parameters and return values. . Parameters: input values of a procedure . Arguments: specify the values of the parameters when a procedure is called . Modularity: Separating a program&#39;s functions into independent pieces or blocks . Procedural Abstraction: provides a name for a process that allows a procedure to be used only knowing WHAT it does, not HOW it does it . What are some other names for procedures?: Functions and methods . Why are procedures effective?: Convenient to change errors, ability to alter the result without actually changing the calls to the program . Additional Notes . procedures are functions | procedures simplify programs | procedures split tasks into individual components that need to be done | procedures have parameters (what the procedure is going to work on/convert/etc) | seperating program to procedures in order to simplify it is called modularity | . Challenge 1 below: Add the command that will call the procedure. . num = 7 def convert(num): if num &gt;= 1: convert(num // 2) # double slash : divide the first number by the second, rounds to the nearest integer print(num % 2, end = &#39;&#39;) # end = &#39;&#39; signifies what will come between each printed num # Driver Code convert(num) . 0111 . Challenge 2 below: Complete the Min and Max procedure in either JavaScript and Python using the instructions from the JavaScript page. (JavaScript will get you a extra 0.1) . findMax = function(numberA, numberB){ if (numberA&gt;numberB) { max = numberA; } else { max = numberB; } console.log(&quot;The max is &quot; + max); }; findMin = function(numberA, numberB){ if (numberA&lt;numberB) { min = numberA; } else { min = numberB; } console.log(&quot;The min is &quot; + min); }; findMax(2,3) findMin(6,10) . The max is 3 The min is 6 . Homework/Hacks: For the hw, you have two options, easy or hard. The easy hack is for a 2.7 + extra work for the full 3. The easy hack is simply creating your own procedure with your own creativity. Since there is a lot of leeway for this one, you must do additional work to get a 3. For the hard hack, below is the start to a character to binary convertor. This is just a template, but the goal is to translate &quot;APCSP&quot; into binary. You can delete the existing code if you want. The only contraint is that you must use a procedure. Doing this will get you a 3. . def convert(num): if num &gt;= 1: convert(num // 2) # double slash : divide the first number by the second, rounds to the nearest integer print(num % 2, end = &#39;&#39;) # end = &#39;&#39; signifies what will come between each printed num def wordtobin(word): word = str(word) list = [] for letter in word: list.append(letter) for item in list: index = list.index(item) new = ord(item) list[index] = new for i in list: z = list.index(i) new = convert(i) list[int(z)] = new word = input(&quot;What word would you like to convert to binary?&quot;) print(word, &quot; to binary is:&quot;) wordtobin(word) . APCSP to binary is: 0100000101010000010000110101001101010000 . word = &quot;APCSP&quot; conversion = &#39;-&#39;.join(format(ord(x), &#39;b&#39;) for x in word) print(word , &quot;to binary is:&quot; , conversion) . APCSP to binary is: 1000001-1010000-1000011-1010011-1010000 . The Ord Function . built in (don&#39;t have to import it) | It takes one character in input (unicode) and outputs decimal number | inverse of chr function | .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2023/05/02/notetemplate.html",
            "relUrl": "/2023/05/02/notetemplate.html",
            "date": " • May 2, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Data Analysis Hacks",
            "content": "PANDAS Hacks . make your own data using your brian, google or chatgpt, should look different than mine. modify my code or write your own | output your data other than a bar graph. | write an 850+ word essay on how pandas, python or irl, affected your life. If AI score below 85%, then -1 grading point answer the questions below, the more explained the better. SEE ESSAY, CODE, AND DATA BELOW https://tanishapatil1234.github.io/test-fastpage-tp/2023/03/21/GDP_vs_CO2.html . | . Questions . What are the two primary data structures in pandas and how do they differ? The two primary data structures in pandas are CSV files and databases. . | How do you read a CSV file into a pandas DataFrame? import pandas as pd, df = pd.read_csv() . | How do you select a single column from a pandas DataFrame? df[‘column_name’] . | How do you filter rows in a pandas DataFrame based on a condition? You can use a conditional like an if/else statement and do: df[‘Column’].apply(conditional_function). You can also use df[df[‘Column’] &gt;= integer] . | How do you group rows in a pandas DataFrame by a particular column? df.groupby(‘category’)[‘column’].count() . | How do you aggregate data in a pandas DataFrame using functions like sum and mean? df.groupby(‘category’)[‘column’].mean() . | How do you handle missing values in a pandas DataFrame? You can upload the csv file into a sqlite database and create a cursor and then use cursor.execute(“DELETE FROM table WHERE column IS NULL”) . | How do you merge two pandas DataFrames together? merged_df = pd.merge(df1, df2, on=’key’) . | How do you export a pandas DataFrame to a CSV file? df.to_csv(‘data.csv’, index=False) . | What is the difference between a Series and a DataFrame in Pandas? Dataframe is the entire table whereas the series is the column in the table. . | NUMPY HACKS . CLICK HERE . DATA ANALYSIS AND PREDICTIVE ANALYSIS Hacks . How can Numpy and Pandas be used to preprocess data for predictive analysis? Numpy and Pandas can be used for data cleaning, normalization, standardization, and data transformation to preprocess data for predictive analysis. . | Can you explain the process of building a handwriting recognition system using TensorFlow? Collecting and preprocessing the data of different letters in handwriting, then using training data in an ANN, testing the data , making appropriate fixes . | What machine learning algorithms can be used for predictive analysis, and how do they differ? ML algos such as linear regression, decision trees, and neural networks can be used for predictive analysis and differ in their approach. . | Can you discuss some real-world applications of predictive analysis in different industries? Twitter uses predictive analysis and ML to monitor the content on the app, and detect trends . | How can Numpy and Pandas be used to manipulate and filter data for more accurate predictions? Numpy and Pandas can do mathematical operations such as averages to evaluate data and make it more scalable. . | What are some challenges associated with handwriting recognition, and how can they be overcome? Variability in handwriting can be a challenge for the algorithm. A way to overcome it is to use a variety of training data. . | Can you explain the role of feature engineering in predictive analysis, and how it can improve model accuracy? Feature engineering involves selecting the relevant parts of data. It is important to use relevant data when creative predictive analysis models. . | How can machine learning models be deployed in real-time applications for predictive analysis? Machine learning models can be used and deployed using Flask, Django. . | Can you discuss some limitations of Numpy and Pandas, and when it might be necessary to use other data analysis tools? One limitation I have come across is the lack of ability to handle very large data sets or iterate through complex, multidimensional datasets. . | How can predictive analysis be used to improve decision-making and optimize business processes? Predictive analysis can help with identifying consumer trends, market behavior, and more processes which can help with the decision making process of the buisness’s operations. . | TENSORFLOW Hacks . A personal project I did recently .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2023/04/27/datahacks.html",
            "relUrl": "/2023/04/27/datahacks.html",
            "date": " • Apr 27, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Hacks for DevOps 04/24.",
            "content": "Hacks for DevOps 04/24. . KASM HACKS . Virtual desktop allows users to access a desktop environment using any device. Virtual desktops can allow teachers and students (in an APCSP environment) to access programming tools without requiring specific hardware or software installations on individual devices. | KASM Installation Attempt: | . AWS DATABASE HACKS . Quiz 1 . What is the main difference between relational and non-relational databases? . Answer: C. Relational databases are based on tables and use SQL, while non-relational databases are based on collections and use JSON-like documents. | Explanation: Relational databases store data in formats using rows and columns, such as SQL while non relational databases don’t and store it in like JSON formats. Which AWS database service is best suited for applications that require low-latency speed? | A. Amazon ElastiCache | Explanation: Low latency applications process high volumes of data with minimal delay or latency. Thus ElastiCache is the most suitable option. What is the purpose of the code example provided in the lesson? | C. To provide an example of how to connect to a database instance in RDS using Python. Quiz 2 . Which of the following is not an AWS database option? . | C. SQLite | Explanation: SQLite is not an option AWS database Which of the following is a file-based, lightweight RDBMS? | D. SQLite Which AWS service enables you to store and query highly connected datasets? | C. Amazon Neptune | Explanation: Neputune allows to store data and query entagnled datasets. | . DUCKDNS HACKS . HACK 1: Create a diagram (Canva). What are the pros and cons of using DuckDNS? Show a diagram of an application running on AWS using a DuckDNS system. | Write a reflection. Why do we use DNS? How does DuckDNS work? What makes DuckDNS unique? How is DuckDNS useful for our projects? What are the steps to setup DuckDNS? DNS also known as domain name system and allows for IP addresses to be user friendly. DuckDNS allows users to assign a domain name to a dynamic IP address. DuckDNS in unique because it is a free service. It is useful for projects because it provides a stable hostmane that can be used to access our devices from anywhere. Steps to setup: . create free account | choose hostname | configure oruter to update IP adrdress with DuckDNS custum domain name | Test hostname through brower | . | HACK 4: In 2-3 complete sentences, talk about any outdated Nginx/Docker functionalities that may need to be addressed or any confusions you may have in regards to the deployment process from Trimesters 1 and 2. Some difficulties in the deployment process I had was version compatibility issues and managing my dependencies. | HACK 5: Create a Venn Diagram comparing Nginx with Lighttpd. | HACK 6: Complete the Python quiz and attach your output from the notebook (should be done once you do the quiz.) | CERTBOT HACKS . Could not get part one sudo certbot command to work | Research and compare the security features of OpenSSL and LibreSSL, and write about the recent vulnerabilities within it. OpenSSL and LibreSSL are open-source implementations of SSL/TLS protocols to secure internet communications. LibreSSL is more secure than OpenSSL, as OpenSSL has had many vulnerabilities. While LibreSSL isn’t perfectly secure, as a fork of OpenSSL it may be more secure. |",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/markdown/2023/04/26/DEVOPSHACKS.html",
            "relUrl": "/markdown/2023/04/26/DEVOPSHACKS.html",
            "date": " • Apr 26, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Computers and Networks (Unit 4)",
            "content": "Requirements . Work through College Board Unit 4… blog, add definitions, and pictures. Be creative, for instance make a story of Computing and Networks that is related to your PBL experiences this year. . How a Computer Works . As we have learned, a computer needs aa program to do something smart. The sequence of a program initiates a series of actions with the computers Central Processing Unit (CPU). This component is essentially a binary machine focussing on program instructions provided. The CPU retrieives and stores the data it acts upon in Random Access Memory (RAM). Between the CPU, RAM, and Storage Devices a computer can work with many programs and large amounts of data. . List specification of your Computer, or Computers if working as Pair/Trio . Processor GHz: 2.20 | Memory in GB: 4GB | Storage in GB: 237 GB | OS: Microsoft Windows 11 | . Define or describe usage of Computer using Computer Programs. Pictures are preferred over a lot of text. Use your experience. . Input devices | Output devices | Program File | Program Code | Processes | Ports | Data File | Inspect Running Code | Inspect Variables | . . . The Internet . Watch/review College Board Daily Video for 4.1.1 . Essential Knowledge A computing device is a physical artifact that can run a program. Some examples include computers, tablets, servers, routers, and smart sensors. | A computing system is a group of computing devices and programs working together for a common purpose. | A computer network is a group of interconnected computing devices capable of sending or receiving data. | A computer network is a type of computing system. | A path between two computing devices on a computer network (a sender and a receiver) is a sequence of directly connected computing devices that begins at the sender and ends at the receiver. | Routing is the process of finding a path from sender to receiver. | The bandwidth of a computer network is the maximum amount of data that can be sent in a fixed amount of time. | Bandwidth is usually measured in bits per second | . | Complete Vocabulary Matching Activity. Incorporate this into your learnings from year. To analyze measure path and latency use traceroute and ping commands from Linux Terminal. Path | Route | Computer System | Computer Device | Bandwidth | Computer Network | . | . Watch/review College Board Daily Video 4.1.2 . Complete True of False Questions T: Open standards and protocols enable diff3erent manufacturers and developers to build hardware and software that can communicate with hardware/software on the rest of the internet | F: IETF is a task force used to enforce laws to keep manufacturers out of the internet | F: routes are determined in advance and are not flexible | T: Protocol is agreed upon set of rules that specify behavior of a system | F: UDP guarentees transfers and is faster | F: WWW is the internet T. T: HTTP is a protocol used by WWW | | Essential Knowledge The internet is a computer network consisting of interconnected networks that use standardized, open (nonproprierary) communication protocols. | Access to the internet depends on the ability to connect a computing device to an internet connected device. | A protocol is an agreed-upon set of rules that specify the behavior of a system. | The protocols used in the internet are open, which allows users to easily connect additional computing devices to the internet. | Routing on the internet is usually dynamic; it is not specified in advance | The scalability of a system is the capacity for the system to change in size and scale to meet new demands. | The internet was designed to be scalable | Information is passed through the internet as a data stream. Data streams contain chunks of data, which are encapsulated in packets. | Packets contain a chunk of data and metadata used for routing the packet between the origin and the destination on the internet, as well as for data reassembly. | Packets may arrive at the destination in order, out of order, or not at all | IP, TCP and UDP are common protocols used on the internet. | The world wide web is a system of linked pages, programs, and files. | HTTP is a protocol used by the world wide web | The world wide web uses the internet | . | Go over AP videos, vocabulary, and essential knowledge. Draw a diagram showing the internet and its many levels. A preferred diagram would using your knowledge of frontend, backend, deployment, etc. Picture would highligh vocabulary by illustration. The below illustration have some ideas | . . Often we draw pictures of machines communicating over the Internet with arrows. However, the real communication goes through protocol layers and the machine and then is trasported of the network. For College Board and future Computer Knowledge you should become familiar with the following … | . User Machine &lt;&gt; Frontend Server &lt;&gt; Backend Server +--+ +--+ +--+ | Browser | | GH Page | | Flask | +--+ ^ +--+ ^ +--+ | HTTP | | | HTTP | | | HTTP | +--+ | +--+ | +--+ | TCP | | | TCP | | | TCP | +--+ | +--+ | +--+ | IP | V | IP | V | IP | +--+ +--+ +--+ | Network | &lt;&gt; | Network | &lt;&gt; | Network | +--+ +--+ +--+ . The “http” layer is an application layer protocol in the TCP/IP stack, used for communication between web browsers and web servers. It is the protocol used for transmitting data over the World Wide Web. . The “transport” layer (TCP) is responsible for providing reliable data transfer between applications running on different hosts. The TCP protocol segments the data into smaller chunks called “segments”. Each segment contains a sequence number that identifies its position in the original stream of data, as well as other control information such as source and destination port numbers, and checksums for error detection. . The “ip” layer is responsible for packetizing data received from the TCP layer of the protocol stack, and then encapsulating the data into IP packets. The IP packets are then sent to the lower layers of the protocol stack for transmission over the network. . The “network” layer is responsible for routing data packets between networks using the Internet Protocol (IP). This layer handles tasks such as packet addressing and routing, fragmentation and reassembly, and network congestion control. . Fault Tolerance . Watch both Daily videos for 4.2 . Complete the network activity, summarize your understanding of fault tolerance. Fault tolerance is a system’s ability to function even there are multiple errors or fault. SImply put, it is the system tolerating possible faults. When one component or path fails, another one can take over in it’s place and have the exact same function. | . Parallel and Distributed Computing . Review previous lecture on Parallel Computing and watch Daily vidoe 4.3. Think of ways to make something in you team project to utilize Cores more effectively. Here are some thoughts to add to your story of Computers and Networks… . What is naturally Distributed in Frontend/Backend archeticture? Frontend is distributed among users as it runs on their devices. The frontend interacts with the backend thorugh API. Backend handles data processing and storage and is distributes across servers. . | Analyze this command in Docker: ENV GUNICORN_CMD_ARGS=&quot;--workers=1 --bind=0.0.0.0:8086&quot;. Determine if there is options are options in this command for parallel computing within the server that runs python/gunicorn. Here is an article ENV GUNICORN_CMD_ARGS=”–workers=1 –bind=0.0.0.0:8086 sets environment variable GUNICORN_CMD_ARGS with two specifications, =”–workers=1 specifies that one worker process should be used (no parallel), and –bind=0.0.0.0:8086 tells the port. . | . My Notes . 4.1 Video 1 . As time evolved, computers became smaller | computers are capable of sending and recieving data | A computer system is a group of computing devices and programs working together for a joint purpose | A computer network is a group of interconnected computing devices capable of sending or recieving data, type of computing system | Packet switching: message is broken up into files and sent in any order. the packets are reassembled by reciever’s device | Routing is the process of finding a path from sender to reciever | A path between two computing devices on a computer netqork (a sender and a reciever) is a sequence of directly connected computing devices that begins at the sender and ends at the reciever | Bandwith: maximum amount of data that can be snet in a fixed amount of time on a computer network (bits/second) | . 4.1 Video 2 . Packet: small amount of data sent over a netqork. Each packet also includes the source and destination of the Data. | protocol: agreed upon set of rules that specify the behavior of a system Computer Protocol Methods: . | OSI: open systems interconnect: layers you have to go through to communicate (7 groups of protocols) | TCP: establishes common standard for how to send messages | Network Access Layer: Setting things up in the hardware, NIC card or wire. MAC address is unique to each card. uses binary | INternet Protocol Layer (IP): Where the packets get set up with sender ip, reciever ip, metadata(contains information used for routing information). | MAC address are used to transport message from sender ip to reciever ip | .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2023/04/05/AP_computers_networks.html",
            "relUrl": "/2023/04/05/AP_computers_networks.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Data Structures- Hashmaps, Sets, Hash Tables, Hashing and Collisions",
            "content": "What is a Hashtable/Hashmap? . A hashtable is a data structure that with a collection of key-value pairs, where each key maps to a value, and the keys must be unique and hashable. . In Python there is a built in hashtable known as a _dictionary__. | . The primary purpose of a hashtable is to provide efficient lookup, insertion, and deletion operations. When an element is to be inserted into the hashtable, a hash function is used to map the key to a specific index in the underlying array that is used to store the key-value pairs. The value is then stored at that index. When searching for a value, the hash function is used again to find the index where the value is stored. . The key advantage of a hashtable over other data structures like arrays and linked lists is its average-case time complexity for lookup, insertion, and deletion operations. . The typical time complexity of a hashtable is _O(1) or constant__. | . What is Hashing and Collision? . Hashing is the process of mapping a given key to a value in a hash table or hashmap, using a hash function. The hash function takes the key as input and produces a hash value or hash code, which is then used to determine the index in the underlying array where the value is stored. The purpose of hashing is to provide a quick and efficient way to access data, by eliminating the need to search through an entire data structure to find a value. . However, it is possible for two different keys to map to the same hash value, resulting in a collision. When a collision occurs, there are different ways to resolve it, depending on the collision resolution strategy used. . Python&#39;s dictionary implementation is optimized to handle collisions efficiently, and the performance of the dictionary is generally very good, even in the presence of collisions. However, if the number of collisions is very high, the performance of the dictionary can degrade, so it is important to choose a good hash function that minimizes collisions when designing a Python dictionary. . What is a Set? . my_set = set([1, 2, 3, 2, 1]) print(my_set) # What do you notice in the output? # set() returns the values that are unique. Duplicated values are left out. # Why do you think Sets are in the same tech talk as Hashmaps/Hashtables? # Sets and keys are similar in that they must be unique. . {1, 2, 3} . Dictionary Example . Below are just some basic features of a dictionary. As always, documentation is always the main source for all the full capablilties. . lover_album = { &quot;title&quot;: &quot;Lover&quot;, &quot;artist&quot;: &quot;Taylor Swift&quot;, &quot;year&quot;: 2019, &quot;genre&quot;: [&quot;Pop&quot;, &quot;Synth-pop&quot;], &quot;tracks&quot;: { 1: &quot;I Forgot That You Existed&quot;, 2: &quot;Cruel Summer&quot;, 3: &quot;Lover&quot;, 4: &quot;The Man&quot;, 5: &quot;The Archer&quot;, 6: &quot;I Think He Knows&quot;, 7: &quot;Miss Americana &amp; The Heartbreak Prince&quot;, 8: &quot;Paper Rings&quot;, 9: &quot;Cornelia Street&quot;, 10: &quot;Death By A Thousand Cuts&quot;, 11: &quot;London Boy&quot;, 12: &quot;Soon You&#39;ll Get Better (feat. Dixie Chicks)&quot;, 13: &quot;False God&quot;, 14: &quot;You Need To Calm Down&quot;, 15: &quot;Afterglow&quot;, 16: &quot;Me! (feat. Brendon Urie of Panic! At The Disco)&quot;, 17: &quot;It&#39;s Nice To Have A Friend&quot;, 18: &quot;Daylight&quot; } } # What data structures do you see? # There is a list for genre, and a dictionary for tracks # # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}} . print(lover_album.get(&#39;tracks&#39;)) # or print(lover_album[&#39;tracks&#39;]) . {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} . print(lover_album.get(&#39;tracks&#39;)[4]) # or print(lover_album[&#39;tracks&#39;][4]) . The Man The Man . lover_album[&quot;producer&quot;] = set([&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;]) # What can you change to make sure there are no duplicate producers? # use .set # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}, &#39;producer&#39;: {&#39;Jack Antonoff&#39;, &#39;Frank Dukes&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Joel Little&#39;}} . lover_album[&quot;tracks&quot;].update({19: &quot;All Of The Girls You Loved Before&quot;}) # How would add an additional genre to the dictionary, like electropop? # lover_album[&#39;genre&#39;].append(&quot;Electropop&quot;) # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;}, &#39;producer&#39;: {&#39;Jack Antonoff&#39;, &#39;Frank Dukes&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Joel Little&#39;}} . for k,v in lover_album.items(): # iterate using a for loop for key and value print(str(k) + &quot;: &quot; + str(v)) print(&quot;&quot;) # Write your own code to print tracks in readable format tracks = lover_album[&quot;tracks&quot;] print(&quot;ID | TRACKS&quot;) for k, v in tracks.items(): print(str(k) + &quot;: &quot; + str(v)) . title: Lover artist: Taylor Swift year: 2019 genre: [&#39;Pop&#39;, &#39;Synth-pop&#39;] tracks: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;} producer: {&#39;Jack Antonoff&#39;, &#39;Frank Dukes&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Joel Little&#39;} ID | TRACKS 1: I Forgot That You Existed 2: Cruel Summer 3: Lover 4: The Man 5: The Archer 6: I Think He Knows 7: Miss Americana &amp; The Heartbreak Prince 8: Paper Rings 9: Cornelia Street 10: Death By A Thousand Cuts 11: London Boy 12: Soon You&#39;ll Get Better (feat. Dixie Chicks) 13: False God 14: You Need To Calm Down 15: Afterglow 16: Me! (feat. Brendon Urie of Panic! At The Disco) 17: It&#39;s Nice To Have A Friend 18: Daylight 19: All Of The Girls You Loved Before . # This is a very basic code segment, how can you improve upon this code? # # def search1(): search = input(&quot;What would you like to know about the album?&quot;) if lover_album.get(search.lower()) == None: print(search, &quot; is an invalid input, try again!&quot;) search1() else: print(lover_album.get(search.lower())) search1() . cars is an invalid input, try again! movies is an invalid input, try again! {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;} . Hacks . Answer ALL questions in the code segments . Done . Create a venn diagram or other compare and contrast tool related to hashmaps. . Expand upon the code given to you, possible improvements in comments . Done . Build your own album showing features of a python dictionary . dawn_fm = { &quot;genre&quot;: &quot;R&amp;B&quot;, &quot;year&quot;: 2022, &quot;artist&quot;: &quot;The Weeknd&quot;, &quot;title&quot;: &quot;Dawn FM&quot;, &quot;tracks&quot;: [ { &quot;title&quot;: &quot;Here We Go Again (Intro)&quot;, &quot;length&quot;: &quot;1:48&quot; }, { &quot;title&quot;: &quot;The Dawn&quot;, &quot;length&quot;: &quot;5:11&quot; }, { &quot;title&quot;: &quot;Gasoline&quot;, &quot;length&quot;: &quot;3:32&quot; }, { &quot;title&quot;: &quot;Lose You Again&quot;, &quot;length&quot;: &quot;4:41&quot; }, { &quot;title&quot;: &quot;So Much Better&quot;, &quot;length&quot;: &quot;4:10&quot; }, { &quot;title&quot;: &quot;One Right Now&quot;, &quot;length&quot;: &quot;3:43&quot; }, { &quot;title&quot;: &quot;Survive The Night&quot;, &quot;length&quot;: &quot;4:04&quot; }, { &quot;title&quot;: &quot;Out Of Time&quot;, &quot;length&quot;: &quot;3:50&quot; }, { &quot;title&quot;: &quot;Bleed Out&quot;, &quot;length&quot;: &quot;4:08&quot; }, { &quot;title&quot;: &quot;Don&#39;t Break My Heart&quot;, &quot;length&quot;: &quot;3:21&quot; }, { &quot;title&quot;: &quot;I Heard You&#39;re Married&quot;, &quot;length&quot;: &quot;3:34&quot; }, { &quot;title&quot;: &quot;Take My Breath&quot;, &quot;length&quot;: &quot;3:40&quot; }, { &quot;title&quot;: &quot;Here We Go Again (Interlude)&quot;, &quot;length&quot;: &quot;1:32&quot; }, { &quot;title&quot;: &quot;Here We Go Again&quot;, &quot;length&quot;: &quot;4:27&quot; }, { &quot;title&quot;: &quot;Sacrifice&quot;, &quot;length&quot;: &quot;3:07&quot; }, { &quot;title&quot;: &quot;Do You Really Love Me&quot;, &quot;length&quot;: &quot;3:16&quot; } ], &quot;producer&quot;: &quot;The Weeknd, Max Martin, Metro Boomin, and others&quot;, &quot;label&quot;: &quot;Republic Records, XO&quot;, &quot;singles&quot;: [&quot;Take My Breath&quot;, &quot;Here We Go Again&quot;, &quot;Sacrifice&quot;], &quot;awards&quot;: { &quot;Juno Awards&quot;: 4, &quot;MTV Music Awards&quot;: 1, &quot;People&#39;s Choice Awards&quot;: 2 }, &quot;length&quot;: &quot;55:52&quot; } print(dawn_fm) . {&#39;genre&#39;: &#39;R&amp;B&#39;, &#39;year&#39;: 2022, &#39;artist&#39;: &#39;The Weeknd&#39;, &#39;title&#39;: &#39;Dawn FM&#39;, &#39;tracks&#39;: [{&#39;title&#39;: &#39;Here We Go Again (Intro)&#39;, &#39;length&#39;: &#39;1:48&#39;}, {&#39;title&#39;: &#39;The Dawn&#39;, &#39;length&#39;: &#39;5:11&#39;}, {&#39;title&#39;: &#39;Gasoline&#39;, &#39;length&#39;: &#39;3:32&#39;}, {&#39;title&#39;: &#39;Lose You Again&#39;, &#39;length&#39;: &#39;4:41&#39;}, {&#39;title&#39;: &#39;So Much Better&#39;, &#39;length&#39;: &#39;4:10&#39;}, {&#39;title&#39;: &#39;One Right Now&#39;, &#39;length&#39;: &#39;3:43&#39;}, {&#39;title&#39;: &#39;Survive The Night&#39;, &#39;length&#39;: &#39;4:04&#39;}, {&#39;title&#39;: &#39;Out Of Time&#39;, &#39;length&#39;: &#39;3:50&#39;}, {&#39;title&#39;: &#39;Bleed Out&#39;, &#39;length&#39;: &#39;4:08&#39;}, {&#39;title&#39;: &#34;Don&#39;t Break My Heart&#34;, &#39;length&#39;: &#39;3:21&#39;}, {&#39;title&#39;: &#34;I Heard You&#39;re Married&#34;, &#39;length&#39;: &#39;3:34&#39;}, {&#39;title&#39;: &#39;Take My Breath&#39;, &#39;length&#39;: &#39;3:40&#39;}, {&#39;title&#39;: &#39;Here We Go Again (Interlude)&#39;, &#39;length&#39;: &#39;1:32&#39;}, {&#39;title&#39;: &#39;Here We Go Again&#39;, &#39;length&#39;: &#39;4:27&#39;}, {&#39;title&#39;: &#39;Sacrifice&#39;, &#39;length&#39;: &#39;3:07&#39;}, {&#39;title&#39;: &#39;Do You Really Love Me&#39;, &#39;length&#39;: &#39;3:16&#39;}], &#39;producer&#39;: &#39;The Weeknd, Max Martin, Metro Boomin, and others&#39;, &#39;label&#39;: &#39;Republic Records, XO&#39;, &#39;singles&#39;: [&#39;Take My Breath&#39;, &#39;Here We Go Again&#39;, &#39;Sacrifice&#39;], &#39;awards&#39;: {&#39;Juno Awards&#39;: 4, &#39;MTV Music Awards&#39;: 1, &#34;People&#39;s Choice Awards&#34;: 2}, &#39;length&#39;: &#39;55:52&#39;} . for k,v in dawn_fm.items(): # iterate using a for loop for key and value print(str(k) + &quot;: &quot; + str(v)) print(&quot;&quot;) # Write your own code to print tracks in readable format count = 1 print(&quot;TRACK | LENGTH&quot;) while count &lt;= 16: print(dawn_fm[&#39;tracks&#39;][count][&#39;title&#39;], &#39;:&#39;, dawn_fm[&#39;tracks&#39;][count][&#39;length&#39;]) count += 1 . genre: R&amp;B year: 2022 artist: The Weeknd title: Dawn FM tracks: [{&#39;title&#39;: &#39;Here We Go Again (Intro)&#39;, &#39;length&#39;: &#39;1:48&#39;}, {&#39;title&#39;: &#39;The Dawn&#39;, &#39;length&#39;: &#39;5:11&#39;}, {&#39;title&#39;: &#39;Gasoline&#39;, &#39;length&#39;: &#39;3:32&#39;}, {&#39;title&#39;: &#39;Lose You Again&#39;, &#39;length&#39;: &#39;4:41&#39;}, {&#39;title&#39;: &#39;So Much Better&#39;, &#39;length&#39;: &#39;4:10&#39;}, {&#39;title&#39;: &#39;One Right Now&#39;, &#39;length&#39;: &#39;3:43&#39;}, {&#39;title&#39;: &#39;Survive The Night&#39;, &#39;length&#39;: &#39;4:04&#39;}, {&#39;title&#39;: &#39;Out Of Time&#39;, &#39;length&#39;: &#39;3:50&#39;}, {&#39;title&#39;: &#39;Bleed Out&#39;, &#39;length&#39;: &#39;4:08&#39;}, {&#39;title&#39;: &#34;Don&#39;t Break My Heart&#34;, &#39;length&#39;: &#39;3:21&#39;}, {&#39;title&#39;: &#34;I Heard You&#39;re Married&#34;, &#39;length&#39;: &#39;3:34&#39;}, {&#39;title&#39;: &#39;Take My Breath&#39;, &#39;length&#39;: &#39;3:40&#39;}, {&#39;title&#39;: &#39;Here We Go Again (Interlude)&#39;, &#39;length&#39;: &#39;1:32&#39;}, {&#39;title&#39;: &#39;Here We Go Again&#39;, &#39;length&#39;: &#39;4:27&#39;}, {&#39;title&#39;: &#39;Sacrifice&#39;, &#39;length&#39;: &#39;3:07&#39;}, {&#39;title&#39;: &#39;Do You Really Love Me&#39;, &#39;length&#39;: &#39;3:16&#39;}] producer: The Weeknd, Max Martin, Metro Boomin, and others label: Republic Records, XO singles: [&#39;Take My Breath&#39;, &#39;Here We Go Again&#39;, &#39;Sacrifice&#39;] awards: {&#39;Juno Awards&#39;: 4, &#39;MTV Music Awards&#39;: 1, &#34;People&#39;s Choice Awards&#34;: 2} length: 55:52 TRACK | LENGTH The Dawn : 5:11 Gasoline : 3:32 Lose You Again : 4:41 So Much Better : 4:10 One Right Now : 3:43 Survive The Night : 4:04 Out Of Time : 3:50 Bleed Out : 4:08 Don&#39;t Break My Heart : 3:21 I Heard You&#39;re Married : 3:34 Take My Breath : 3:40 Here We Go Again (Interlude) : 1:32 Here We Go Again : 4:27 Sacrifice : 3:07 Do You Really Love Me : 3:16 . IndexError Traceback (most recent call last) /home/tanisha1234/vscode/test-fastpage-tp/_notebooks/2023-03-29-DS-hashmaps.ipynb Cell 16 in &lt;cell line: 9&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu-20.04/home/tanisha1234/vscode/test-fastpage-tp/_notebooks/2023-03-29-DS-hashmaps.ipynb#X24sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; print(&#34;TRACK | LENGTH&#34;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu-20.04/home/tanisha1234/vscode/test-fastpage-tp/_notebooks/2023-03-29-DS-hashmaps.ipynb#X24sdnNjb2RlLXJlbW90ZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; while count &lt;= 16: &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu-20.04/home/tanisha1234/vscode/test-fastpage-tp/_notebooks/2023-03-29-DS-hashmaps.ipynb#X24sdnNjb2RlLXJlbW90ZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; print(dawn_fm[&#39;tracks&#39;][count][&#39;title&#39;], &#39;:&#39;, dawn_fm[&#39;tracks&#39;][count][&#39;length&#39;]) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu-20.04/home/tanisha1234/vscode/test-fastpage-tp/_notebooks/2023-03-29-DS-hashmaps.ipynb#X24sdnNjb2RlLXJlbW90ZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; count += 1 IndexError: list index out of range . def dawnsearch(): search = input(&quot;What would you like to know about the album?&quot;) if dawn_fm.get(search.lower()) == None: print(search, &quot; is an invalid input, try again!&quot;) dawnsearch() else: print(search, &quot;:&quot; , dawn_fm.get(search.lower())) dawnsearch() . shows is an invalid input, try again! tours is an invalid input, try again! merch is an invalid input, try again! genre : R&amp;B . For Mr. Yeung&#39;s class: Justify your favorite Taylor Swift song, answer may effect seed . While Taylor Swift has many noteworthy songs, &quot;Don&#39;t Blame Me&quot; is definitely my favorite for a few reasons. &quot;Don&#39;t Blame Me&quot; exhibits Taylor&#39;s powerful vocals and her incredible range. Her vocal ability in this song was cleverly used to show a range of emotion that can be otherwise difficult to express. Taylor&#39;s genius lyrics such as &quot;My name is whatever you decide, and I&#39;m just gonna call you mine&quot; showcases her ability to express the song&#39;s message of all-consuming love in a masterful way. Additionally, the melody is almost haunting, with heavy bass and precussion, which helps to create a dramatic atmosphere which suits the song&#39;s message perfectly. The song&#39;s multiple aspects allow &quot;Don&#39;t Blame Me&quot; to be a song perfect for any occasion. It&#39;s heavy precussion allow for it to be the perfect workout song, while the passionate lyrics also make it an emotional piece. Overall, I believe &#39;Don&#39;t Blame Me&#39; is the best Taylor Swift Song. .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2023/03/29/DS-hashmaps.html",
            "relUrl": "/2023/03/29/DS-hashmaps.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "CSUSM Reflection",
            "content": "Reflection . It is important to understand that grades do not define a person’s worth or capabilities. While grades are an essential component of academic success, they are not the only factor that determines a person’s potential for success in life. It is essential to focus on learning, growth, and personal development rather than solely on achieving high grades. At CSUSM, there are many opportunities available for students pursuing STEM fields. The university offers a range of programs, resources, and support systems designed to help students excel in their academic pursuits. From research opportunities to internships and industry partnerships, CSUSM is committed to providing students with the tools they need to succeed in their future careers. By taking advantage of these resources and prioritizing personal growth over grades, students can set themselves up for a bright and successful future. . Intro . Computer Science is applicable to every STEM field. So it is important to build a strong base with computer science early in our educational career. . About CSUSM: . CSUSM is a fairly new campus. It is common for internships. Because of its distinct location, San Marcos has many local opportunities. San Diego is known for its network of independent businesses. Additionally there are many Hackathons at San Marcos that even highschoolers can attend. . Pathways at CSUSM: . BS chemistry, biochemistry, applied physics, computer science, computer information systems, cybersecurity, computer engineering , mathematics, electrical engineering , biotechnology . #Internships: Because of its location and wide outreach there are many opportunities to be found at Google, campus events, and in clubs. It is important to avoid unpaid internships, apply even if you feel under qualified, ask for help when applying . Additionally, there are many research labs that offer paid internships. . Financial Aid . Grant vs Scholarship . Grant: government issued Scholarship: Private issued FAFSA , studentaid.gov . Loans . Avoid loans Subsidized:Partially funded by government, helps you with interest. Unsubsidized: Start getting interest right when you graduate. .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/markdown/2023/03/28/CSUSM.html",
            "relUrl": "/markdown/2023/03/28/CSUSM.html",
            "date": " • Mar 28, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Data Structures- Space and Time Complexity",
            "content": "Space and Time Complexity . Space complexity refers to the amount of memory used by an algorithm to complete its execution, as a function of the size of the input. The space complexity of an algorithm can be affected by various factors such as the size of the input data, the data structures used in the algorithm, the number and size of temporary variables, and the recursion depth. Time complexity refers to the amount of time required by an algorithm to run as the input size grows. It is usually measured in terms of the &quot;Big O&quot; notation, which describes the upper bound of an algorithm&#39;s time complexity. . Why do you think a programmer should care about space and time complexity? . In a video game for example, the reaction time of a character has to do with time. Space has to do with how large an image may be for example. At times time and space can be related, a larger image may take a longer time to render. Without considering space time complexity of an algortithm can make it inefficient and take away from the program&#39;s purpose. In addition, not considering complexity can make the program an inconvinience for users. | . Take a look at our lassen volcano example from the data compression tech talk. The first code block is the original image. In the second code block, change the baseWidth to rescale the image. . from IPython.display import Image, display from pathlib import Path # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) if __name__ == &quot;__main__&quot;: lassen_volcano = image_data(images=[{&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}]) image_display(lassen_volcano) . from IPython.display import HTML, display from pathlib import Path from PIL import Image as pilImage from io import BytesIO import base64 # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def scale_image(img): #baseWidth = 625 #baseWidth = 1250 #baseWidth = 2500 baseWidth = 5000 # see the effect of doubling or halfing the baseWidth #baseWidth = 10000 #baseWidth = 20000 #baseWidth = 40000 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size image[&#39;width&#39;], image[&#39;height&#39;] = img.size image[&#39;pixels&#39;] = image[&#39;width&#39;] * image[&#39;height&#39;] # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size image[&#39;scaled_width&#39;], image[&#39;scaled_height&#39;] = img.size image[&#39;scaled_pixels&#39;] = image[&#39;scaled_width&#39;] * image[&#39;scaled_height&#39;] # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data(images = [{&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}]) # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;], &quot; pixels: &quot;, f&quot;{image[&#39;pixels&#39;]:,}&quot;) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;], &quot; pixels: &quot;, f&quot;{image[&#39;scaled_pixels&#39;]:,}&quot;) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) pixels: 5,846,448 Scaled size: (5000, 3750) pixels: 18,750,000 -- original image -- . Do you think this is a time complexity or space complexity or both problem? . I think it is both. In this case space and time is related in that a larger image takes a longer time to render, as it didn&#39;t show for a long time. | . Big O Notation . Constant O(1) | Linear O(n) | Quadratic O(n^2) | Logarithmic O(logn) | Exponential (O(2^n)) | . numbers = list(range(1000)) . Constant O(1) . Time . An example of a constant time algorithm is accessing a specific element in an array. It does not matter how large the array is, accessing an element in the array takes the same amount of time. Therefore, the time complexity of this operation is constant, denoted by O(1). . print(numbers[263]) ncaa_bb_ranks = {1:&quot;Alabama&quot;,2:&quot;Houston&quot;, 3:&quot;Purdue&quot;, 4:&quot;Kansas&quot;} #look up a value in a dictionary given a key print(ncaa_bb_ranks[1]) . 263 Alabama . Space . This function takes two number inputs and returns their sum. The function does not create any additional data structures or variables that are dependent on the input size, so its space complexity is constant, or O(1). Regardless of how large the input numbers are, the function will always require the same amount of memory to execute. . def sum(a, b): return a + b . Linear O(n) . Time . An example of a linear time algorithm is traversing a list or an array. When the size of the list or array increases, the time taken to traverse it also increases linearly with the size. Hence, the time complexity of this operation is O(n), where n is the size of the list or array being traversed. . for i in numbers: print(i) . 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 . Space . This function takes a list of elements arr as input and returns a new list with the elements in reverse order. The function creates a new list reversed_arr of the same size as arr to store the reversed elements. The size of reversed_arr depends on the size of the input arr, so the space complexity of this function is O(n). As the input size increases, the amount of memory required to execute the function also increases linearly. . def reverse_list(arr): n = len(arr) reversed_arr = [None] * n #create a list of None based on the length or arr for i in range(n): reversed_arr[n-i-1] = arr[i] #stores the value at the index of arr to the value at the index of reversed_arr starting at the beginning for arr and end for reversed_arr return reversed_arr print(numbers) print(reverse_list(numbers)) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999] [999, 998, 997, 996, 995, 994, 993, 992, 991, 990, 989, 988, 987, 986, 985, 984, 983, 982, 981, 980, 979, 978, 977, 976, 975, 974, 973, 972, 971, 970, 969, 968, 967, 966, 965, 964, 963, 962, 961, 960, 959, 958, 957, 956, 955, 954, 953, 952, 951, 950, 949, 948, 947, 946, 945, 944, 943, 942, 941, 940, 939, 938, 937, 936, 935, 934, 933, 932, 931, 930, 929, 928, 927, 926, 925, 924, 923, 922, 921, 920, 919, 918, 917, 916, 915, 914, 913, 912, 911, 910, 909, 908, 907, 906, 905, 904, 903, 902, 901, 900, 899, 898, 897, 896, 895, 894, 893, 892, 891, 890, 889, 888, 887, 886, 885, 884, 883, 882, 881, 880, 879, 878, 877, 876, 875, 874, 873, 872, 871, 870, 869, 868, 867, 866, 865, 864, 863, 862, 861, 860, 859, 858, 857, 856, 855, 854, 853, 852, 851, 850, 849, 848, 847, 846, 845, 844, 843, 842, 841, 840, 839, 838, 837, 836, 835, 834, 833, 832, 831, 830, 829, 828, 827, 826, 825, 824, 823, 822, 821, 820, 819, 818, 817, 816, 815, 814, 813, 812, 811, 810, 809, 808, 807, 806, 805, 804, 803, 802, 801, 800, 799, 798, 797, 796, 795, 794, 793, 792, 791, 790, 789, 788, 787, 786, 785, 784, 783, 782, 781, 780, 779, 778, 777, 776, 775, 774, 773, 772, 771, 770, 769, 768, 767, 766, 765, 764, 763, 762, 761, 760, 759, 758, 757, 756, 755, 754, 753, 752, 751, 750, 749, 748, 747, 746, 745, 744, 743, 742, 741, 740, 739, 738, 737, 736, 735, 734, 733, 732, 731, 730, 729, 728, 727, 726, 725, 724, 723, 722, 721, 720, 719, 718, 717, 716, 715, 714, 713, 712, 711, 710, 709, 708, 707, 706, 705, 704, 703, 702, 701, 700, 699, 698, 697, 696, 695, 694, 693, 692, 691, 690, 689, 688, 687, 686, 685, 684, 683, 682, 681, 680, 679, 678, 677, 676, 675, 674, 673, 672, 671, 670, 669, 668, 667, 666, 665, 664, 663, 662, 661, 660, 659, 658, 657, 656, 655, 654, 653, 652, 651, 650, 649, 648, 647, 646, 645, 644, 643, 642, 641, 640, 639, 638, 637, 636, 635, 634, 633, 632, 631, 630, 629, 628, 627, 626, 625, 624, 623, 622, 621, 620, 619, 618, 617, 616, 615, 614, 613, 612, 611, 610, 609, 608, 607, 606, 605, 604, 603, 602, 601, 600, 599, 598, 597, 596, 595, 594, 593, 592, 591, 590, 589, 588, 587, 586, 585, 584, 583, 582, 581, 580, 579, 578, 577, 576, 575, 574, 573, 572, 571, 570, 569, 568, 567, 566, 565, 564, 563, 562, 561, 560, 559, 558, 557, 556, 555, 554, 553, 552, 551, 550, 549, 548, 547, 546, 545, 544, 543, 542, 541, 540, 539, 538, 537, 536, 535, 534, 533, 532, 531, 530, 529, 528, 527, 526, 525, 524, 523, 522, 521, 520, 519, 518, 517, 516, 515, 514, 513, 512, 511, 510, 509, 508, 507, 506, 505, 504, 503, 502, 501, 500, 499, 498, 497, 496, 495, 494, 493, 492, 491, 490, 489, 488, 487, 486, 485, 484, 483, 482, 481, 480, 479, 478, 477, 476, 475, 474, 473, 472, 471, 470, 469, 468, 467, 466, 465, 464, 463, 462, 461, 460, 459, 458, 457, 456, 455, 454, 453, 452, 451, 450, 449, 448, 447, 446, 445, 444, 443, 442, 441, 440, 439, 438, 437, 436, 435, 434, 433, 432, 431, 430, 429, 428, 427, 426, 425, 424, 423, 422, 421, 420, 419, 418, 417, 416, 415, 414, 413, 412, 411, 410, 409, 408, 407, 406, 405, 404, 403, 402, 401, 400, 399, 398, 397, 396, 395, 394, 393, 392, 391, 390, 389, 388, 387, 386, 385, 384, 383, 382, 381, 380, 379, 378, 377, 376, 375, 374, 373, 372, 371, 370, 369, 368, 367, 366, 365, 364, 363, 362, 361, 360, 359, 358, 357, 356, 355, 354, 353, 352, 351, 350, 349, 348, 347, 346, 345, 344, 343, 342, 341, 340, 339, 338, 337, 336, 335, 334, 333, 332, 331, 330, 329, 328, 327, 326, 325, 324, 323, 322, 321, 320, 319, 318, 317, 316, 315, 314, 313, 312, 311, 310, 309, 308, 307, 306, 305, 304, 303, 302, 301, 300, 299, 298, 297, 296, 295, 294, 293, 292, 291, 290, 289, 288, 287, 286, 285, 284, 283, 282, 281, 280, 279, 278, 277, 276, 275, 274, 273, 272, 271, 270, 269, 268, 267, 266, 265, 264, 263, 262, 261, 260, 259, 258, 257, 256, 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0] . Quadratic O(n^2) . Time . An example of a quadratic time algorithm is nested loops. When there are two nested loops that both iterate over the same collection, the time taken to complete the algorithm grows quadratically with the size of the collection. Hence, the time complexity of this operation is O(n^2), where n is the size of the collection being iterated over. . for i in numbers: for j in numbers: print(i,jeyboardInterrupt Traceback (most recent call last) /home/tanisha1234/vscode/test-fastpage-tp/_notebooks/2023-03-22-DS-space_time_complexity.ipynb Cell 22 in &lt;cell line: 2&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu-20.04/home/tanisha1234/vscode/test-fastpage-tp/_notebooks/2023-03-22-DS-space_time_complexity.ipynb#X30sdnNjb2RlLXJlbW90ZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; for i in numbers: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu-20.04/home/tanisha1234/vscode/test-fastpage-tp/_notebooks/2023-03-22-DS-space_time_complexity.ipynb#X30sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; for j in numbers: -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu-20.04/home/tanisha1234/vscode/test-fastpage-tp/_notebooks/2023-03-22-DS-space_time_complexity.ipynb#X30sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; print(i,j) File ~/anaconda3/lib/python3.9/site-packages/ipykernel/iostream.py:531, in OutStream.write(self, string) 529 is_child = (not self._is_master_process()) 530 # only touch the buffer in the IO thread to avoid races --&gt; 531 self.pub_thread.schedule(lambda: self._buffer.write(string)) 532 if is_child: 533 # mp.Pool cannot be trusted to flush promptly (or ever), 534 # and this helps. 535 if self._subprocess_flush_pending: File ~/anaconda3/lib/python3.9/site-packages/ipykernel/iostream.py:216, in IOPubThread.schedule(self, f) 214 self._events.append(f) 215 # wake event thread (message content is ignored) --&gt; 216 self._event_pipe.send(b&#39;&#39;) 217 else: 218 f() File ~/anaconda3/lib/python3.9/site-packages/zmq/sugar/socket.py:547, in Socket.send(self, data, flags, copy, track, routing_id, group) 540 data = zmq.Frame( 541 data, 542 track=track, 543 copy=copy or None, 544 copy_threshold=self.copy_threshold, 545 ) 546 data.group = group --&gt; 547 return super(Socket, self).send(data, flags=flags, copy=copy, track=track) KeyboardInterrupt: . Space . This function takes two matrices matrix1 and matrix2 as input and returns their product as a new matrix. The function creates a new matrix result with dimensions m by n to store the product of the input matrices. The size of result depends on the size of the input matrices, so the space complexity of this function is O(n^2). As the size of the input matrices increases, the amount of memory required to execute the function also increases quadratically. . . Main take away is that a new matrix is created. | . def multiply_matrices(matrix1, matrix2): m = len(matrix1) n = len(matrix2[0]) result = [[0] * n] * m #this creates the new matrix based on the size of matrix 1 and 2 for i in range(m): for j in range(n): for k in range(len(matrix2)): result[i][j] += matrix1[i][k] * matrix2[k][j] return result print(multiply_matrices([[1,2],[3,4]], [[3,4],[1,2]])) . [[18, 28], [18, 28]] . Logarithmic O(logn) . Time . An example of a log time algorithm is binary search. Binary search is an algorithm that searches for a specific element in a sorted list by repeatedly dividing the search interval in half. As a result, the time taken to complete the search grows logarithmically with the size of the list. Hence, the time complexity of this operation is O(log n), where n is the size of the list being searched. . def binary_search(arr, low, high, target): while low &lt;= high: mid = (low + high) // 2 #integer division if arr[mid] == target: return mid elif arr[mid] &lt; target: low = mid + 1 else: high = mid - 1 target = 263 result = binary_search(numbers, 0, len(numbers) - 1, target) print(result) . 263 . Space . The same algorithm above has a O(logn) space complexity. The function takes an array arr, its lower and upper bounds low and high, and a target value target. The function searches for target within the bounds of arr by recursively dividing the search space in half until the target is found or the search space is empty. The function does not create any new data structures that depend on the size of arr. Instead, the function uses the call stack to keep track of the recursive calls. Since the maximum depth of the recursive calls is O(logn), where n is the size of arr, the space complexity of this function is O(logn). As the size of arr increases, the amount of memory required to execute the function grows logarithmically. . Exponential O(2^n) . Time . An example of an O(2^n) algorithm is the recursive implementation of the Fibonacci sequence. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, starting from 0 and 1. The recursive implementation of the Fibonacci sequence calculates each number by recursively calling itself with the two preceding numbers until it reaches the base case (i.e., the first or second number in the sequence). The algorithm takes O(2^n) time in the worst case because it has to calculate each number in the sequence by making two recursive calls. . . def fibonacci(n): if n &lt;= 1: return n else: return fibonacci(n-1) + fibonacci(n-2) #print(fibonacci(5)) #print(fibonacci(10)) #print(fibonacci(20)) #print(fibonacci(30)) print(fibonacci(40)) . 102334155 . Space . This function takes a set s as input and generates all possible subsets of s. The function does this by recursively generating the subsets of the set without the first element, and then adding the first element to each of those subsets to generate the subsets that include the first element. The function creates a new list for each recursive call that stores the subsets, and each element in the list is a new list that represents a subset. The number of subsets that can be generated from a set of size n is 2^n, so the space complexity of this function is O(2^n). As the size of the input set increases, the amount of memory required to execute the function grows exponentially. . def generate_subsets(s): if not s: return [[]] subsets = generate_subsets(s[1:]) return [[s[0]] + subset for subset in subsets] + subsets print(generate_subsets([1,2,3])) #print(generate_subsets(numbers)) . [[1, 2, 3], [1, 2], [1, 3], [1], [2, 3], [2], [3], []] . Using the time library, we are able to see the difference in time it takes to calculate the fibonacci function above. . Based on what is known about the other time complexities, hypothesize the resulting elapsed time if the function is replaced. The difference between each time complexity depends on the type of multipler correlated with each. Exponential for example will be greater in time complexity than a multiplier of 5 because of the pattern of its growth. | . import time start_time = time.time() print(fibonacci(34)) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) start_time = time.time() print(fibonacci(35)) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) . 5702887 Time taken: 2.4118387699127197 seconds 9227465 Time taken: 3.898521661758423 seconds . Hacks . Record your findings when testing the time elapsed of the different algorithms. | Although we will go more in depth later, time complexity is a key concept that relates to the different sorting algorithms. Do some basic research on the different types of sorting algorithms and their time complexity. | Why is time and space complexity important when choosing an algorithm? | Should you always use a constant time algorithm / Should you never use an exponential time algorithm? Explain? | What are some general patterns that you noticed to determine each algorithm&#39;s time and space complexity? | . Complete the Time and Space Complexity analysis questions linked below. Practice . Record your findings when testing the time elapsed of the different algorithms. . import time #constant time def constant_time(n): print(&quot;This is a constant time algorithm&quot;) print(&quot;The result is:&quot;, n * 2) #logarithmic time def logarithmic_time(n): print(&quot;This is a logarithmic time algorithm&quot;) i = 1 while i &lt; n: print(i) i *= 2 #linear time def linear_time(n): print(&quot;This is a linear time algorithm&quot;) for i in range(n): print(i) #quadratic time def quadratic_time(n): print(&quot;This is a quadratic time algorithm&quot;) for i in range(n): for j in range(n): print(i, j) #exponential time def exponential_time(n): print(&quot;This is an exponential time algorithm&quot;) if n &lt;= 1: return n else: return exponential_time(n-1) + exponential_time(n-2) n = 1 start_time = time.time() constant_time(n) end_time = time.time() print(&quot;Time taken for constant time:&quot;, end_time - start_time, &quot;seconds&quot;) start_time = time.time() logarithmic_time(n) end_time = time.time() print(&quot;Time taken for logarithmic time:&quot;, end_time - start_time, &quot;seconds&quot;) start_time = time.time() linear_time(n) end_time = time.time() print(&quot;Time taken for linear time:&quot;, end_time - start_time, &quot;seconds&quot;) start_time = time.time() quadratic_time(n) end_time = time.time() print(&quot;Time taken for quadratic time:&quot;, end_time - start_time, &quot;seconds&quot;) start_time = time.time() exponential_time(n) end_time = time.time() print(&quot;Time taken for exponential time:&quot;, end_time - start_time, &quot;seconds&quot;) . This is a constant time algorithm The result is: 2 Time taken for constant time: 0.0013301372528076172 seconds This is a logarithmic time algorithm Time taken for logarithmic time: 0.00034618377685546875 seconds This is a linear time algorithm 0 Time taken for linear time: 0.0004546642303466797 seconds This is a quadratic time algorithm 0 0 Time taken for quadratic time: 0.00058746337890625 seconds This is an exponential time algorithm Time taken for exponential time: 0.00028896331787109375 seconds . n = 1: Time taken for constant time: 0.0013301372528076172 seconds Time taken for logarithmic time: 0.00034618377685546875 seconds Time taken for linear time: 0.0004546642303466797 seconds Time taken for quadratic time: 0.00058746337890625 seconds Time taken for exponential time: 0.00028896331787109375 seconds . n = 10: Time taken for constant time: 0.0019936561584472656 seconds Time taken for logarithmic time: 0.0006468296051025391 seconds Time taken for linear time: 0.0027747154235839844 seconds Time taken for quadratic time: 0.061913490295410156 seconds Time taken for exponential time: 0.05074191093444824 seconds . Log is fastest | Exponential time increases as space increases | Quadratics take longer than linear | . Do some basic research on the different types of sorting algorithms and their time complexity. . Bubble Sort: . Repeatedly swaps adjacent elements if they are in the wrong order until the list is sorted. The time complexity of bubble sort is O(n^2) Insertion Sort: | Compared each element in turn with the ones before it and inserting it into the correct position in the sorted sequence. The time complexity of insertion sort is O(n^2). Selection Sort: | This algorithm works by selecting the smallest element from the unsorted portion of the list and swapping it with the first element in the unsorted portion until the list is sorted. The time complexity of selection sort is also O(n^2). Binary Sort: | Olog(n) because binary search works by comparing given number to median of data set. Also as the dataset grows, the time complexity grows logarithmically | . Why is time and space complexity important when choosing an algorithm? . Time and space complexity directly impact the efficiency of an algorithm. The more efficient an algorithm is, the faster and less memory it consumes | If an algorithm has high time and large space complexity, it will become impractical for larger data sets. | . Should you always use a constant time algorithm / Should you never use an exponential time algorithm? Explain? . This is not necessarily true in all cases. Constant time algorithms require less time to run and are eficient however not all problems can be solved with constant algorithms. Some issues may require exponential algorithms to solve it. . What are some general patterns that you noticed to determine each algorithm&#39;s time and space complexity? . Counting the number of basic operations: The time complexity of an algorithm is proportional to the number of basic operations it performs, like arithmetic operations, assignments, comparisons | Examining nested loops: Nested loops are a common cause of high time complexity. If an algorithm contains nested loops, the time complexity is often proportional to the number of iterations | Recursive calls: If an algorithm makes a large number of recursive calls, the time complexity may be high. | Data structures: The space complexity of an algorithm often depends on the size of the data structures it uses. | If an algorithm contains many conditional statements, the time complexity may be higher. | . Time and Space Complexity analysis questions . What is the time, and space complexity of the following code: | O(N * M) time, O(1) space | O(N + M) time, O(N + M) space | O(N + M) time, O(1) space | O(N * M) time, O(N + M) space | . I choose number 3 because there are two independent variables N and M, and the variable sizes dont depend on the size of the input. So must be (N+M) and (1) . int a = 0, b = 0; for (i = 0; i &lt; N; i++) { a = a + rand(); } for (j = 0; j &lt; M; j++) { b = b + rand(); } . What is the time complexity of the following code: | O(N) | O(N*log(N)) | O(N * Sqrt(N)) | O(N*N) | . I chose option 4 because there is a for loop within one loop, so O^2. . int a = 0; for (i = 0; i &lt; N; i++) { for (j = N; j &gt; i; j--) { a = a + i + j; } } . What is the time complexity of the following code: | O(n) | O(N log N) | O(n^2) | O(n^2Logn) I chose option 2 O(nlogn) because j doubles until it is less than or equal to n, so there is logarithmic correlation | . What does it mean when we say that an algorithm X is asymptotically more efficient than Y? | X will always be a better choice for small inputs | X will always be a better choice for large inputs | Y will always be a better choice for small inputs | X will always be a better choice for all inputs | . I chose option 2, because aymptotic means growth of algorithm increases in terms of the input. . int a = 0, i = N; while (i &gt; 0) { a += i; i /= 2; } . What is the time complexity of the following code: | O(N) | O(Sqrt(N)) | O(N / 2) | O(log N) | . I chose option 4 because it outputs the smallest x, x = log(N) . Which of the following best describes the useful criterion for comparing the efficiency of algorithms? | Time | Memory | Both of the above | None of the above | . I chose both of the above, because both of these factors affect the efficiency of an algorithm . How is time complexity measured? | By counting the number of algorithms in an algorithm. | By counting the number of primitive operations performed by the algorithm on a given - input size. | By counting the size of data input to the algorithm. | None of the above | . I chose option 2, the number of primitive operations directly affect the complexity . for(var i=0;i&lt;n;i++) i*=k . What will be the time complexity of the following code? | O(n) | O(k) | O(logkn) | O(lognk) | . I chose option 3 because as it loops for k^n-1 times, taking the log it becomes logk(n) . int value = 0; for(int i=0;i&lt;n;i++) for(int j=0;j&lt;i;j++) value += 1; . What will be the time complexity of the following code? | n | (n+1) | n(n-1) | n(n+1) | . I chose option 3 because there is a for loop within another for loop. . Algorithm A and B have a worst-case running time of O(n) and O(logn), respectively. Therefore, algorithm B always runs faster than algorithm A? | True | False | . I chose the option False because the O notation provides asymptotic comparison. SO there are situations where algorithm A may run faster than B. .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2023/03/22/DS-space_time_complexity.html",
            "relUrl": "/2023/03/22/DS-space_time_complexity.html",
            "date": " • Mar 22, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Visualizing the Carbon Footprint Gap",
            "content": "Introduction . Intro blurb: Climate change and its impact on the planet has become an increasingly pressing issue in recent years. One of the primary contributors to climate change is the release of carbon dioxide (CO2) into the atomsphere, mainly through the burning of fossil fuels for energy. As a result, there is an increased interest in understanding the relationship between a country&#39;s exonomic growth (measured in gross domestic product (GDP)) and its CO2 emissions. By analyzing GDP and emission data from a wide variety of countries, this project aims to provide insights into the correlation of economic growth and carbon emissions, and contribute to the ongoing discussion of imposing climate change policy, specifically on larger contributors. . Why is CO2 so bad anyways? . The release of CO2 into the atmosphere causes heat to be trapped within. This is known as the greenhouse effect. When sunlight reaches the Earth&#39;s surface some of the energy is reflected back to space. CO2 present in the atmosphere will intercept this energy causing the CO2 molecule to experience vibrations. The vibrations are caused due to CO2&#39;s molecular structure, as it is linear containing one carbon atom and two double-bonded oxygens. This linear arrangement creates polarity, and a strong dipole moment, allowing the molecule to react strongly with EM radiation (absorb a signficant amount of energy). The molecule&#39;s absorbed energy transforms into heat. This generated heat is radiated back to the Earth&#39;s surface where it contributes to global warming, or the increase of the planet&#39;s temperature. This temperature rise leads to a number of climate impacts such as sea level rise, intense and frequent heat waves, severe storms, and changes in precipitation patterns. | . Data . IMPORTING DATA . import sqlite3 from sqlite3 import Error import plotly.io as pio pio.renderers.default = &#39;iframe&#39; def create_connection(db_file): &quot;&quot;&quot; create a database connection to the SQLite database specified by db_file :param db_file: database file :return: Connection object or None &quot;&quot;&quot; conn = None try: conn = sqlite3.connect(db_file) return conn except Error as e: print(e) return conn def create_table(conn, create_table_sql): &quot;&quot;&quot; create a table from the create_table_sql statement :param conn: Connection object :param create_table_sql: a CREATE TABLE statement :return: &quot;&quot;&quot; try: c = conn.cursor() c.execute(create_table_sql) except Error as e: print(e) def main(): database = &quot;instance/energy.db&quot; sql_create_projects_table = &quot;&quot;&quot; CREATE TABLE IF NOT EXISTS energy ( id PRIMARY KEY, country text NOT NULL, e_type text NOT NULL, year integer NOT NULL, gdp integer NOT NULL, CO2_emission Population ); &quot;&quot;&quot; sql_create_temp_table = &quot;&quot;&quot; CREATE TABLE IF NOT EXISTS temp ( country text NOT NULL, e_type text NOT NULL, year integer NOT NULL, gdp integer NOT NULL, CO2_emission ); &quot;&quot;&quot; # create a database connection conn = create_connection(database) # create tables if conn is not None: # create projects table create_table(conn, sql_create_projects_table) create_table(conn, sql_create_temp_table) else: print(&quot;Error! cannot create the database connection.&quot;) if __name__ == &#39;__main__&#39;: main() . import pandas as pd df = pd.read_csv(&#39;files/energy.csv&#39;, usecols = [&#39;Country&#39;,&#39;Energy_type&#39;,&#39;Year&#39;,&#39;GDP&#39;,&#39;CO2_emission&#39;, &#39;Population&#39;]) df.to_csv(&#39;files/energy1.csv&#39;) . import sqlite3 as sq import pandas as pd connection = sq.connect(&#39;instance/energy.db&#39;) # Create a cursor object curs = connection.cursor() student = pd.read_csv(&#39;files/energy1.csv&#39;) # Write the data to a sqlite db table student.to_sql(&#39;energy&#39;, connection, if_exists=&#39;replace&#39;, index=False) # Run select sql query curs.execute(&#39;select * from energy&#39;) # Fetch all records # as list of tuples records = curs.fetchall() # Close connection to SQLite database connection.close() . CLEANING DATA . import sqlite3 conn = sqlite3.connect(&#39;instance/energy.db&#39;) cursor = conn.cursor() cursor.execute(&quot;DELETE FROM energy WHERE Energy_type &lt;&gt; &#39;all_energy_types&#39;&quot;) cursor.execute(&quot;DELETE FROM energy WHERE Country = &#39;World&#39;&quot;) cursor.execute(&quot;DELETE FROM energy WHERE GDP IS NULL&quot;) conn.commit() cursor.close() conn.close() . XLIST, YLIST, CLIST : READYING DATA FOR VISUAL REPRESENTATION . import sqlite3 # Connect to SQLite database conn = sqlite3.connect(&#39;instance/energy.db&#39;) c = conn.cursor() # Execute SQL query to retrieve column data c.execute(&quot;SELECT GDP FROM energy&quot;) # Fetch all rows and store column data in a list x_list = [row[0] for row in c.fetchall()] # Close database connection conn.close() . import sqlite3 # Connect to SQLite database conn = sqlite3.connect(&#39;instance/energy.db&#39;) c = conn.cursor() # Execute SQL query to retrieve column data c.execute(&quot;SELECT CO2_emission FROM energy&quot;) # Fetch all rows and store column data in a list y_list = [row[0] for row in c.fetchall()] # Close database connection conn.close() . import sqlite3 # Connect to SQLite database conn = sqlite3.connect(&#39;instance/energy.db&#39;) c = conn.cursor() # Execute SQL query to retrieve column data c.execute(&quot;SELECT Country FROM energy&quot;) # Fetch all rows and store column data in a list c_list = [row[0] for row in c.fetchall()] # Close database connection conn.close() . import sqlite3 # Connect to SQLite database conn = sqlite3.connect(&#39;instance/energy.db&#39;) c = conn.cursor() # Execute SQL query to retrieve column data c.execute(&quot;SELECT Population FROM energy&quot;) # Fetch all rows and store column data in a list p_list = [row[0] for row in c.fetchall()] # Close database connection conn.close() . Visualization . import matplotlib.pyplot as plt import seaborn as sns endb = { &quot;Country&quot;: c_list, &quot;GDP&quot;: x_list, &quot;CO2 Emissions&quot;: y_list, &quot;Population&quot;: p_list } # Control figure size for this notebook: plt.rcParams[&#39;figure.figsize&#39;] = [8, 8] # data data = pd.DataFrame(endb) # use the scatterplot function to build the bubble map sns.scatterplot(data=data, x=&quot;GDP&quot;, y=&quot;CO2 Emissions&quot;, legend=False, sizes=(20, 2000)) plt.xscale(&#39;log&#39;) plt.yscale(&#39;log&#39;) # show the graph plt.show() . Add a line of best fit to understand if GDP and CO2 Emissions are correlated mathematically. . import numpy as np import matplotlib.pyplot as plt import seaborn as sns import pandas as pd # Enable interactive plots in Jupyter Notebook using mplcursors import mplcursors mplcursors.cursor(hover=True) # Create some random data with country names x = x_list y = y_list # Create a pandas DataFrame with the data and country names data = pd.DataFrame({&#39;x&#39;: x, &#39;y&#39;: y, &#39;Country&#39;: c_list}) # Calculate the regression statistics slope, intercept, r_value, p_value, std_err = stats.linregress(x, y) r_squared = r_value ** 2 # Create a scatter plot with a line of best fit using Seaborn sns.set_style(&#39;whitegrid&#39;) sns.scatterplot(data=data, x=&#39;x&#39;, y=&#39;y&#39;, hue=&#39;Country&#39;, palette=&#39;rainbow&#39;, legend=False) sns.regplot(data=data, x=&#39;x&#39;, y=&#39;y&#39;, scatter=False, color=&#39;red&#39;) # Customize the plot plt.title(f&#39;World GDP v.s. CO2 Emissions Data 2019 (Slope: {slope:.2f}, R-squared: {r_squared:.4f})&#39;) plt.xlabel(&#39;GDP (Billion $ PPP)&#39;) plt.ylabel(&#39;CO2 Emissions (MMtonnes)&#39;) # Define the metadata labels for each point labels = data[&#39;Country&#39;].tolist() # Add the metadata hover function using mplcursors mplcursors.cursor(hover=True).connect(&#39;add&#39;, lambda sel: sel.annotation.set_text(f&quot;x: {sel.target[0]:.2f} ny: {sel.target[1]:.2f} nCountry: {labels[sel.target.index]}&quot;)) # Display the plot plt.show() . Analysis . Linear Regressions statistics: . CO2 Emissions = 0.3524*GDP - 47.203 | R^2 = 0.907262 | . An r^2 value of approximately 0.91 indicates a very strong, positive correlation between Gross Domestic Product (GDP) and carbon dioxide emissions (CO2 Emissions). This means that as a country&#39;s GDP increases, its COS emissions tend to increase as well. . However, strong correlation does not necessarily imply causation. While the data suggests that a strong correlation exists between GDP and CO2 emissions of a country, many other factors such as a country&#39;s level of industrialization and energy mix could impact both factors. . Conclusion, Final Remarks . Nonetheless, the strong correlation between GDP and CO2 emissions highlights the need for effectve climate policies that address the impact of economic growth on the earth. If left unaddressed, CO2 emissions are likely to cause devastatin gimpacts on human populations, ecosystems, and even economies. . Therefore, policymakers must prioritize developing and implementing strategies to reduce carbon emissions while promoting sustainable economic growth. Measures could include transitioning to renewable energy sources (solar, hydro), promoting energy efficiency, and investing in low-carbon infrastructure. . By taking action to address the relationship between GDP and CO2 emissions, we can work towards awareness, and a more sustainable future. .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2023/03/21/GDP_vs_CO2.html",
            "relUrl": "/2023/03/21/GDP_vs_CO2.html",
            "date": " • Mar 21, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Unit 2.4b HACKS",
            "content": "import sqlite3 def create_connection(db_file): conn = None try: conn = sqlite3.connect(db_file) return conn except Error as e: print(e) return conn def create_table(conn, create_table_sql): try: c = conn.cursor() c.execute(create_table_sql) except Error as e: print(e) def main(): database = &#39;instance/books.db&#39; sql_create_books_table = &quot;&quot;&quot; CREATE TABLE IF NOT EXISTS books ( _id integer PRIMARY KEY, _author text NOT NULL, _country text NOT NULL, _title text NOT NULL, _pages integer NOT NULL, _borrowed integer NOT NULL ); &quot;&quot;&quot; conn = create_connection(database) # create table if conn is not None: # create books table create_table(conn, sql_create_books_table) else: print(&quot;Error! cannot create the database connection.&quot;) if __name__ == &#39;__main__&#39;: main() . Read . def read(): database = &#39;instance/books.db&#39; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM books&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . Table is empty . Create . def create(): database = &#39;instance/books.db&#39; author = input(&quot;Enter author name:&quot;) country = input(&quot;Enter country of origin:&quot;) title = input(&quot;Enter book title&quot;) pages = input(&quot;Enter number of pages&quot;) borrowed = input(&quot;Enter if book is borrowed. 1 for yes, 0 for no.&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO books (_author, _country, _title, _pages, _borrowed) VALUES (?, ?, ?, ?, ?)&quot;, (author, country, title, pages, borrowed)) # borrowed represents whether the book is available or not avaiable at the library, whether it is checked out or not # Commit the changes to the database conn.commit() print(f&quot;A new book record {title} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() create() . A new book record Song of Achilles has been created . read() . (1, &#39;Madeline Miller&#39;, &#39;United States of America&#39;, &#39;Song of Achilles&#39;, 416, 0) . import pandas as pd # reads the JSON file and converts it to a Pandas DataFrame df = pd.read_json(&#39;files/books.json&#39;) cols_to_print = [ &#39;author&#39;, &#39;country&#39;, &#39;title&#39;, &#39;pages&#39; ] df = df[cols_to_print] rows_to_print = [0,1,2,3,4,5, 6, 7, 8] df = df.iloc[rows_to_print] def remove_unknown(df, col): x = df[col] == &quot;Unknown&quot; df = df.drop(df[x].index) return df df = remove_unknown(df, &quot;author&quot;) print(df) . author country title pages 0 Chinua Achebe Nigeria Things Fall Apart 209 1 Hans Christian Andersen Denmark Fairy tales 784 2 Dante Alighieri Italy The Divine Comedy 928 7 Jane Austen United Kingdom Pride and Prejudice 226 8 Honoré de Balzac France Le Père Goriot 443 . import sqlite3 # populating table with sample data def populate(): database = &#39;instance/books.db&#39; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO books (_author, _country, _title, _pages, _borrowed) VALUES (?, ?, ?, ?, ?)&quot;, (&#39;Chinua Achebe&#39; , &#39;Nigeria&#39;, &#39;Things Fall Apart&#39;, 209, 0)) cursor.execute(&quot;INSERT INTO books (_author, _country, _title, _pages, _borrowed) VALUES (?, ?, ?, ?, ?)&quot;, (&#39;Hans Christian Andersen&#39; , &#39;Denmark&#39;, &#39;Fairy Tales&#39;, 784, 0)) cursor.execute(&quot;INSERT INTO books (_author, _country, _title, _pages, _borrowed) VALUES (?, ?, ?, ?, ?)&quot;, ( &#39;Dante Alighieri&#39; , &#39;Italy&#39;, &#39;The Divine Comedy&#39; , 928, 1)) cursor.execute(&quot;INSERT INTO books (_author, _country, _title, _pages, _borrowed) VALUES (?, ?, ?, ?, ?)&quot;, ( &#39;Jane Austen&#39;, &#39;United Kingdom&#39;, &#39;Pride and Prejudice&#39;, 226, 0)) cursor.execute(&quot;INSERT INTO books (_author, _country, _title, _pages, _borrowed) VALUES (?, ?, ?, ?, ?)&quot;, (&#39; Honoré de Balzac&#39;, &#39;France&#39;, &#39;Le Père Goriot&#39; , 443, 1)) # Commit the changes to the database conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() populate() . import sqlite3 # i am not sure why but here it made me redfine the read function def read(): database = &#39;instance/books.db&#39; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM books&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . (1, &#39;Madeline Miller&#39;, &#39;United States of America&#39;, &#39;Song of Achilles&#39;, 416, 0) (2, &#39;Chinua Achebe&#39;, &#39;Nigeria&#39;, &#39;Things Fall Apart&#39;, 209, 0) (3, &#39;Hans Christian Andersen&#39;, &#39;Denmark&#39;, &#39;Fairy Tales&#39;, 784, 0) (4, &#39;Dante Alighieri&#39;, &#39;Italy&#39;, &#39;The Divine Comedy&#39;, 928, 1) (5, &#39;Jane Austen&#39;, &#39;United Kingdom&#39;, &#39;Pride and Prejudice&#39;, 226, 0) (6, &#39; Honoré de Balzac&#39;, &#39;France&#39;, &#39;Le Père Goriot&#39;, 443, 1) . Delete . import sqlite3 def delete(): database = &#39;instance/books.db&#39; id = input(&quot;Enter a book id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM books WHERE _id = ?&quot;, (id,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {id} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {id} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() print(&quot;-Original Table:-&quot;) read() print(&quot;&quot;) delete() read() . -Original Table:- (1, &#39;Madeline Miller&#39;, &#39;United States of America&#39;, &#39;Song of Achilles&#39;, 416, 0) (2, &#39;Chinua Achebe&#39;, &#39;Nigeria&#39;, &#39;Things Fall Apart&#39;, 209, 0) (3, &#39;Hans Christian Andersen&#39;, &#39;Denmark&#39;, &#39;Fairy Tales&#39;, 784, 0) (4, &#39;Dante Alighieri&#39;, &#39;Italy&#39;, &#39;The Divine Comedy&#39;, 928, 1) (5, &#39;Jane Austen&#39;, &#39;United Kingdom&#39;, &#39;Pride and Prejudice&#39;, 226, 0) (6, &#39; Honoré de Balzac&#39;, &#39;France&#39;, &#39;Le Père Goriot&#39;, 443, 1) The row with uid 6 was successfully deleted (1, &#39;Madeline Miller&#39;, &#39;United States of America&#39;, &#39;Song of Achilles&#39;, 416, 0) (2, &#39;Chinua Achebe&#39;, &#39;Nigeria&#39;, &#39;Things Fall Apart&#39;, 209, 0) (3, &#39;Hans Christian Andersen&#39;, &#39;Denmark&#39;, &#39;Fairy Tales&#39;, 784, 0) (4, &#39;Dante Alighieri&#39;, &#39;Italy&#39;, &#39;The Divine Comedy&#39;, 928, 1) (5, &#39;Jane Austen&#39;, &#39;United Kingdom&#39;, &#39;Pride and Prejudice&#39;, 226, 0) . Update . import sqlite3 def update(): database = &#39;instance/books.db&#39; id = input(&quot;Enter a book id to update book&#39;s borrow status:&quot;) borrowed = input(&quot;Enter updated borrow status (1 for borrowed, 0 for returned):&quot;) if borrowed == 1: status = &quot;borrowed&quot; else: status = &quot;returned&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE books SET _borrowed = ? WHERE _id = ?&quot;, (borrowed, id)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No id {id} was not found in the table&quot;) else: print(f&quot;The book with id {id} has been updated to: {status}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() print(&#39;-Original Databse:-&#39;) read() print(&quot;&quot;) print(&#39;-Updated Databse:-&#39;) update() read() . -Original Databse:- (1, &#39;Madeline Miller&#39;, &#39;United States of America&#39;, &#39;Song of Achilles&#39;, 416, 0) (2, &#39;Chinua Achebe&#39;, &#39;Nigeria&#39;, &#39;Things Fall Apart&#39;, 209, 0) (3, &#39;Hans Christian Andersen&#39;, &#39;Denmark&#39;, &#39;Fairy Tales&#39;, 784, 0) (4, &#39;Dante Alighieri&#39;, &#39;Italy&#39;, &#39;The Divine Comedy&#39;, 928, 1) (5, &#39;Jane Austen&#39;, &#39;United Kingdom&#39;, &#39;Pride and Prejudice&#39;, 226, 0) -Updated Databse:- The book with id 1 has been updated to: returned (1, &#39;Madeline Miller&#39;, &#39;United States of America&#39;, &#39;Song of Achilles&#39;, 416, 1) (2, &#39;Chinua Achebe&#39;, &#39;Nigeria&#39;, &#39;Things Fall Apart&#39;, 209, 0) (3, &#39;Hans Christian Andersen&#39;, &#39;Denmark&#39;, &#39;Fairy Tales&#39;, 784, 0) (4, &#39;Dante Alighieri&#39;, &#39;Italy&#39;, &#39;The Divine Comedy&#39;, 928, 1) (5, &#39;Jane Austen&#39;, &#39;United Kingdom&#39;, &#39;Pride and Prejudice&#39;, 226, 0) . Menu with CRUD . def create(): database = &#39;instance/books.db&#39; author = input(&quot;Enter author name:&quot;) country = input(&quot;Enter country of origin:&quot;) title = input(&quot;Enter book title&quot;) pages = input(&quot;Enter number of pages&quot;) borrowed = input(&quot;Enter if book is borrowed. 1 for yes, 0 for no.&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO books (_author, _country, _title, _pages, _borrowed) VALUES (?, ?, ?, ?, ?)&quot;, (author, country, title, pages, borrowed)) # borrowed represents whether the book is available or not avaiable at the library, whether it is checked out or not # Commit the changes to the database conn.commit() print(f&quot;A new book record {title} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . (1, &#39;Madeline Miller&#39;, &#39;United States of America&#39;, &#39;Song of Achilles&#39;, 416, 1) (2, &#39;Chinua Achebe&#39;, &#39;Nigeria&#39;, &#39;Things Fall Apart&#39;, 209, 0) (3, &#39;Hans Christian Andersen&#39;, &#39;Denmark&#39;, &#39;Fairy Tales&#39;, 784, 0) (4, &#39;Agatha Christie&#39;, &#39;The United Kingdom&#39;, &#39;And Then There Were None&#39;, 272, 0) A new book record Harry Potter and the Chamber of Secrets has been created (1, &#39;Madeline Miller&#39;, &#39;United States of America&#39;, &#39;Song of Achilles&#39;, 416, 1) (2, &#39;Chinua Achebe&#39;, &#39;Nigeria&#39;, &#39;Things Fall Apart&#39;, 209, 0) (3, &#39;Hans Christian Andersen&#39;, &#39;Denmark&#39;, &#39;Fairy Tales&#39;, 784, 0) (4, &#39;Agatha Christie&#39;, &#39;The United Kingdom&#39;, &#39;And Then There Were None&#39;, 272, 0) (5, &#39;J.K. Rowling&#39;, &#39;United Kingdom&#39;, &#39;Harry Potter and the Chamber of Secrets&#39;, 357, 1) The book with id 5 has been updated to: returned (1, &#39;Madeline Miller&#39;, &#39;United States of America&#39;, &#39;Song of Achilles&#39;, 416, 1) (2, &#39;Chinua Achebe&#39;, &#39;Nigeria&#39;, &#39;Things Fall Apart&#39;, 209, 0) (3, &#39;Hans Christian Andersen&#39;, &#39;Denmark&#39;, &#39;Fairy Tales&#39;, 784, 0) (4, &#39;Agatha Christie&#39;, &#39;The United Kingdom&#39;, &#39;And Then There Were None&#39;, 272, 0) (5, &#39;J.K. Rowling&#39;, &#39;United Kingdom&#39;, &#39;Harry Potter and the Chamber of Secrets&#39;, 357, 0) The row with uid 5 was successfully deleted (1, &#39;Madeline Miller&#39;, &#39;United States of America&#39;, &#39;Song of Achilles&#39;, 416, 1) (2, &#39;Chinua Achebe&#39;, &#39;Nigeria&#39;, &#39;Things Fall Apart&#39;, 209, 0) (3, &#39;Hans Christian Andersen&#39;, &#39;Denmark&#39;, &#39;Fairy Tales&#39;, 784, 0) (4, &#39;Agatha Christie&#39;, &#39;The United Kingdom&#39;, &#39;And Then There Were None&#39;, 272, 0) .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2023/03/18/2.4b-hacks.html",
            "relUrl": "/2023/03/18/2.4b-hacks.html",
            "date": " • Mar 18, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . The Tri 2 Final Project is an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? The categories of the table, or the column names . What is the purpose of identity Column in SQL database? Id column makes the information or data to be much easier to access | What is the purpose of a primary key in SQL database? Purpose of a primary key is to be unique to each row | What are the Data Types in SQL table? You can find integers, strings, booleans, floats, lists, dictionaries | . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . (0, &#39;id&#39;, &#39;INTEGER&#39;, 1, None, 1) (1, &#39;_name&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (2, &#39;_uid&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (3, &#39;_password&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (4, &#39;_dob&#39;, &#39;DATE&#39;, 0, None, 0) . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? Connection objects allows for connection to sqlite database | Same for cursor object? Cursor allows you to execute methods in the sqlite database | Look at conn object and cursor object in VSCode debugger. What attributes are in the object? | Is &quot;results&quot; an object? How do you know? Results is an object because it contains data. Object can also have methods. | . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$8gMqHiwNVm0kXKKI$e159a432d7ac4cb4bd17a8619f131b71430a17ed69cb5d3ba765655d5d1afe4d&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$yddo2rIBRboB3CaL$9586ee89961d58e7bc162a21333e205d595905a56a4c240bcfdbfe68397ab91f&#39;, &#39;2023-03-15&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$fAA6oCO9HY0x45gn$50a2c9838da05300f9856613f09f687b56c7e3ae315f2fd9b99efe9dcc0eed40&#39;, &#39;2023-03-15&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$skWViWpiKMTlpuzt$700a3e766ef4ac7bd8828ec63256e307169757a59b4dbfe0ca7063f190eec1cc&#39;, &#39;2023-03-15&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$MjzIZS0QvsCMAILH$2df094760bd8e2b3fe2ff6bcde9cddc5cacb0c3eb34a79bc4c9a725ddf5fac66&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$9XHd8Q0dQ8mq8CE5$00c3fbbdcff0edec3bfc5971b468d2bf7cbf8e765f75c0a5a7cac88f96960968&#39;, &#39;1921-10-21&#39;) (7, &#39;tanisha patil&#39;, &#39;tanisha&#39;, &#39;sha256$hEFHH2bIvs3zjl3e$c56be81867f31a8ef02148b973caefd04e04039177946e0360efd3ad575f4728&#39;, &#39;2023-07-03&#39;) . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compare create() in both SQL lessons. What is better or worse in the two implementations? create() in the first lesson utilizes object oriented programming while the second one takes a more imperitave approach, based on individual functions. In OOP , large databases stay organized while in Imperitave may become diffucult to navigate and add to after a certain amount of data. However, imperitave is easier to understand and can therefore be easier to work with at times. | Explain purpose of SQL INSERT. Is this the same as User init? SQL INSERT inserts data into a specified schema of the table. User init initiallizes the dataset. They are not the same thing. | . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() create() . A new user record thehall has been created . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? The hacked part ensures that the length of the password is greater than 2. If it is not, the message is updated to hacked. | . Explain try/except, when would except occur? Except would occur when there was a problem connecting to the sqlite database or performing a function on the database . | What code seems to be repeated in each of these examples to point, why is it repeated? Defining conn and cursor is repeated in all of these exmaples, because otherwise a connection to the swlite database can not be formed. . | . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() read() update() read() . (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$8gMqHiwNVm0kXKKI$e159a432d7ac4cb4bd17a8619f131b71430a17ed69cb5d3ba765655d5d1afe4d&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$yddo2rIBRboB3CaL$9586ee89961d58e7bc162a21333e205d595905a56a4c240bcfdbfe68397ab91f&#39;, &#39;2023-03-15&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$fAA6oCO9HY0x45gn$50a2c9838da05300f9856613f09f687b56c7e3ae315f2fd9b99efe9dcc0eed40&#39;, &#39;2023-03-15&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$skWViWpiKMTlpuzt$700a3e766ef4ac7bd8828ec63256e307169757a59b4dbfe0ca7063f190eec1cc&#39;, &#39;2023-03-15&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$MjzIZS0QvsCMAILH$2df094760bd8e2b3fe2ff6bcde9cddc5cacb0c3eb34a79bc4c9a725ddf5fac66&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$9XHd8Q0dQ8mq8CE5$00c3fbbdcff0edec3bfc5971b468d2bf7cbf8e765f75c0a5a7cac88f96960968&#39;, &#39;1921-10-21&#39;) (7, &#39;tanisha patil&#39;, &#39;tanisha&#39;, &#39;56784&#39;, &#39;2023-07-03&#39;) The row with user id tanisha the password has been successfully updated (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$8gMqHiwNVm0kXKKI$e159a432d7ac4cb4bd17a8619f131b71430a17ed69cb5d3ba765655d5d1afe4d&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$yddo2rIBRboB3CaL$9586ee89961d58e7bc162a21333e205d595905a56a4c240bcfdbfe68397ab91f&#39;, &#39;2023-03-15&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$fAA6oCO9HY0x45gn$50a2c9838da05300f9856613f09f687b56c7e3ae315f2fd9b99efe9dcc0eed40&#39;, &#39;2023-03-15&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$skWViWpiKMTlpuzt$700a3e766ef4ac7bd8828ec63256e307169757a59b4dbfe0ca7063f190eec1cc&#39;, &#39;2023-03-15&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$MjzIZS0QvsCMAILH$2df094760bd8e2b3fe2ff6bcde9cddc5cacb0c3eb34a79bc4c9a725ddf5fac66&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$9XHd8Q0dQ8mq8CE5$00c3fbbdcff0edec3bfc5971b468d2bf7cbf8e765f75c0a5a7cac88f96960968&#39;, &#39;1921-10-21&#39;) (7, &#39;tanisha patil&#39;, &#39;tanisha&#39;, &#39;newpassword&#39;, &#39;2023-07-03&#39;) . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? Yes delete can be a dangerous operation when the database is public because of the fact that people may attempt to wipe the entire database. | What is the &quot;f&quot; and {uid} do? f is a replacement for .format, and allows any variables in the string to automatically be converted into string format. This is called an f-string. {uid} allows the program to access data based on the userinput of uid. | . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() read() delete() read() . (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$8gMqHiwNVm0kXKKI$e159a432d7ac4cb4bd17a8619f131b71430a17ed69cb5d3ba765655d5d1afe4d&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$yddo2rIBRboB3CaL$9586ee89961d58e7bc162a21333e205d595905a56a4c240bcfdbfe68397ab91f&#39;, &#39;2023-03-15&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$fAA6oCO9HY0x45gn$50a2c9838da05300f9856613f09f687b56c7e3ae315f2fd9b99efe9dcc0eed40&#39;, &#39;2023-03-15&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$skWViWpiKMTlpuzt$700a3e766ef4ac7bd8828ec63256e307169757a59b4dbfe0ca7063f190eec1cc&#39;, &#39;2023-03-15&#39;) (5, &#39;Mr. Jones&#39;, &#39;indi&#39;, &#39;sha256$gjKv9nN7FYcmRBvE$032f865254b1d20593a5d6e59cf600685f6d17f1ec0663d06c8610050efd8bc0&#39;, &#39;1920-10-21&#39;) The row with uid whit was successfully deleted . OOP vs Imperitive . I think for our case imperitive is more effective since we are dealing with a small database. However Object Oriented Programming is more useful for larger database, or is more scalable. . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? menu() repeats because menu() is a recurssive function, meaning it calls menu() within itself. | Could you refactor this menu? Make it work with a List? If this means make the input a list or c, r, u, d that the program should run then yes this could be done. The program could split the user input into each of the methods that must be run and continue accordingly. | . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$8gMqHiwNVm0kXKKI$e159a432d7ac4cb4bd17a8619f131b71430a17ed69cb5d3ba765655d5d1afe4d&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$yddo2rIBRboB3CaL$9586ee89961d58e7bc162a21333e205d595905a56a4c240bcfdbfe68397ab91f&#39;, &#39;2023-03-15&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$fAA6oCO9HY0x45gn$50a2c9838da05300f9856613f09f687b56c7e3ae315f2fd9b99efe9dcc0eed40&#39;, &#39;2023-03-15&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$skWViWpiKMTlpuzt$700a3e766ef4ac7bd8828ec63256e307169757a59b4dbfe0ca7063f190eec1cc&#39;, &#39;2023-03-15&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$MjzIZS0QvsCMAILH$2df094760bd8e2b3fe2ff6bcde9cddc5cacb0c3eb34a79bc4c9a725ddf5fac66&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$9XHd8Q0dQ8mq8CE5$00c3fbbdcff0edec3bfc5971b468d2bf7cbf8e765f75c0a5a7cac88f96960968&#39;, &#39;1921-10-21&#39;) (7, &#39;tanisha patil&#39;, &#39;tanisha&#39;, &#39;sha256$hEFHH2bIvs3zjl3e$c56be81867f31a8ef02148b973caefd04e04039177946e0360efd3ad575f4728&#39;, &#39;2023-07-03&#39;) (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$8gMqHiwNVm0kXKKI$e159a432d7ac4cb4bd17a8619f131b71430a17ed69cb5d3ba765655d5d1afe4d&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$yddo2rIBRboB3CaL$9586ee89961d58e7bc162a21333e205d595905a56a4c240bcfdbfe68397ab91f&#39;, &#39;2023-03-15&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$fAA6oCO9HY0x45gn$50a2c9838da05300f9856613f09f687b56c7e3ae315f2fd9b99efe9dcc0eed40&#39;, &#39;2023-03-15&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$skWViWpiKMTlpuzt$700a3e766ef4ac7bd8828ec63256e307169757a59b4dbfe0ca7063f190eec1cc&#39;, &#39;2023-03-15&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$MjzIZS0QvsCMAILH$2df094760bd8e2b3fe2ff6bcde9cddc5cacb0c3eb34a79bc4c9a725ddf5fac66&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$9XHd8Q0dQ8mq8CE5$00c3fbbdcff0edec3bfc5971b468d2bf7cbf8e765f75c0a5a7cac88f96960968&#39;, &#39;1921-10-21&#39;) (7, &#39;tanisha patil&#39;, &#39;tanisha&#39;, &#39;sha256$hEFHH2bIvs3zjl3e$c56be81867f31a8ef02148b973caefd04e04039177946e0360efd3ad575f4728&#39;, &#39;2023-07-03&#39;) (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$8gMqHiwNVm0kXKKI$e159a432d7ac4cb4bd17a8619f131b71430a17ed69cb5d3ba765655d5d1afe4d&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$yddo2rIBRboB3CaL$9586ee89961d58e7bc162a21333e205d595905a56a4c240bcfdbfe68397ab91f&#39;, &#39;2023-03-15&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$fAA6oCO9HY0x45gn$50a2c9838da05300f9856613f09f687b56c7e3ae315f2fd9b99efe9dcc0eed40&#39;, &#39;2023-03-15&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$skWViWpiKMTlpuzt$700a3e766ef4ac7bd8828ec63256e307169757a59b4dbfe0ca7063f190eec1cc&#39;, &#39;2023-03-15&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$MjzIZS0QvsCMAILH$2df094760bd8e2b3fe2ff6bcde9cddc5cacb0c3eb34a79bc4c9a725ddf5fac66&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$9XHd8Q0dQ8mq8CE5$00c3fbbdcff0edec3bfc5971b468d2bf7cbf8e765f75c0a5a7cac88f96960968&#39;, &#39;1921-10-21&#39;) (7, &#39;tanisha patil&#39;, &#39;tanisha&#39;, &#39;sha256$hEFHH2bIvs3zjl3e$c56be81867f31a8ef02148b973caefd04e04039177946e0360efd3ad575f4728&#39;, &#39;2023-07-03&#39;) (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$8gMqHiwNVm0kXKKI$e159a432d7ac4cb4bd17a8619f131b71430a17ed69cb5d3ba765655d5d1afe4d&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$yddo2rIBRboB3CaL$9586ee89961d58e7bc162a21333e205d595905a56a4c240bcfdbfe68397ab91f&#39;, &#39;2023-03-15&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$fAA6oCO9HY0x45gn$50a2c9838da05300f9856613f09f687b56c7e3ae315f2fd9b99efe9dcc0eed40&#39;, &#39;2023-03-15&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$skWViWpiKMTlpuzt$700a3e766ef4ac7bd8828ec63256e307169757a59b4dbfe0ca7063f190eec1cc&#39;, &#39;2023-03-15&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$MjzIZS0QvsCMAILH$2df094760bd8e2b3fe2ff6bcde9cddc5cacb0c3eb34a79bc4c9a725ddf5fac66&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$9XHd8Q0dQ8mq8CE5$00c3fbbdcff0edec3bfc5971b468d2bf7cbf8e765f75c0a5a7cac88f96960968&#39;, &#39;1921-10-21&#39;) (7, &#39;tanisha patil&#39;, &#39;tanisha&#39;, &#39;sha256$hEFHH2bIvs3zjl3e$c56be81867f31a8ef02148b973caefd04e04039177946e0360efd3ad575f4728&#39;, &#39;2023-07-03&#39;) . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Create a new Table or do something new, sqlite documentation | In implementation in previous bullet, do you see procedural abstraction? | .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2023/03/16/AP-unit2-4b.html",
            "relUrl": "/2023/03/16/AP-unit2-4b.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? | . Flask app object Used this as an api for project last tri | SQLAlchemy object Used this to create access data from sqlite table. | &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class:- class User purposeClass user marks all of the characteristics of the class and what factors are included in that class . db.Model inheritance db.model is being inherited by the user. db.model is being but into user, so the db.model functions like column can be used, through inheritcance we can use different functions and create sqlite table | init method sets up the attributes of the class | @property, @.setter getter is equivalent to read, and setter is equivalent to update/create. These are properites.&lt;/li&gt; additional methods create, read, update methods within the user itself. | &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) in human readable form, uses getter # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.add(self) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? | . Create All Tables from db Object db Object is organized in a structured manner. Create All tables allows the creation of the table. Later it can be populated with user inputed data. | User Object Constructors By defining all methods of the user object in the constructor, the model users is consistent and can be used many times throughout the applications. | Try / Except Accounts for an error. Returns None if error getting the data occurs. | &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Records exist uid toby, or error. Records exist uid niko, or error. Records exist uid lex, or error. Records exist uid whit, or error. Records exist uid indi, or error. Created new uid raven . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following | . User.query.filter_byfilters by the parameter set, in this case uid . | user.password Checks if passwor | def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): return True return False #check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following | . user.find_by_uid() and try/except used to retrience a user object by its unique identifier, uid. Uses try and expect to handle error | user = User(...) used to make a new &#39;User&#39; object with appropriate parameters and to first populate the table. Uses try and expect to handle error | user.dob and try/except used to retrience a user object by date of birth property of user object . Uses try and expect to handle error | user.create() and try/except used to add a new user object to database. Uses try and expect to handle error | def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dbo}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Created {&#39;id&#39;: 7, &#39;name&#39;: &#39;Tanisha Patil&#39;, &#39;uid&#39;: &#39;tanisha&#39;, &#39;dob&#39;: &#39;09-03-2007&#39;, &#39;age&#39;: 15} . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following | . User.query.all Retrieves all instances of a particular table from a databse using SQLAlchemy | json_ready assignment Prepares a python object or datastructure to be put into json format | # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # each user adds user.read() to list return json_ready read() . [{&#39;id&#39;: 1, &#39;name&#39;: &#39;Thomas Edison&#39;, &#39;uid&#39;: &#39;toby&#39;, &#39;dob&#39;: &#39;02-11-1847&#39;, &#39;age&#39;: 176}, {&#39;id&#39;: 2, &#39;name&#39;: &#39;Nikola Tesla&#39;, &#39;uid&#39;: &#39;niko&#39;, &#39;dob&#39;: &#39;03-15-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 3, &#39;name&#39;: &#39;Alexander Graham Bell&#39;, &#39;uid&#39;: &#39;lex&#39;, &#39;dob&#39;: &#39;03-15-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 4, &#39;name&#39;: &#39;Eli Whitney&#39;, &#39;uid&#39;: &#39;whit&#39;, &#39;dob&#39;: &#39;03-15-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 5, &#39;name&#39;: &#39;Indiana Jones&#39;, &#39;uid&#39;: &#39;indi&#39;, &#39;dob&#39;: &#39;10-21-1920&#39;, &#39;age&#39;: 102}, {&#39;id&#39;: 6, &#39;name&#39;: &#39;Marion Ravenwood&#39;, &#39;uid&#39;: &#39;raven&#39;, &#39;dob&#39;: &#39;10-21-1921&#39;, &#39;age&#39;: 101}, {&#39;id&#39;: 7, &#39;name&#39;: &#39;Tanisha Patil&#39;, &#39;uid&#39;: &#39;tanisha&#39;, &#39;dob&#39;: &#39;09-03-2007&#39;, &#39;age&#39;: 15}] . Delete and Update Functions . def delete_by_uid(): uid = input(&quot;Enter uid of user to be deleted.&quot;) user = find_by_uid(uid) # using previous function to locate user by inputted id with app.app_context(): try: object = user.delete() print(f&quot;User with uid --{uid}-- has been deleted. &quot;) db = read() print(db) except: # error raised if object not found (f&quot;No user with uid {uid} was found.&quot;) delete_by_uid() . User with uid --tanisha-- has been deleted. [{&#39;id&#39;: 1, &#39;name&#39;: &#39;Thomas Edison&#39;, &#39;uid&#39;: &#39;toby&#39;, &#39;dob&#39;: &#39;02-11-1847&#39;, &#39;age&#39;: 176}, {&#39;id&#39;: 2, &#39;name&#39;: &#39;Nikola Tesla&#39;, &#39;uid&#39;: &#39;niko&#39;, &#39;dob&#39;: &#39;03-15-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 3, &#39;name&#39;: &#39;Alexander Graham Bell&#39;, &#39;uid&#39;: &#39;lex&#39;, &#39;dob&#39;: &#39;03-15-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 4, &#39;name&#39;: &#39;Eli Whitney&#39;, &#39;uid&#39;: &#39;whit&#39;, &#39;dob&#39;: &#39;03-15-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 5, &#39;name&#39;: &#39;Indiana Jones&#39;, &#39;uid&#39;: &#39;indi&#39;, &#39;dob&#39;: &#39;10-21-1920&#39;, &#39;age&#39;: 102}, {&#39;id&#39;: 6, &#39;name&#39;: &#39;Marion Ravenwood&#39;, &#39;uid&#39;: &#39;raven&#39;, &#39;dob&#39;: &#39;10-21-1921&#39;, &#39;age&#39;: 101}] . def update_user(): uid = input(&quot;Enter uid of user to be updated&quot;) user = find_by_uid(uid) name = input(&quot;Enter new name:&quot;) password = input(&quot;Enter new password:&quot;) with app.app_context(): try: object = user.update(name=name,uid=uid, password=password) print(f&quot;User with uid --{uid}-- has been updated: {object} &quot;) except: # error raised if object not found (f&quot;No user with uid {uid} was found.&quot;) db = read() print(&quot;Updated db:&quot;) print(db) update_user() . User with uid --indi-- has been updated: {&#34;id&#34;: 5, &#34;name&#34;: &#34;Mr. Jones&#34;, &#34;uid&#34;: &#34;indi&#34;, &#34;dob&#34;: &#34;10-21-1920&#34;, &#34;age&#34;: 102} Updated db: [{&#39;id&#39;: 1, &#39;name&#39;: &#39;Thomas Edison&#39;, &#39;uid&#39;: &#39;toby&#39;, &#39;dob&#39;: &#39;02-11-1847&#39;, &#39;age&#39;: 176}, {&#39;id&#39;: 2, &#39;name&#39;: &#39;Nikola Tesla&#39;, &#39;uid&#39;: &#39;niko&#39;, &#39;dob&#39;: &#39;03-15-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 3, &#39;name&#39;: &#39;Alexander Graham Bell&#39;, &#39;uid&#39;: &#39;lex&#39;, &#39;dob&#39;: &#39;03-15-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 4, &#39;name&#39;: &#39;Eli Whitney&#39;, &#39;uid&#39;: &#39;whit&#39;, &#39;dob&#39;: &#39;03-15-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 5, &#39;name&#39;: &#39;Mr. Jones&#39;, &#39;uid&#39;: &#39;indi&#39;, &#39;dob&#39;: &#39;10-21-1920&#39;, &#39;age&#39;: 102}, {&#39;id&#39;: 6, &#39;name&#39;: &#39;Marion Ravenwood&#39;, &#39;uid&#39;: &#39;raven&#39;, &#39;dob&#39;: &#39;10-21-1921&#39;, &#39;age&#39;: 101}] . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Add Update functionality to this blog. | Add Delete functionality to this blog. | . &lt;/div&gt; | .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2023/03/13/AP-unit2-4a.html",
            "relUrl": "/2023/03/13/AP-unit2-4a.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "2.3.1 Analyzing Data . Issues to consider: . tools needed to analyze data | use of multiple processors | potential bias (intentional and unintentional) | data cleanong: identifying incomplete, duplicate, or inaccurate records and modeifying or deleting them ## 2.3.2 Meta Data | Meta data is data &quot;behind the screens&quot;. Some data has data about itself like who created it, when it was made, etc. This is called Meta Data | Example: A photo may have meta data like date, time, location ; a book may have author, title, genre, date of publication, length ## 2.4 Using Programs with Data | Data can be filtered, sorted, combined, classified, or transformed | Each iteration of data can give us more insight | Programs can be used to process data to aquire information | Tables, diagrams, text, and other visual tools can be used to communicate insight and knowledge gained from data | Search tools are useful for efficiently finding information | Data filtering systems are important tools for finding information and recognizing patterns in data | Programs such as spreadsheets help efficiently organize and find trends in information | . HACKS: . worked with books dataset used linear regression model to find if there is correlation between year published and number of pages, came up with a conclusion . import pandas as pd # reads the JSON file and converts it to a Pandas DataFrame df = pd.read_json(&#39;files/books.json&#39;) # print dataframe print(df) . author country 0 Chinua Achebe Nigeria 1 Hans Christian Andersen Denmark 2 Dante Alighieri Italy 3 Unknown Sumer and Akkadian Empire 4 Unknown Achaemenid Empire .. ... ... 95 Vyasa India 96 Walt Whitman United States 97 Virginia Woolf United Kingdom 98 Virginia Woolf United Kingdom 99 Marguerite Yourcenar France/Belgium imageLink language 0 images/things-fall-apart.jpg English 1 images/fairy-tales.jpg Danish 2 images/the-divine-comedy.jpg Italian 3 images/the-epic-of-gilgamesh.jpg Akkadian 4 images/the-book-of-job.jpg Hebrew .. ... ... 95 images/the-mahab-harata.jpg Sanskrit 96 images/leaves-of-grass.jpg English 97 images/mrs-dalloway.jpg English 98 images/to-the-lighthouse.jpg English 99 images/memoirs-of-hadrian.jpg French link pages 0 https://en.wikipedia.org/wiki/Things_Fall_Apart n 209 1 https://en.wikipedia.org/wiki/Fairy_Tales_Told... 784 2 https://en.wikipedia.org/wiki/Divine_Comedy n 928 3 https://en.wikipedia.org/wiki/Epic_of_Gilgamesh n 160 4 https://en.wikipedia.org/wiki/Book_of_Job n 176 .. ... ... 95 https://en.wikipedia.org/wiki/Mahabharata n 276 96 https://en.wikipedia.org/wiki/Leaves_of_Grass n 152 97 https://en.wikipedia.org/wiki/Mrs_Dalloway n 216 98 https://en.wikipedia.org/wiki/To_the_Lighthouse n 209 99 https://en.wikipedia.org/wiki/Memoirs_of_Hadri... 408 title year 0 Things Fall Apart 1958 1 Fairy tales 1836 2 The Divine Comedy 1315 3 The Epic Of Gilgamesh -1700 4 The Book Of Job -600 .. ... ... 95 Mahabharata -700 96 Leaves of Grass 1855 97 Mrs Dalloway 1925 98 To the Lighthouse 1927 99 Memoirs of Hadrian 1951 [100 rows x 8 columns] . This is a lot of data to work with, and not all of it is really needed. In the next code block I am going to select the specific rows and columns I want to work with for now. . import pandas as pd # reads the JSON file and converts it to a Pandas DataFrame df = pd.read_json(&#39;files/books.json&#39;) cols_to_print = [ &#39;title&#39;,&#39;author&#39;, &#39;pages&#39;, &#39;year&#39;] df = df[cols_to_print] rows_to_print = [0,1,2,3,4,5, 6, 7, 8] df = df.iloc[rows_to_print] print(df) # What part of the data set needs to be cleaned? # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? . title author pages year 0 Things Fall Apart Chinua Achebe 209 1958 1 Fairy tales Hans Christian Andersen 784 1836 2 The Divine Comedy Dante Alighieri 928 1315 3 The Epic Of Gilgamesh Unknown 160 -1700 4 The Book Of Job Unknown 176 -600 5 One Thousand and One Nights Unknown 288 1200 6 Njál&#39;s Saga Unknown 384 1350 7 Pride and Prejudice Jane Austen 226 1813 8 Le Père Goriot Honoré de Balzac 443 1835 . Great, now the data is easier to read. However, I can not display this data since there are some missing sections specifically records 3-6 for the &#39;authors&#39; field. I don&#39;t want these records because they are incomplete so I will write a function to clean the data. . def remove_unknown(df, col): x = df[col] == &quot;Unknown&quot; df = df.drop(df[x].index) return df df = remove_unknown(df, &quot;author&quot;) print(df) . title author pages year 0 Things Fall Apart Chinua Achebe 209 1958 1 Fairy tales Hans Christian Andersen 784 1836 2 The Divine Comedy Dante Alighieri 928 1315 7 Pride and Prejudice Jane Austen 226 1813 8 Le Père Goriot Honoré de Balzac 443 1835 . Great, now the data is cleaned. All unkowns are removed. Now lets sort the data by descending page numbers. . df_sorted = df.sort_values(&#39;pages&#39;, ascending=False) df = df_sorted print(df) . title author pages year 2 The Divine Comedy Dante Alighieri 928 1315 1 Fairy tales Hans Christian Andersen 784 1836 8 Le Père Goriot Honoré de Balzac 443 1835 7 Pride and Prejudice Jane Austen 226 1813 0 Things Fall Apart Chinua Achebe 209 1958 . Max?! Mins?! . print( &quot;--Max Pages-- n&quot;, df[df.pages == df.pages.max()]) print(&quot;&quot;) print( &quot;--Min Pages-- n&quot;, df[df.pages == df.pages.min()]) print(&quot;&quot;) print( &quot;--Max Year-- n&quot;, df[df.year == df.year.max()]) print(&quot;&quot;) print( &quot;--Min Pages-- n&quot;, df[df.year == df.year.min()]) . --Max Pages-- title author pages year 2 The Divine Comedy Dante Alighieri 928 1315 --Min Pages-- title author pages year 0 Things Fall Apart Chinua Achebe 209 1958 --Max Year-- title author pages year 0 Things Fall Apart Chinua Achebe 209 1958 --Min Pages-- title author pages year 2 The Divine Comedy Dante Alighieri 928 1315 . Interesting... could page numbers and year have a linear correlation? . Quick Overview on Linear Regression : . Basically linear regression&#39;s purpose is to find a line of best fit, to essentially prove linear correlation between an independent variable and a target variable, in this case number of pages and year published. Xtrain, xtest, Ytrain, and ytest are used for machine learning models. Here there is a training set and a testing state. Training set is data we give to the model. Testing set is data unseen by the model. The model makes predictions given the testing data and previous trends it find with the training data. If there is linear correlation, there is high accuracy in the outputs for testing data, which means r2 value should be close to 1 or -1. . import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.metrics import r2_score # load book data bookdf = pd.read_json(&#39;files/books.json&#39;) # assign seperate variables to pages and years pages = bookdf[&#39;pages&#39;] year = bookdf[&#39;year&#39;] # reshape data so it may be used in linear regression model. Linear regression required a 2D array with one column. pages = np.array(pages).reshape(-1,1) year = np.array(year) # split into training and testing sets of data pages_train, pages_test, year_train, year_test = train_test_split(pages, year, test_size=0.2, random_state=42) # create linear regression model and train with traindata regr = LinearRegression() regr.fit(pages_train, year_train) # model is trained, now try some test data year_pred = regr.predict(pages_test) # basically seeing how linear the model is, or how accurate it is r2 = r2_score(year_test, year_pred) print(&quot;R-squared is&quot;, r2) . R-squared is -0.015050410465296427 . What this r value means is that there is poor linear correlation between year and number of pages. Older books are not necessarily lengthier! The two data points we observed in min and max happened to be a coincidence. Corellation does not equal causation. . Files To Get . Save this file to your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-03-09-AP-unit2-3.ipynb . Save these files into a subfolder named files in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/data.csv . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/grade.json . Save this image into a subfolder named images in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/images/table_dataframe.png . Pandas and DataFrames . In this lesson we will be exploring data analysis using Pandas. . College Board talks about ideas like Tools. &quot;the ability to process data depends on users capabilities and their tools&quot; | Combining Data. &quot;combine county data sets&quot; | Status on Data&quot;determining the artist with the greatest attendance during a particular month&quot; | Data poses challenge. &quot;the need to clean data&quot;, &quot;incomplete data&quot; | . | . From Pandas Overview -- When working with tabular data, such as data stored in spreadsheets or databases, pandas is the right tool for you. pandas will help you to explore, clean, and process your data. In pandas, a data table is called a DataFrame. | . . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd . Cleaning Data . When looking at a data set, check to see what data needs to be cleaned. Examples include: . Missing Data Points | Invalid Data | Inaccurate Data | . Run the following code to see what needs to be cleaned . df = pd.read_json(&#39;files/grade.json&#39;) print(df) # What part of the data set needs to be cleaned? # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 2 578 12 2.78 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 6 145 12 2.95 7 167 10 3.90 8 235 9th Grade 3.15 9 nil 9 2.80 10 469 11 3.45 11 456 10 2.75 . Extracting Info . Take a look at some features that the Pandas library has that extracts info from the dataset . DataFrame Extract Column . print(df[[&#39;GPA&#39;]]) print() #try two columns and remove the index from print statement print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=False)) . GPA 0 3.57 1 4.00 2 2.78 3 3.45 4 4.75 5 3.33 6 2.95 7 3.90 8 3.15 9 2.80 10 3.45 11 2.75 Student ID GPA 123 3.57 246 4.00 578 2.78 469 3.45 324 4.75 313 3.33 145 2.95 167 3.90 235 3.15 nil 2.80 469 3.45 456 2.75 . DataFrame Sort . print(df.sort_values(by=[&#39;GPA&#39;])) print() #sort the values in reverse order print(df.sort_values(by=[&#39;GPA&#39;], ascending=False)) . Student ID Year in School GPA 11 456 10 2.75 2 578 12 2.78 9 nil 9 2.80 6 145 12 2.95 8 235 9th Grade 3.15 5 313 20 3.33 3 469 11 3.45 10 469 11 3.45 0 123 12 3.57 7 167 10 3.90 1 246 10 4.00 4 324 Junior 4.75 Student ID Year in School GPA 4 324 Junior 4.75 1 246 10 4.00 7 167 10 3.90 0 123 12 3.57 3 469 11 3.45 10 469 11 3.45 5 313 20 3.33 8 235 9th Grade 3.15 6 145 12 2.95 9 nil 9 2.80 2 578 12 2.78 11 456 10 2.75 . DataFrame Selection or Filter . print(df[df.GPA &gt; 3.00]) . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 7 167 10 3.90 8 235 9th Grade 3.15 10 469 11 3.45 . DataFrame Selection Max and Min . print(df[df.GPA == df.GPA.max()]) print() print(df[df.GPA == df.GPA.min()]) . Student ID Year in School GPA 4 324 Junior 4.75 Student ID Year in School GPA 11 456 10 2.75 . Create your own DataFrame . Using Pandas allows you to create your own DataFrame in Python. . Python Dictionary to Pandas DataFrame . import pandas as pd #the data can be stored as a python dictionary dict = { &quot;calories&quot;: [420, 380, 390, 372], &quot;duration&quot;: [50, 40, 45, 43] } #stores the data in a data frame print(&quot;-Dict_to_DF&quot;) df = pd.DataFrame(dict) print(df) print(&quot;-Dict_to_DF_labels--&quot;) #or with the index argument, you can label rows. df = pd.DataFrame(dict, index = [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;, &quot;day4&quot;]) print(df) . -Dict_to_DF calories duration 0 420 50 1 380 40 2 390 45 3 372 43 -Dict_to_DF_labels-- calories duration day1 420 50 day2 380 40 day3 390 45 day4 372 43 . Examine DataFrame Rows . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df.loc[[&quot;day1&quot;, &quot;day3&quot;]]) #refer to the row index: print(&quot;--Examine Single Row--&quot;) print(df.loc[&quot;day1&quot;]) . -Examine Selected Rows calories duration day1 420 50 day3 390 45 --Examine Single Row-- calories 420 duration 50 Name: day1, dtype: int64 . Pandas DataFrame Information . print(df.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 4 entries, day1 to day4 Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 calories 4 non-null int64 1 duration 4 non-null int64 dtypes: int64(2) memory usage: 268.0+ bytes None . Example of larger data set . Pandas can read CSV and many other types of files, run the following code to see more features with a larger data set . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) . --Duration Top 10 Duration Pulse Maxpulse Calories 69 300 108 143 1500.2 79 270 100 131 1729.0 109 210 137 184 1860.4 60 210 108 160 1376.0 106 180 90 120 800.3 90 180 101 127 600.1 65 180 90 130 800.4 61 160 110 137 1034.4 62 160 109 135 853.0 67 150 107 130 816.0 --Duration Bottom 10 Duration Pulse Maxpulse Calories 68 20 106 136 110.4 100 20 95 112 77.7 89 20 83 107 50.3 135 20 136 156 189.0 94 20 150 171 127.4 95 20 151 168 229.4 139 20 141 162 222.4 64 20 110 130 131.4 112 15 124 139 124.2 93 15 80 100 50.5 . APIs are a Source for Writing Programs with Data . 3rd Party APIs are a great source for creating Pandas Data Frames. . Data can be fetched and resulting json can be placed into a Data Frame | Observe output, this looks very similar to a Database | . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; fetch = requests.get(url) json = fetch.json() # filter data for requirement df = pd.DataFrame(json[&#39;countries_stat&#39;]) # filter endpoint for country stats print(df.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths fetch() . country_name cases deaths 0 USA 82,649,779 1,018,316 1 India 43,057,545 522,193 2 Brazil 30,345,654 662,663 3 France 28,244,977 145,020 4 Germany 24,109,433 134,624 5 UK 21,933,206 173,352 . Hacks . Early Seed award . Add this Blog to you own Blogging site. | Have all lecture files saved to your files directory before Tech Talk starts. Have data.csv open in vscode. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In blog add College Board practice problems for 2.3. | . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Fambulous. | . When choosing a data set, think about the following:- Does it have a good sample size? - Is there bias in the data? - Does the data set need to be cleaned? - What is the purpose of the data set? - ... . Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) | . Hack Helpers . Here is how Mort started on this assignment by asking ChatGPT ... Regarding Python Pandas, what are some data sets that would be good for learning Pandas? . There are many data sets that are suitable for learning pandas, depending on your interests and the skills you want to develop. Here are some suggestions:- Titanic Dataset: This is a classic dataset for data analysis and machine learning, and is often used as an introduction to pandas. The dataset contains information about passengers on the Titanic, including their demographics, ticket class, and survival status. . Iris Dataset: This is another classic dataset that is often used in machine learning and data analysis courses. The dataset contains information about iris flowers, including their sepal length, sepal width, petal length, and petal width. . | NBA Player Stats: This dataset contains information about NBA players, including their stats for various games, their positions, and their salaries. It is a great dataset for learning how to clean and manipulate data using pandas. . | Housing Prices Dataset: This dataset contains information about housing prices in a particular city or region, including variables such as the number of bedrooms, square footage, and price. It is a great dataset for learning how to manipulate and analyze numerical data using pandas. . | COVID-19 Dataset: This dataset contains information about the COVID-19 pandemic, including the number of cases, deaths, and recoveries in various countries and regions. It is a great dataset for learning how to manipulate and analyze time-series data using pandas. . | World Bank Dataset: This dataset contains information about economic indicators from various countries, such as GDP, population, and poverty rates. It is a great dataset for learning how to manipulate and analyze large datasets using pandas. . | . | These are just a few examples of the many datasets that are suitable for learning pandas. The best dataset for you will depend on your interests and the specific skills you want to develop. . Follow up question, &quot;where can I find Titanic data set?&quot; . | The Titanic dataset is a popular dataset for data analysis and machine learning, and it can be found on various websites and data repositories. Here are a few places where you can find the Titanic dataset:- Kaggle: The Titanic dataset is available on Kaggle, which is a popular platform for data scientists and machine learning enthusiasts. You can download the dataset from the Kaggle website after creating an account. . UCI Machine Learning Repository: The Titanic dataset is also available on the UCI Machine Learning Repository, which is a collection of datasets that are commonly used for machine learning research. You can download the dataset from the UCI Machine Learning Repository website. . | Seaborn library: If you have the Seaborn library installed in your Python environment, you can load the Titanic dataset directly from the library using the following code: . import seaborn as sns titanic_data = sns.load_dataset(&#39;titanic&#39;) . | . | . Titanic Data . Look at a sample of data. . import seaborn as sns # Load the titanic dataset titanic_data = sns.load_dataset(&#39;titanic&#39;) print(&quot;Titanic Data&quot;) print(titanic_data.columns) # titanic data set print(titanic_data[[&#39;survived&#39;,&#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;class&#39;, &#39;fare&#39;, &#39;embark_town&#39;]]) # look at selected columns . Titanic Data Index([&#39;survived&#39;, &#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;fare&#39;, &#39;embarked&#39;, &#39;class&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;deck&#39;, &#39;embark_town&#39;, &#39;alive&#39;, &#39;alone&#39;], dtype=&#39;object&#39;) survived pclass sex age sibsp parch class fare 0 0 3 male 22.0 1 0 Third 7.2500 1 1 1 female 38.0 1 0 First 71.2833 2 1 3 female 26.0 0 0 Third 7.9250 3 1 1 female 35.0 1 0 First 53.1000 4 0 3 male 35.0 0 0 Third 8.0500 .. ... ... ... ... ... ... ... ... 886 0 2 male 27.0 0 0 Second 13.0000 887 1 1 female 19.0 0 0 First 30.0000 888 0 3 female NaN 1 2 Third 23.4500 889 1 1 male 26.0 0 0 First 30.0000 890 0 3 male 32.0 0 0 Third 7.7500 embark_town 0 Southampton 1 Cherbourg 2 Southampton 3 Southampton 4 Southampton .. ... 886 Southampton 887 Southampton 888 Southampton 889 Cherbourg 890 Queenstown [891 rows x 9 columns] . Use Pandas to clean the data. Most analysis, like Machine Learning or even Pandas in general like data to be in standardized format. This is called &#39;Training&#39; or &#39;Cleaning&#39; data. . # Preprocess the data from sklearn.preprocessing import OneHotEncoder td = titanic_data td.drop([&#39;alive&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;class&#39;, &#39;embark_town&#39;, &#39;deck&#39;], axis=1, inplace=True) td.dropna(inplace=True) td[&#39;sex&#39;] = td[&#39;sex&#39;].apply(lambda x: 1 if x == &#39;male&#39; else 0) td[&#39;alone&#39;] = td[&#39;alone&#39;].apply(lambda x: 1 if x == True else 0) # Encode categorical variables enc = OneHotEncoder(handle_unknown=&#39;ignore&#39;) enc.fit(td[[&#39;embarked&#39;]]) onehot = enc.transform(td[[&#39;embarked&#39;]]).toarray() cols = [&#39;embarked_&#39; + val for val in enc.categories_[0]] td[cols] = pd.DataFrame(onehot) td.drop([&#39;embarked&#39;], axis=1, inplace=True) td.dropna(inplace=True) print(td) . survived pclass sex age sibsp parch fare alone embarked_C 0 0 3 1 22.0 1 0 7.2500 0 0.0 1 1 1 0 38.0 1 0 71.2833 0 1.0 2 1 3 0 26.0 0 0 7.9250 1 0.0 3 1 1 0 35.0 1 0 53.1000 0 0.0 4 0 3 1 35.0 0 0 8.0500 1 0.0 .. ... ... ... ... ... ... ... ... ... 705 0 2 1 39.0 0 0 26.0000 1 0.0 706 1 2 0 45.0 0 0 13.5000 1 0.0 707 1 1 1 42.0 0 0 26.2875 1 0.0 708 1 1 0 22.0 0 0 151.5500 1 0.0 710 1 1 0 24.0 0 0 49.5042 1 1.0 embarked_Q embarked_S 0 0.0 1.0 1 0.0 0.0 2 0.0 1.0 3 0.0 1.0 4 0.0 1.0 .. ... ... 705 0.0 1.0 706 0.0 1.0 707 1.0 0.0 708 0.0 1.0 710 0.0 0.0 [564 rows x 11 columns] . The result of &#39;Training&#39; data is making it easier to analyze or make conclusions. In looking at the Titanic, as you clean you would probably want to make assumptions on likely chance of survival. . This would involve analyzing various factors (such as age, gender, class, etc.) that may have affected a person&#39;s chances of survival, and using that information to make predictions about whether an individual would have survived or not. . Data description:- Survival - Survival (0 = No; 1 = Yes). Not included in test.csv file. - Pclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd) . Name - Name | Sex - Sex | Age - Age | Sibsp - Number of Siblings/Spouses Aboard | Parch - Number of Parents/Children Aboard | Ticket - Ticket Number | Fare - Passenger Fare | Cabin - Cabin | Embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton) | . | Perished Mean/Average . | . print(titanic_data.query(&quot;survived == 0&quot;).mean()) . survived 0.000000 pclass 2.464072 sex 0.844311 age 31.073353 sibsp 0.562874 parch 0.398204 fare 24.835902 alone 0.616766 embarked_C 0.185629 embarked_Q 0.038922 embarked_S 0.775449 dtype: float64 . Survived Mean/Average | . print(td.query(&quot;survived == 1&quot;).mean()) . survived 1.000000 pclass 1.878261 sex 0.326087 age 28.481522 sibsp 0.504348 parch 0.508696 fare 50.188806 alone 0.456522 embarked_C 0.152174 embarked_Q 0.034783 embarked_S 0.813043 dtype: float64 . Survived Max and Min Stats . print(td.query(&quot;survived == 1&quot;).max()) print(td.query(&quot;survived == 1&quot;).min()) . survived 1.0000 pclass 3.0000 sex 1.0000 age 80.0000 sibsp 4.0000 parch 5.0000 fare 512.3292 alone 1.0000 embarked_C 1.0000 embarked_Q 1.0000 embarked_S 1.0000 dtype: float64 survived 1.00 pclass 1.00 sex 0.00 age 0.75 sibsp 0.00 parch 0.00 fare 0.00 alone 0.00 embarked_C 0.00 embarked_Q 0.00 embarked_S 0.00 dtype: float64 . Machine Learning . From Tutorials Point%20is,a%20consistence%20interface%20in%20Python). Scikit-learn (Sklearn) is the most useful and robust library for machine learning in Python. It provides a selection of efficient tools for machine learning and statistical modeling including classification, regression, clustering and dimensionality reduction via a consistence interface in Python.&gt; Description from ChatGPT. The Titanic dataset is a popular dataset for data analysis and machine learning. In the context of machine learning, accuracy refers to the percentage of correctly classified instances in a set of predictions. In this case, the testing data is a subset of the original Titanic dataset that the decision tree model has not seen during training......After training the decision tree model on the training data, we can evaluate its performance on the testing data by making predictions on the testing data and comparing them to the actual outcomes. The accuracy of the decision tree classifier on the testing data tells us how well the model generalizes to new data that it hasn&#39;t seen before......For example, if the accuracy of the decision tree classifier on the testing data is 0.8 (or 80%), this means that 80% of the predictions made by the model on the testing data were correct....Chance of survival could be done using various machine learning techniques, including decision trees, logistic regression, or support vector machines, among others. . Code Below prepares data for further analysis and provides an Accuracy. IMO, you would insert a new passenger and predict survival. Datasets could be used on various factors like prediction if a player will hit a Home Run, or a Stock will go up or down. Decision Trees, prediction by a piecewise constant approximation. - Logistic Regression, the probabilities describing the possible outcomes. | . | . from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Split arrays or matrices into random train and test subsets. X = td.drop(&#39;survived&#39;, axis=1) y = td[&#39;survived&#39;] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Train a decision tree classifier dt = DecisionTreeClassifier() dt.fit(X_train, y_train) # Test the model y_pred = dt.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;DecisionTreeClassifier Accuracy:&#39;, accuracy) # Train a logistic regression model logreg = LogisticRegression() logreg.fit(X_train, y_train) # Test the model y_pred = logreg.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;LogisticRegression Accuracy:&#39;, accuracy) . DecisionTreeClassifier Accuracy: 0.7294117647058823 LogisticRegression Accuracy: 0.788235294117647 . /home/tanisha1234/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1): STOP: TOTAL NO. of ITERATIONS REACHED LIMIT. Increase the number of iterations (max_iter) or scale the data as shown in: https://scikit-learn.org/stable/modules/preprocessing.html Please also refer to the documentation for alternative solver options: https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression n_iter_i = _check_optimize_result( .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2023/03/09/AP-unit2-3.html",
            "relUrl": "/2023/03/09/AP-unit2-3.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": "Data Compression Blog . 2.2 Compressing Data Video Notes . Data compression is a reduction in the number of bits needed to represent data | Data compression is used to save transmission time and storage space | When data is compressed, repeated patterns and predictability | compression can be lossy or lossless... | . Lossy vs Lossless . Lossy data compression: reduces the number of bits stored or transmitted while guarenteeing complete reconstruction of the original data. (approach used when removal of some data has no effect on the representation of the content) Ex. Graphics, audio, Video, Images | Lossless data compression: reduced the number of bits stored or transmitted while guarenteeing complete reconstruction of the original data (approach used where the loss of data would change the information Ex. text, spreadsheets) | . This could have lossy compression because it is a solid color, so losing specific parts of the image woul dnot affect it&#39;s overall look or function as a blue square: . . This must have lossless compression because it is a detailed picture. With lossy, important parts of the picture may be left out which can change the overall function of the picture: . . In short, if an image is simple it is more likely to use lossy compression than a complicated image since no critical data will be lost in a simple picture | . Compiled Questions from this Notebook . What are commands you use in terminal to access files? . You can use cd which changes directory, ls which lists the content of a directory, rm which deletes a file . What are the command you use in Windows terminal to access files? . You can use cd to change directory, dir to list the contents of a directory, and del to remove a file . What are some of the major differences? . Terminal uses a &quot;Unix-file&quot; system, meaning many commands that work in terminal will not work with windows. For example the commands for delete and listing the contents of a directory are different with each. Also file paths are different. . Provide what you observed, struggled with, or leaned while playing with this code. . Originally I was having alot of probems with the images. In the begining the images would not load due to a format issue. The name suffix of the file did not match the file type itself. Then I had issues with the img path. With some research I was able to correct my mistake and realize that my path was calling a non existent file since my image itself was not in the right images folder. Path is very important when working with images because if the program can&#39;t find the image, it can&#39;t run your manipulations. . Why is path a big deal when working with images? . The path is important when working with images because the path is the location of the image file in your system. When you work with images you have to specific the image&#39;s path in order to display it or manipulate it using compression methods. If the path is incorrect you can not work with the image. . How does the meta data source and label relate to Unit 5 topics? . Meta data is the data that provides background information about other data. It describes teh characteristics of data. In unit 5&#39;s context, understanding metadata is important for anaylyzing data and getting insight from it. By understanding metadata, we can learn how to manipulate and extract important data and draw conclusions about it, which is a major focus of unit 5. . Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? . Ipython provides a more flexible and interactive environment for working with pandas and images in jupyter notebooks. Ipython&#39;s tab completion allows to quickly view functions available to manipuate data. . Does this code seem like a series of steps are being performed? . Yes this code (grey scale code) looks like a series of steps. It looks like the functions such as management are depended on by other functions to run, and are all called at the very end of the code. . Describe Grey Scale algorithm in English or Pseudo code? . First the function revieves an image object with a PIL object &#39;img&#39;. The function then recieves the data using img.getdata() and stores it in img_data. img_data is converted into a NumPy array. image[] --&gt; gray_data is a list created to store the grey scale values of the image. The function iterates through every pixel in image[]--&gt; data and calculates the average value of its RGB and stores the value in a variable called &#39;average&#39;. If the length of the pixel is greater than 3 the img is assumed to be PNG and its grey scale values are appended to the list along with the transparency values (alpha channel values). If it is not png only the grey scale values are appended. img.putdata method is used to update the image with the new grey scale values. The function then generates HTML for the grey scale image, stores it, and then displays. . Describe scale image? What is before and after on pixels in three images? . In a scale image, colors are used to represent different data values. These colors can be manipulated causing &#39;filters&#39; such as grey scale, and red, green, blue scale. Thre three images go through the grey scale process and the outcome is a black and white version of the original photo. . Is scale image a type of compression? If so, line it up with College Board terms described? . Scale image is not a type of compression. It can be used as a precursor step to image compression but they are not the same. Image compression techniques can be used to compress color scale images though. . Incorporate into my project . I could not do this since my project does not incorporate images with actual function. . My Use of PIL . I started off by researching about other PIL effects, filters, and how to do color scales. . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import ImageFilter import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot; World Flower database&quot;, &#39;label&#39;: &quot;Tulip&quot;, &#39;file&#39;: &quot;tulip.png&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Red Scale Base64 rep. of the image def image_management_add_html_red(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;data_red&#39;] = [] # # data_red is a new list which will contain key-value pair of the converted red-scale data # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # this will loop through every pixel (object) in the image data if len(pixel) &gt; 3: image[&#39;data_red&#39;].append((pixel[0], 0, 0, pixel[3])) # the zeroes are representing the blue and green being set to 0. this is in RGB format else: image[&#39;data_red&#39;].append((pixel[0], 0, 0)) img.putdata(image[&#39;data_red&#39;]) image[&#39;html_red&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) def image_management_add_html_blur(image): img = image[&#39;pil&#39;].filter(ImageFilter.BLUR) # updating image[] with the new blurred image # set new img pil_blur to original img image[&quot;pil_blur&quot;] = img image[&#39;html_blur&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&quot;pil_blur&quot;], image[&#39;format&#39;]) # all image[html] store the manipulated, in this case blurred image into a string of base 64 (as stated above). This representation of the image is stored in HTML4 # We can repeat this exact process for blue and green. Instead I&#39;m going to adjust some of the colors manually for a surprise filter. def image_management_add_html_surprise(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;data_surprise&#39;] = [] # # data_red is a new list which will contain key-value pair of the converted red-scale data # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # this will loop through every pixel (object) in the image data if len(pixel) &gt; 3: image[&#39;data_surprise&#39;].append((pixel[0], 20, 102, pixel[3])) # the zeroes are representing the blue and green being set to 0. this is in RGB format else: image[&#39;data_surprise&#39;].append((pixel[0], 102, 20)) img.putdata(image[&#39;data_surprise&#39;]) image[&#39;html_surprise&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # display default images from image_data() print(&quot;The Original Image:&quot;) default_images = image_data() image_display(default_images) images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;--Grey Scale!--&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print(&quot;--Blurry!--&quot;) image_management_add_html_blur(image) display(HTML(image[&#39;html_blur&#39;])) print(&quot;--Red Scale!--&quot;) image_management_add_html_red(image) display(HTML(image[&#39;html_red&#39;])) print(&quot;--Surprise Scale!--&quot;) image_management_add_html_surprise(image) display(HTML(image[&#39;html_surprise&#39;])) print() . Original Image: . --Grey Scale!-- . --Blurry!-- . --Red Scale!-- . --Surprise Scale!-- . . I think the surprise scale is definitely my favorite one!! . Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. . Clouds Impression | Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | Size, height and width, number of pixels | Visual perception, lossy compression | . Displaying images in Python Jupyter notebook . Python Libraries and Concepts used for Jupyter and Files/Directories . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}, {&#39;source&#39;: &quot;Smiley&quot;, &#39;label&#39;: &quot;Smiley&quot;, &#39;file&#39;: &quot;smiley.png&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? . Translate first 3 letters of your name to Base64. | . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? | From your consumer experience, what effects have you experienced from buffering? | How do these effects apply to images? | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- original image -- . grey image - . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- original image -- . grey image - . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- original image -- . grey image - . . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL | numpy | base64 | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . - meta data -- Green Square Internet green-square-16.png PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- scaled image -- . grey image . - meta data -- Clouds Impression Peter Carolin clouds-impression.png PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- scaled image -- . grey image . - meta data -- Lassen Volcano Peter Carolin lassen-volcano.jpg JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- scaled image -- . grey image . . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.3 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2023/03/07/AP-unit2-2.html",
            "relUrl": "/2023/03/07/AP-unit2-2.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "Test 2 final Blog",
            "content": "Results . . Questions . 13. . I chose: A) I only | Correct answer and notes: C) I and II only III is also an answer because under creative commons license the author can stipulate what kind if modification is made by the users. *review licenses | . 23. . I chose: B) A round-off error occurred | Correct answer and notes: A) Overflow error. The answer is overflow. 5: 101 3: 011 8: 1000 The one is left off because it is only 3-bit. Therefore there is an overflow error. | . 22. . I chose: D) Neither grid I or grid II | COrrect answer and notes: A) Grid I only. Carefully review each answer choice especially for the robot-grid questions. These questions I tend to miss because I do not spend enough time reviewing it. | .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2023/03/06/finalexam2.html",
            "relUrl": "/2023/03/06/finalexam2.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "Database CRUD Operations",
            "content": "&lt;!DOCTYPE html&gt; . Review&#39;s Average: . . .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/data/database",
            "relUrl": "/data/database",
            "date": " • Feb 13, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "Big Idea 5 Blogs",
            "content": "5.1 Effects of Computing Innovations - Lesson Notes . Machines have fostered progress and creativity in medical field, engineering, communications, and even art However computing innovations can also have downsides: | digital divide | bias | legal/ethical concerns | internet safety | Dopamine | Additionally you could have loss of privacy, replacement of humans for jobs, over dependence on technology, and negative health consequences. | Example: AI, machine learning, and data mining have greatly benefitted many fields, but also cause bias and unintended discrimination To be a responsible programmer, it is important to look at the bigger picture, and understand the effects of any computing innovation they create. | . 5.1 Blog Reflection Questions . COme up with three of your own beneficial and corresponding harmful effects of computing? Computers can help with different jobs, for example robot assisted surgery. A corresponding harm is that as jobs become more and more computerized, there may be a time where computer jobs surpass human labor. | Computers help spread information and can be used for education. A corresponding harm is that it can also spread misinformation and harmful bias, epecially to younger, more impressionable people. | Technology can help form communities of like-minded people. A corresponding harm is that technology can also drive wedges, and decrease the amount of face-to-face communication . | . | Talk about dopamine issues above? Anything that is impacting your personal study and success in High School? Social media, video games, and other forms of interactive technology have proved to become addicting by allowing our brains to release dopamine. This addiction is negative because it forces time away from things such as school and spending time with friends/family. This actually did affect me heavily to the point where I would have to sacrifice my own health and sleep in order to catch up on school work that I could’ve done without the presence of my phone. Because of this I deleted social media off of my phone and since then, I have fixed the issue of my sleep schedule. I think this addiction is truly dangerous and affects many people at Del Norte. | . | 5.2 Digital Divide - Lesson Notes . Causes of digital divide: . Digital divide: the gulf between those who have ready access to computers and the internet and those who do not. As technology evoloves the digital divide presents equal participation and oppurtunity in all parts of life, affecting people in certain countries, and households with low income. | Poor or rural areas in the world have less access to technology | Also some countries have restricted access At Del Norte: | Internet blockers | Need for personal computers | Internet safety | . 5.2 Blog Reflection Questions . How does someone empower themself in a digital world? | Digital literacy allows for a plethora of things that lead to self empowerment. These things include self learning, self sustainability, access to more oppurtunities, and interest based skill development. How does someone that is empowered help someone that is not empowered? Describe something you could do at Del Norte HS? | | Empowered people can provide unempowered people by providing with a platform to empower themselves. Del Norte high school for example, provides many of their students with chromebooks. Is paper or red tape blocking digital empowerment? Are there barriers like this at Del Norte? | | There are many barriers in our world that prevent the digital empowerment of certain people. One barrier at Del Norte is a financial barrier. Many aren’t able to be digitally empowered because they lack access to proper technology. | . 5.3 and 5.4 Notes . The hacks for this section are to summarize and give our takes on the discussion from class. . Algorithmic Bias . Computers can be biased in serveral ways: . Data (Discussed through training data of hp facial recognition software): data used to train a machine learning model can contain biases such as data sets that underepresent a certain group and therefore make unfair decisions about said groups. | Algorithms : Algorithms can be buil twith bias. Again, facial recognition software: darker skin tones yield higher fail rate for facial recognition software | Humans who designed algorithms, etc may be biased themselves (conspiracies we discussed in class) | . It is crucial to know and understand that technology can contain bias too and to consider that while writing your own algorithms. . Discussions: . Female AI voices: . We discussed that when designed, this AI may have had human basis or originate from stereotyping, we concluded that this voice was probably just a default that people just seemed to enjoy more. In an effort to meet peoples’ expectations, they most likely just designed it that way. | . Are Hp computers racist: . I believe that Hp computers are not racist. For one, more data on people of color is required to make a conclusion. Secondly, it is clearly the training data that is faulty not the people neccesarliy selling the laptop. To avoid data bias we discussed the importance of crowd surfing through the use of online surveys. | . 5.4 Notes . Crowdsourcing: Using large, diverse, and quite random groups of people to get unbiased and pure data. In order to do this it is important to consider location, demographic, etc. | An excellent example of crowdsourcing we see in our class is through Rapid API. Some of that data, relating to surveys and people must have come from excellent crowd surfer | How could del norte help with crowdsources? we could ask people are our school to use our two main databases in order to give feedback about mainly the UI and to test if the program works with multipe people. We would have more perspective and therefore less bias so let’s begin the survey as son as possible. | . 5.5 and 5.6 Notes . 5.5 Notes . In the discussion we began by discussing the benefits and harms of copyright. We decided that the main harm is limitations when borrowing art or building off of it seen especially in youtube and the greatest benefit is allowing owners to be properly credited for their hard work. | We also talked about how unfair it is when creator’s get their work misused or ‘stolen’. To avoid this, we use liscences (even on Github) to protect our work 5.5 Hacks Reflection . When you create a GitHub repository it requests a license type. Review the license types in relationship to this Tech Talk and make some notes in your personal blog. . | Each license is unique in the needs they tend to and privacies they guarentee. After discussing, we came to the conclusion that the MIT license was the best because it allows versions of our original work to be used as long as we are credited. This is important because our project provides a framework for buisnesses such as cat cafes so allowing the public to use our project is essentially the entire purpose. In your blog, summarize the discussions and personal analysis on Software Licenses/Options, Digital Rights, and other Legal and Ethical thoughts from this College Board topic. (restated) | In the discussion we began by discussing the benefits and harms of copyright. We decided that the main harm is limitations when borrowing art or building off of it seen especially in youtube and the greatest benefit is allowing owners to be properly credited for their hard work. | We also talked about how unfair it is when creator’s get their work misused or ‘stolen’. To avoid this, we use liscences (even on Github) to protect our work Make a license for your personal (blog) and Team repositories for the CPT project. Be sure to have a license for both Team GitHub repositories (frontend/backend). Document license(s) you picked and why. FYI, frontend, since it is built on GitHub pages may come with a license and restrictions. Document in blog how team made license choice and process of update. | As stated above, our group decided to use the MIT license since our website is meant to provide a framework for the public. | . 5.6 Notes . We began the discussion by talking about what happens when we google ourselves. Everybody mostly said that not much was on the internet about them because of our lack of presence on the internet and young age. | We discussed how certain information on the internet could be violating such as social security numbers, bank accounts, passwords, pictures. | We began to discuss the importance of internet safety and protecting sesitive information. We discussed things such as two factor authentification, encryption. | Lastly we discussed how we can prevent people, especially ones who do not use the internet as often from getting scammed or their private information stolen. The main vulnerable targets discussed were very old people and very young people, both not having much knowledge on internet safety. We talked about the importance of educating each other, using virus protectors, and not clicking on sketchy links. 5.6 Hacks Reflection . Describe PII you have seen on project in CompSci Principles. . | Many of the project ask for names for a sign in. Additionally one of the projects asked for your grades which can be very personal to students. What are your feelings about PII and your personal exposure? | I feel that my data when given to websites should be protected. I would not like it if my photos were out without my permission unless its something that I have given permission to post, such as school affiliated clubs and organizations. Describe good and bad passwords? What is another step that is used to assist in authentication. | Good passwords are unique to the person and do not contain ‘easy to guess’ information like names and birth years. Another step used in authentication is two factor authentication, using your email or phone number which is good because it is less likely for someone to access your account that way. For example Slack uses two factor. I learned this the hard way because I used my school email to sign up and when it asked to email me I realized I couldn’t access an inbox thorugh my school email. (Still don’t know how to fix this) Try to describe Symmetric and Asymmetric encryption | Symmetric encryption uses the same key to both encrypt and decrypt data. Assmmetric uses two different keys to encrypt and decrypt. Provide an example of encryption we used in AWS deployment. | AES-256 is the technology we use to encrypt data in AWS Describe a phishing scheme you have learned about the hard way. Describe some other phishing techniques. | My friend and I were researching for a research paper in English and one of the sites had some sketchy ads. My friend clicked on one by mistake and immediately it navigated to what seemed like a fake lottery site that asked for name, age and asked to provide card information to supposedly buy a lottery ticket. | Also I’ve heard so many free-movie sites causing viruses horror stories from people | Additionally many scam callers have tried to get my credit card number on the most random occassions. Personally think it’s so out of pocket. | So one phishing technique, which usually works really well on old people is scam calls that promise one thing in exchange for your data. Another one is ‘too good to be true’ advertisements that steal your data like the fake lottery ticket site. | .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2023/01/30/lesson5.1blogs.html",
            "relUrl": "/2023/01/30/lesson5.1blogs.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "CB Test 1 Blog",
            "content": "Results . Overall, I did better on this test compared to the last. I was able to finish this test in a shorter window of time, and I found that I could answer more questions without the help of outside resoureces. Here are notes on the four questions I got wrong. These questions fall under a category of questions that I found the most difficult. I will be discussing this, patterns I found, and strategies in the reflection portion of this blog. . Corrections . Here are the four problems that I answered incorrectly. There are other problems on the test that made me stop to think but those problems fall under the categories that these four problems address. . 27 . Which of the following code segments can be used to move the robot to the gray square along the path indicated by the arrows? My answer: The correct answer: N should be assigned a value one greater than n after the loops. Otherwise, the robot does not reach the right place since n is incremented incorrectly, given the initial assignment n=1. I think the reason that this problem stumped me is because the answer choices were so similar. Avoiding this mistake is simple, I would just have to read the choices more carefully and imagine the output of the code if it were to run. Writing down the results of each segment could be helpful. . 30 . The drawCircle procedure is to be used to draw the following figure on a coordinate grid. Which of the following code segments can be used to draw the figure My answer: x ← 4 y ← 1 r ← 0 REPEAT 3 TIMES { drawCircle(x, y, r) r ← r + 1 y ← y + 1 } The correct answer: x ← 4 y ← 1 r ← 0 REPEAT 3 TIMES { r ← r + 1 y ← y + 1 drawCircle(x, y, r) } This is correct because the r and y values must be incremented before the drawCircle method is called. This is very similar to the mistake I made on number 27. I think I need to work more on simulating the results of each code option in my head. . 32 . The figure below shows a robot in a grid of squares. The robot is represented as a triangle, which is initially facing upward. The robot can move into a white or gray square but cannot move into a black region. My answer: The correct answer: This answer is correct due to the middle block. ** Be more careful when reading code block answers. Try to draw them out. This is a little different from the previous two mistakes because this mistake does not involve increments. However, I think I just misread the answer choices because looking back, it is clear that 4-3 is the answer. . 39 . Programs I and II below are each intended to calculate the sum of the integers from 1 to n. Assume that n is a positive integer (e.g., 1, 2, 3, …). Which of the following best describes the behavior of the two programs? My answer: Program II displays the correct sum, but program I does not. The correct answer: Both program I and program II display the correct sum. I thought the first one did not work. However it does work and this mistake could have been avoided if I took note of how the variable result was affected through the loops. . Hexa to Decimal . to convert hexadecimal, take each digit of the hexadecimal from right to left and multiply by powers of 16 starting from 0 and replace the digits. | . Reflection . Overall, most of these mistakes I had could be avoided through drawing out the results or writing down my thoughts. It will be importnt that I learn where the increments should go within the loops. Also it was mentioned above in questions but I had to search up how to convert hexa decimal to decimal. . Heuristic: not every problem can be solved with code without sacrificing perfection for the sake of simplicity and time | Make sure to check every single option | For problems with multiple selections, make sure to look at each very carefully | .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2023/01/30/cbtestblog1.html",
            "relUrl": "/2023/01/30/cbtestblog1.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "CPT overview",
            "content": "Program Purpose and Function The program serves to provide a public platform for customers to share their experiences and opinions about the restaurant. Additionally the program serves the purpose of organizing customer feedback in a way which can be analyzed by the business. The program allows the user to input their name, written review, and numerical rating of their experience. The user data is validated and then added to a database and displayed in a well organized table for future users to view. Additionally, the program updates the average rate value with every new review added and gives authorized users to delete certain reviews. . . . Managing Complexities The list being used here is ratesList. ratesList is used to store an array of the rates taken from each user’s review in the database. This ratesList is used in two ways. For one, it is averaged to provide for the average rate, which updates for every review added. Additionally, ratesList is used in creating the rates distribution table. For this task each rate must be accounted for, checked, and then assigned to its proper distribution value. To do this task with variables or another method would be inefficient and time consuming as the number of rates in the database increases. A list also maintains the necessary information in one location making it easier to access and keep track of for operations. In ratesList is a change were to be made, such as a change in the number of rates, an additional object in the list would be created rather than a new variable. . . Procedural Abstraction This procedure countRates() takes a list as a parameter. First the variables ratevalue_1, ratevalue_2 …. ratevalue_5 are assigned to the value 0. The function will count the number of each rate value present in the list and add it to the counter variables to return a dictionary of key-value pairs containing the counted rates data. . . Algorithmic Implementation The program iterates through the list defined in the parameters beginning with a for statement, stating to iterate through all values in the list within the length of the list. The program then uses if/elif statements to see if the value being passed matches the certain parameter, and therefore what ratevalue_num counter variable should be updated accordingly. The loop repeats for the length of the list, therefore accounting for every rate in the database. The function will count the number of each rate value present in the list and add it to the counter variables to return a sequenced dictionary of key-value pairs containing the counted rates data. . Testing Condition(s) tested by the first call: This call will include an unhappy review, with a rate of 1. Condition(s) tested by the first call: This call will include an happy review, with a rate of 5. Result(s) tested by the first call: The average rate will decrease due to an addition of a rate lesser than the original average. The rate will be appended to ratesList, and an increase of one will be accounted for in ratevalue_1 and displayed in the reviews distribution table . Result(s) tested by the first call: The average rate will increase due to an addition of a rate greater than the original average. The rate will be appended to ratesList, and an increase of one will be accounted for in ratevalue_5 and displayed in the reviews distribution table. .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2023/01/30/5.1&5.2blog.html",
            "relUrl": "/2023/01/30/5.1&5.2blog.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "PT Grading",
            "content": "Performance Task Scoring 1 . Grading 1.1 . Reporting Category My Score College Board Score Comments . Program Purpose/ Function | 1 | 0 | The person did not distinguish between program purpose and functionality. The person only described functionality | . Data Abstraction | 1 | 1 | Includes two code segments, implements a list for a desired function | . Managing Complexity | 0 | 0 | The provided explanation did not support how the use of a list would manage the program’s complexity. The use of a list did not have any benefit or advantage to fixing errors in the code over something else such as a variable. | . Procedural Abstraction | 1 | 1 | A procedure, ratioCalculate was defined and called. Person also described how the procedure is used and relted to the overall function of the program. | . Algorithm Implementation | 1 | 1 | Program uses all three: sequencing,selection (if), and iteration (through a list) | . Testing | 1 | 1 | Program is tests and when functions are called they properly run. | . Grading 1.2 . Reporting Category My Score College Board Score Comments . Program Purpose/ Function | 1 | 1 | The person distinguishedbetween program purpose and functionality. Had a clear purpose and clear function. | . Data Abstraction | 1 | 1 | mplements three lists: startGrid, currentGrid and nextGrid. | . Managing Complexity | 1 | 1 | The provided explanationsupports how the use of a listwould manage the program&#39;s complexity by explaining how theuse of variables or other resources would be inefficient. The use of a list did have great benefit. | . Procedural Abstraction | 1 | 1 | A procedure, resetallwas defined and called. The function is used to simply reset the game. Also, newGen was defined which copiesinformation from the old generation to the new one. | . Algorithm Implementation | 1 | 1 | Program uses all three: sequencing, selection (if), and iteration (through a list) | . Testing | 1 | 1 | Program is tests and when functions arecalled they properly run. Clearly describe results in written report as well. | . Performance Task Scoring 2 . Grading 2.1 . Reporting Category My Score College Board Score Comments . Program Purpose/ Function | 0 | 0 | The person did not distinguish between program purpose and functionality. The person only described the function of the program. | . Data Abstraction | 0 | 0 | Includes two code segments, But the code segments are of two different lists. The second code segment should show how the first list is being implemented in the program to meet its purpose. | . Managing Complexity | 0 | 0 | Code segment not provided, explanation claims that using a list manages complexity but does not explain why. | . Procedural Abstraction | 1 | 0 | I thought the student got the point because the function, Evaluateguess has one parameter, &#39;guess&#39; but college board did not score it that way because the person did not explain how the code segment contrbuted to the overall purpose of the program | . Algorithm Implementation | 0 | 0 | Program uses all three: sequencing,selection (if), and iteration (through Evaluate list function), but criteria says to explain process in enough detail that somebody else could recreate it. The response was not very detailed | . Testing | 1 | 1 | Program is tests and when functions are called they properly run. Two different tests are run with dog and mouse, showing their appropriate outputs. | . Grading 2.2 . Reporting Category My Score College Board Score Comments . Program Purpose/ Function | 1 | 1 | Purpose, fucntionality, and input/output are stated. Video shows the program function properly and display the outputs predicted. | . Data Abstraction | 1 | 1 | nounList is used, and later called in the selectWord procedure. Response explains the purpose of this list for the overall program. | . Managing Complexity | 1 | 1 | Shows use of nounList. nounList is called in a later procedure, selctWord as a paramter. Person explained how the use of list enables &#39;efficient random selection&#39; and explains how without the list, multiple variables would have to be used and called, making the program inefficient. | . Procedural Abstraction | 1 | 1 | Procedure, createPoems is shown in response. Response explains how this procedure incorporates all previous user input to display the final poem. Then the person clearly explains the functionality of the procedure. | . Algorithm Implementation | 1 | 1 | Algorithm is within createPoems function, and includes all three: sequencing, iterations(while), and selection (if). The response describes how the algorithms and procedure works in detail that it can be recreated. | . Testing | 1 | 1 | Testing describes outputs of two calls, one including articles and one without including articles. Both successful outputs are portrayed according to their specific inputs. | . Grading 2.3 . Reporting Category My Score College Board Score Comments . Program Purpose/ Function | 1 | 0 | I thought the response described both the purpose and function, but it only describes the function of the program. The program runs successfully. | . Data Abstraction | 1 | 1 | Response included two code segments. The first one shows firstChracterList being defined. The second segment shows the list being used in the function findWinner. | . Managing Complexity | 1 | 1 | Shows how use of firstCharacterlist condenses the program. Allows simple iteration through the list rather than storage in 7 variables. | . Procedural Abstraction | 1 | 1 | Procedure findWinner with parameters character1 and character2 are shown. Procedure&#39;s function and purpose, to determine hypothetical winner, are clearly described. | . Algorithm Implementation | 1 | 1 | Algorithm is within findWinner function. It includes sequencing , selection(if) and interation (for). Response is explained in detailed manner, so much so that it can be recreated. | . Testing | 1 | 1 | Testing describes outputs of two calls, one between Vision and Bishop and the other between Carnage and Venom. First call displays a winner output, and the second one displays a tie output. COnditions for each call are clearly explained | . Grading 2.4 . Reporting Category My Score College Board Score Comments . Program Purpose/ Function | 1 | 1 | Program runs correctly. Input is user entered letters. Output are the letter appearing on the screen, color coordinated based on their correctness. The purpose is to test critical thinking skills and functionality was described in the response. | . Data Abstraction | 1 | 0 | List guesses is showed in first segment. I thought it was being used in the second code segment, but it&#39;s length was only being assessed, which apparently doesn&#39;t contribute to the program&#39;s overall function. | . Managing Complexity | 1 | 0 | Shows how use of guesses list condenses the program. I thought the list helped mangae complexity by deceasing the amount of variables needed, but the list only functions as a counter. | . Procedural Abstraction | 1 | 1 | Program isitcorrect with parameter checkanswer is shown. Explains when the procedure is needed, showing how it contributes to the program&#39;s overall functionality. | . Algorithm Implementation | 1 | 1 | Algorithm is within isitcorrect function. It includes sequencing , selection(if) and interation (for). Response is explained in detailed manner, so much so that it can be recreated. | . Testing | 0 | 0 | Testing response doesn&#39;t really test different outputs from the program, but rather tests the color of the blocks which are more of a condition. The conditions are what should be varied to give different outputs in the two calls. The video shows this completely but the response lacks it. | . Performance Task Scoring 3 . Grading 3.1 . Reporting Category My Score College Board Score Comments . Program Purpose/ Function | 1 | 1 | User Input is rock, paper, or scissors. The output is you win, you lose or draw. The functionality is described through relationship of inputs and purpose is used to make a decision. | . Data Abstraction | 0 | 0 | List RPS is shown, but data is not used in the second code segment. Overall contriution to purpose of program is not shown. | . Managing Complexity | 0 | 0 | Code segment provided, but explanation proves that there is another wayfor this to program to run without a list. does not explain how using RPS is managing complexity. | . Procedural Abstraction | 0 | 0 | rpsGame is passed with one parameter. How the function contributes to the overall program purpose is not explicitly stated. | . Algorithm Implementation | 1 | 1 | rpsGame has sequencing. selection, and iteration.Response describes how conditionals are used (if) | . Testing | 1 | 1 | Program is tests and when functions are called they properly run. Two different tests are run with input:paper/rock and input:rock/paper, showing their appropriate outputs, youwin and youlose. | . Grading 3.2 . Reporting Category My Score College Board Score Comments . Program Purpose/ Function | 1 | 1 | Purpose, fucntionality, and input/output are stated. Video shows the program function properly and display the outputs predicted. | . Data Abstraction | 1 | 1 | letOfGuessWord list is defined. Response identifies that list has each letter of word user will guess | . Managing Complexity | 1 | 1 | letOfGuessWord list is used to make it more efficient because otherwise 5 more variables would have to be made. | . Procedural Abstraction | 1 | 1 | | . Algorithm Implementation | 1 | 1 | Algorithm is within createPoems function, and includes all three: sequencing, iterations(while), and selection (if). The response describes how the algorithms is made in detail that it can be recreated. | . Testing | 1 | 1 | Testing describes outputs of two calls, with 1 and h in the word hello. The first call returns false and the second returns true. | . Grading 3.3 . Reporting Category My Score College Board Score Comments . Program Purpose/ Function | 1 | 1 | Purpose and functionality are stated clearly. Video shows user input. | . Data Abstraction | 0 | 0 | stateList is the list name. List is not used to store any data. | . Managing Complexity | 1 | 0 | Does not explain why using a list is the least complex method. I thought the explanation was detailed enough, but it was &#39;overly general&#39; accroding to college board. | . Procedural Abstraction | 0 | 0 | Procedure updateScreen has no parameter. Procedure is not shown being called. | . Algorithm Implementation | 0 | 0 | Does not include iteration. | . Testing | 0 | 0 | Two different conditions are not tested by the user. Results of each call are not specified. | . Grading 3.4 . Reporting Category My Score College Board Score Comments . Program Purpose/ Function | 1 | 1 | Program has clearly satated function, purpose, and input/output | . Data Abstraction | 1 | 1 | fishTypes list is set and accessed to represent type and number of fish caught. | . Managing Complexity | 1 | 1 | Explains how adding fish or changing the program requires minimum effort withh a list rather than having to create a whole new variable. | . Procedural Abstraction | 1 | 1 | clone movement has fie parameters and is called successfully. | . Algorithm Implementation | 1 | 1 | Includes sequencing, iteration, and selection | . Testing | 0 | 0 | Testing response doesn&#39;t really test different input from the program, but rather tests condtions like the game mode and amount of fish . The conditions are what should be varied to give different outputs in the two calls. | . Reflection 3 . Overall my scores were very similar to the college board scores. One major discrpancy is college board&#39;s standards when they ask for a specific explanation. For example, a procedure shoudl be explained so clearly that one could redo it. A lack of detail in the explanations can cause a loss of full points for any section. Also in testing, the program must be tested and must display two different corresponding inputs and outputs. I will ensure to take careful consideration of these things and especially pay attention to details when writing my own descriptions. .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2023/01/11/gradingpt.html",
            "relUrl": "/2023/01/11/gradingpt.html",
            "date": " • Jan 11, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "Note Template",
            "content": "Take some additional notes that you would like here for 3.12 and 3.13. We will be looking for additional notes from the presentation. . What are procedures? . Fill in the blanks please: . Procedure: a named group of programming instructions that may have parameters and return values. . Parameters: input values of a procedure . Arguments: specify the values of the parameters when a procedure is called . Modularity: Separating a program&#39;s functions into independent pieces or blocks . Procedural Abstraction: provides a name for a process that allows a procedure to be used only knowing WHAT it does, not HOW it does it . What are some other names for procedures?: Functions and methods . Why are procedures effective?: Convenient to change errors, ability to alter the result without actually changing the calls to the program . Additional Notes . procedures are functions | procedures simplify programs | procedures split tasks into individual components that need to be done | procedures have parameters (what the procedure is going to work on/convert/etc) | seperating program to procedures in order to simplify it is called modularity | . Challenge 1 below: Add the command that will call the procedure. . num = 7 def convert(num): if num &gt;= 1: convert(num // 2) # double slash : divide the first number by the second, rounds to the nearest integer print(num % 2, end = &#39;&#39;) # end = &#39;&#39; signifies what will come between each printed num # Driver Code convert(num) . 0111 . Challenge 2 below: Complete the Min and Max procedure in either JavaScript and Python using the instructions from the JavaScript page. (JavaScript will get you a extra 0.1) . findMax = function(numberA, numberB){ if (numberA&gt;numberB) { max = numberA; } else { max = numberB; } console.log(&quot;The max is &quot; + max); }; findMin = function(numberA, numberB){ if (numberA&lt;numberB) { min = numberA; } else { min = numberB; } console.log(&quot;The min is &quot; + min); }; findMax(2,3) findMin(6,10) . The max is 3 The min is 6 . Homework/Hacks: For the hw, you have two options, easy or hard. The easy hack is for a 2.7 + extra work for the full 3. The easy hack is simply creating your own procedure with your own creativity. Since there is a lot of leeway for this one, you must do additional work to get a 3. For the hard hack, below is the start to a character to binary convertor. This is just a template, but the goal is to translate &quot;APCSP&quot; into binary. You can delete the existing code if you want. The only contraint is that you must use a procedure. Doing this will get you a 3. . def convert(num): if num &gt;= 1: convert(num // 2) # double slash : divide the first number by the second, rounds to the nearest integer print(num % 2, end = &#39;&#39;) # end = &#39;&#39; signifies what will come between each printed num def wordtobin(word): word = str(word) list = [] for letter in word: list.append(letter) for item in list: index = list.index(item) new = ord(item) list[index] = new for i in list: z = list.index(i) new = convert(i) list[int(z)] = new word = input(&quot;What word would you like to convert to binary?&quot;) print(word, &quot; to binary is:&quot;) wordtobin(word) . APCSP to binary is: 0100000101010000010000110101001101010000 . word = &quot;APCSP&quot; conversion = &#39;-&#39;.join(format(ord(x), &#39;b&#39;) for x in word) print(word , &quot;to binary is:&quot; , conversion) . APCSP to binary is: 1000001-1010000-1000011-1010011-1010000 . The Ord Function . built in (don&#39;t have to import it) | It takes one character in input (unicode) and outputs decimal number | inverse of chr function | .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2023/01/03/notetemplate.html",
            "relUrl": "/2023/01/03/notetemplate.html",
            "date": " • Jan 3, 2023"
        }
        
    
  
    
        ,"post20": {
            "title": "Homework 3.17 - 3.18",
            "content": "3.17 Algorithmic Efficiency . Vocabulary . Problem: a general description of a task that can or cannot be solved algorithmically | Decision Problem: A problem with a yes or no answer | Organization Problem: a problem with a goal of finding the best answer Instance: a problem with a specific input | Efficiency: amount of computing needed to solve a problem | Polynomial Efficiency (Good): more work takes a proportional amount of time (1 job is +2 time) | Exponential Efficiency (Bad): more work takes an exponential amount more time (1 job is 2x time) | Heuristic Approach: When optimal solutions are inefficient, look for a possibly optimal solution that is more efficient | Decidable Problem: A decision problem that has a clear solution that will always make a correct output | Undecidable Problem: A decision problem with no solution that is not gaurenteed to produce the correct output | . Extra Notes . exponential efficiences take much longer than polynomial because the increase rapidly | Heruestic Approach: situation where the list of requirements that must me met with an ideal solution. Sometimes it is easier and less time consuming to reach a less ideal solution. Finding a solution that is &#39;close enough&#39; to be an acceptable output. | . Challenge . Try and fix this ineficcient code! Only change the code between the two commented lines. Fully programmed solution will improve your grade, at a minimum show that you tried. . import time numlist = [1,3,5,7,9,11,13,15,17,19] valuelist = [0,3,6,9,12,15,18,21] def isvalue(value,array): #-- exists = False while exists == False: for i in range(len(array)): if value == array[i]: exists = True else: return exists #-- starttime = time.time() for i in range(100000): for i in range(len(valuelist)): x = isvalue(valuelist[i],numlist) endtime = time.time() print(endtime-starttime,&#39;seconds&#39;) . 0.5466861724853516 seconds . 3.18 Undecidable Problems . Notes . A decidable problem will always have a definite answer | An undecidable problem will either have multiple answers or can not get to the answer in a set amount of time | there are problems that can not be solved by computers: ex when there are contradictory statements in the code | . Homework! . Make an algorithm that finds the fastest route that hits every location once starting and ending at Del Norte. Make sure to show your thinking. If you are strugling, try using a huristic approach. Remember, what matters more than having perfectly functioning code is that you tried your hardest. . dataset = { &#39;DelNorte&#39;:{ &#39;Westview&#39;:15, &#39;MtCarmel&#39;:20, &#39;Poway&#39;:35, &#39;RanchoBernardo&#39;:50 }, &#39;Westview&#39;:{ &#39;DelNorte&#39;:15, &#39;MtCarmel&#39;:35, &#39;Poway&#39;:25, &#39;RanchoBernardo&#39;: 45 }, &#39;MtCarmel&#39;:{ &#39;Westview&#39;:35, &#39;DelNorte&#39;:20, &#39;Poway&#39;:40, &#39;RanchoBernardo&#39;:30 }, &#39;Poway&#39;:{ &#39;Westview&#39;:25, &#39;MtCarmel&#39;:40, &#39;DelNorte&#39;:35, &#39;RanchoBernardo&#39;:15 }, &#39;RanchoBernardo&#39;:{ &#39;Westview&#39;:45, &#39;MtCarmel&#39;:30, &#39;Poway&#39;:15, &#39;DelNorte&#39;:50 } } . def getdistance(order): miles = 0 x = 0 y = 1 for i in range(3): current = x destination = y dist = dataset[order[current]][order[destination]] miles = miles + dist x += 1 y += 1 return miles from itertools import permutations min = 5000 for combo in list(permutations([&#39;Westview&#39;, &#39;Poway&#39;, &#39;RanchoBernardo&#39;, &#39;MtCarmel&#39;])): dist1 = dataset[&#39;DelNorte&#39;][combo[0]] dist2 = dataset[combo[3]][&#39;DelNorte&#39;] finaldist = getdistance(combo) + dist1 + dist2 if finaldist &lt; min: min = finaldist minpath = combo print(&#39;Shortest Distance = &#39;, min, &#39; miles&#39;) print(&#39;Del Norte&#39;) for i in minpath: print(i) print(&#39;Del Norte&#39;) . Shortest Distance = 105 miles Del Norte Westview Poway RanchoBernardo MtCarmel Del Norte .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/homework1718",
            "relUrl": "/homework1718",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Unit 3 Lesson 16, Student Copy",
            "content": "Hack #1 - Class Notes . Simulations are abstractions that mimic more complex objects or phenomena from the real world | Purpose: to draw inferences about things we cant obsevre | Variability and randomness in the world can be the reason behind bias in simulations | Ex: rolling dice, chemical reactions, molecular models, etc | . import random n = int(input(&quot;What is the range?&quot;)) random.randint(0,n) . 86 . def mycloset(): myclothes = [&#39;red shoes&#39;, &#39;green pants&#39;, &#39;tie&#39;, &#39;belt&#39;] x = random.choice(myclothes) myclothes.remove(x) print(myclothes) mycloset() . [&#39;green pants&#39;, &#39;tie&#39;, &#39;belt&#39;] . Hack #2 - Functions Classwork . import random def coinflip(): #def function randomflip = random.randint(0, 2) #picks either 0 or 1 randomly (50/50 chance of either) if randomflip == 0: #assigning 0 to be heads--&gt; if 0 is chosen then it will print, &quot;Heads&quot; print(&quot;Heads&quot;) elif randomflip == 1: #assigning 0 to be heads--&gt; if 0 is chosen then it will print, &quot;Heads&quot; print(&quot;Heads&quot;) else: if randomflip == 2: #assigning 1 to be tails--&gt; if 1 is chosen then it will print, &quot;Tails&quot; print(&quot;Tails&quot;) #Tossing the coin 5 times: t1 = coinflip() t2 = coinflip() t3 = coinflip() # Created coin flip in another way using lists def coinfliplist(): list = [&#39;Heads&#39;, &#39;Tails&#39;, &#39;Heads&#39;] choice = random.choice(list) if choice == &#39;Heads&#39;: print(&#39;Heads&#39;) else: print(&#39;Tails&#39;) print(&#39; &#39;) print(&#39; &#39;) coinfliplist() coinfliplist() coinfliplist() . Tails Heads Tails Tails Heads Heads . Hack #3 - Binary Simulation Problem . import random def randomnum(): # function for generating random int y = random.randint(0,255) print(y) return int(y) def convert(num): return bin(num).replace(&quot;0b&quot;, &quot;&quot;) def survivors(y): # function to assign position survivorstatus = [&quot;Jiya&quot;, &quot;Shruthi&quot;, &quot;Noor&quot;, &quot;Ananya&quot; , &quot;Peter Parker&quot;, &quot;Andrew Garfield&quot;, &quot;Tom Holland&quot;, &quot;Tobey Maguire&quot;] # replace the names above with your choice of people in the house list = [] list = [*y] dict = {} for key in survivorstatus: for value in list: dict[key] = value list.remove(value) print(dict) # if (list[i] == 0): # print(survivorstatus[i] + &quot;is a zombie&quot;) # else: # print(survivorstatus[i] + &quot;is a survivor&quot;) x = randomnum() y = convert(x) survivors(y) . 245 {&#39;Jiya&#39;: &#39;0&#39;, &#39;Shruthi&#39;: &#39;1&#39;, &#39;Noor&#39;: &#39;1&#39;, &#39;Ananya&#39;: &#39;1&#39;} . word = &quot;Hello&quot; list = [] list = [*word] print(list) . [&#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;] . Hack #4 - Thinking through a problem . create your own simulation involving a dice roll | should include randomization and a function for rolling + multiple trials | . import random # Two in a row game def rolldice(): x = random.randint(1,6) return(x) def points(): points = 0 list = [] y = rolldice() z = y list.append(y) y = rolldice() print(&quot;You rolled:&quot;, z, &quot; and &quot;, y) if z == y: print(&quot;You got two in a row, you get one point&quot;) points = points + 1 points() . You rolled: 6 and 6 You got two in a row, you get one point . Hack 5 - Applying your knowledge to situation based problems . Using the questions bank below, create a quiz that presents the user a random question and calculates the user&#39;s score. You can use the template below or make your own. Making your own using a loop can give you extra points. . A researcher gathers data about the effect of Advanced Placement®︎ classes on students&#39; success in college and career, and develops a simulation to show how a sequence of AP classes affect a hypothetical student&#39;s pathway.Several school administrators are concerned that the simulation contains bias favoring high-income students, however. answer options: The simulation is an abstraction and therefore cannot contain any bias | The simulation may accidentally contain bias due to the exclusion of details. | If the simulation is found to contain bias, then it is not possible to remove the bias from the simulation. | The only way for the simulation to be biased is if the researcher intentionally used data that favored their desired output. | | . | Jack is trying to plan his financial future using an online tool. The tool starts off by asking him to input details about his current finances and career. It then lets him choose different future scenarios, such as having children. For each scenario chosen, the tool does some calculations and outputs his projected savings at the ages of 35, 45, and 55.Would that be considered a simulation and why? answer options No, it&#39;s not a simulation because it does not include a visualization of the results. | No, it&#39;s not a simulation because it does not include all the details of his life history and the future financial environment. | Yes, it&#39;s a simulation because it runs on a computer and includes both user input and computed output. | Yes, it&#39;s a simulation because it is an abstraction of a real world scenario that enables the drawing of inferences. | | . | Sylvia is an industrial engineer working for a sporting goods company. She is developing a baseball bat that can hit balls with higher accuracy and asks their software engineering team to develop a simulation to verify the design.Which of the following details is most important to include in this simulation? answer options Realistic sound effects based on the material of the baseball bat and the velocity of the hit | A depiction of an audience in the stands with lifelike behavior in response to hit accuracy | Accurate accounting for the effects of wind conditions on the movement of the ball | A baseball field that is textured to differentiate between the grass and the dirt | | . | Ashlynn is an industrial engineer who is trying to design a safer parachute. She creates a computer simulation of the parachute opening at different heights and in different environmental conditions.What are advantages of running the simulation versus an actual experiment? answer options The simulation will not contain any bias that favors one body type over another, while an experiment will be biased. | The simulation can be run more safely than an actual experiment | The simulation will accurately predict the parachute&#39;s safety level, while an experiment may be inaccurate due to faulty experimental design. | The simulation can test the parachute design in a wide range of environmental conditions that may be difficult to reliably reproduce in an experiment. | | this question has 2 correct answers | . | YOUR OWN QUESTION; can be situational, pseudo code based, or vocab/concept based | YOUR OWN QUESTION; can be situational, pseudo code based, or vocab/concept based | questions = 6 correct = 0 qa = { &quot;A researcher gathers data about the effect of Advanced Placement classes on students&#39; success in college and career, and develops a simulation to show how a sequence of AP classes affect a hypothetical student&#39;s pathway.Several school administrators are concerned that the simulation contains bias favoring high-income students, however. a) The simulation is an abstraction and therefore cannot contain any bias b) The simulation may accidentally contain bias due to the exclusion of details c) If the simulation is found to contain bias, then it is not possible to remove the bias from the simulation d) The only way for the simulation to be biased is if the researcher intentionally used data that favored their desired output&quot;: &quot;b&quot;, &quot;Jack is trying to plan his financial future using an online tool. The tool starts off by asking him to input details about his current finances and career. It then lets him choose different future scenarios, such as having children. For each scenario chosen, the tool does some calculations and outputs his projected savings at the ages of 35, 45, and 55.Would that be considered a simulation and why? a) No, it&#39;s not a simulation because it does not include a visualization of the results. b) No, it&#39;s not a simulation because it does not include all the details of his life history and the future financial environment c) Yes, it&#39;s a simulation because it runs on a computer and includes both user input and computed output. d) Yes, it&#39;s a simulation because it is an abstraction of a real world scenario that enables the drawing of inferences.&quot;: &quot;c&quot;, &quot;Sylvia is an industrial engineer working for a sporting goods company. She is developing a baseball bat that can hit balls with higher accuracy and asks their software engineering team to develop a simulation to verify the design.Which of the following details is most important to include in this simulation? a) Realistic sound effects based on the material of the baseball bat and the velocity of the hit b) A depiction of an audience in the stands with lifelike behavior in response to hit accuracy c) Accurate accounting for the effects of wind conditions on the movement of the ball d) A baseball field that is textured to differentiate between the grass and the dirt&quot;: &quot;c&quot;, &quot;Ashlynn is an industrial engineer who is trying to design a safer parachute. She creates a computer simulation of the parachute opening at different heights and in different environmental conditions.What are advantages of running the simulation versus an actual experiment? a) The simulation will not contain any bias that favors one body type over another, while an experiment will be biased b) The simulation can be run more safely than an actual experiment c) The simulation will accurately predict the parachute&#39;s safety level, while an experiment may be inaccurate due to faulty experimental design d) The simulation can&#39;t test the parachute design in a wide range of environmental conditions that may be difficult to reliably reproduce in an experiment&quot;: &quot;b&quot;, &quot;True or False: Simulations can be biased, a) True b) False&quot;: &quot;a&quot;, &quot;True or False: Simulations are abstractions that mimic more complex objects or phenomena from the real world, a) True b) False&quot;: &quot;a&quot;, } def prompt(q, a): answer = input(q + &#39; : choose from the following answer choices&#39;) if answer == a: print(&#39;correct!&#39;) return 1 else: print(&#39;incorrect!&#39;) return 0 for i in qa: y = prompt(i, qa[i]) correct = correct + y percent = 100* correct/questions print(&#39;You got &#39;, str(correct), &#39; out of &#39;, str(questions)) print(&#39;That is&#39; ,percent, &#39;%&#39;) if percent &lt; 50: print(&#39;You failed!&#39;) else: print(&#39;You passed&#39;) . correct! correct! correct! correct! correct! incorrect! You got 5 out of 6 That is 83.33333333333333 % You passed . Hack #6 / Challenge - Taking real life problems and implementing them into code . Create your own simulation based on your experiences/knowledge! Be creative! Think about instances in your own life, science, puzzles that can be made into simulations . Some ideas to get your brain running: A simulation that breeds two plants and tells you phenotypes of offspring, an adventure simulation... . import random money = 0 slot = [1, 2, 3, 4, 5, 6, 7, 8, 9] choice = [] mlist = [] def check(): money = 0 for i in range (3): x = random.choice(slot) choice.append(x) print(&#39;Slot:&#39; , choice) if choice[0] == choice[1]: money = money + 5 print(&#39;+5k&#39;) elif choice[0] == choice[2]: money = money + 5 print(&#39;+5k&#39;) elif choice[1] == choice[2]: money = money + 5 print(&#39;+5k&#39;) else: money = money - 5 print(&#39;-5k&#39;) mlist.append(money) return money rep = int(input(&quot;How many times would you like to run the slot machine? Remember, no repeats means you pay 5k. Repeats mean you gain 5k.&quot;)) total = 0 for i in range(rep): check() choice.clear() for i in mlist: total = total + i print(&#39;&#39;) print(&#39;Your total money: $&#39;, total, &#39;k&#39;) if total &lt; 0: print(&#39;You are in debt, maybe the slot machine isnt for you&#39;) elif total == 0: print(&quot;No loss, no gain. Try your luck again?&quot;) else: print(&#39;Hey, way to go! Youre pretty lucky today, go and buy a lottery ticket&#39;) . Slot: [9, 8, 2] -5k Slot: [2, 2, 6] +5k Slot: [7, 1, 5] -5k Slot: [8, 1, 7] -5k Your total money: $ -10 k You are in debt, maybe the slot machine isnt for you .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2022/12/12/hw.html",
            "relUrl": "/2022/12/12/hw.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Title",
            "content": "- toc: true - badges: true - comments: true .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2022/12/09/hw9to11.html",
            "relUrl": "/2022/12/09/hw9to11.html",
            "date": " • Dec 9, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Running Vocabulary List",
            "content": "Unit 2 Binary/Data Terms . Bits: A binary digit. Smallest unit of data a computer can process ( 1 or 0 ; true or false) Bytes: Unit of data that is 8 bits long | Hexadecimal: Numbering system with base 16 (1-9 and then A-F) | Nibbles: four bits (half of a byte) | Binary Numbers: numbering scheme where each digit must be 0 or 1. Powers of 2 | Unsigned Integer: 32-bit and encodes non negative integers | Signed Integer: 32-bit includes negative integers | Floating Point: Number with a decimal point | Binary Data Abstractions: Using Binary (true or false) to sort through data and remove elements that aren&#39;t relevant | Boolean: Binary variable, True or false | ASCII: character encoding format for data that is text | Unicode: ANother character encoding format for text data: &quot;Hello&quot; is written U+0048 U+0065 U+006C U+006C U+006F | RGB: stands for red green blue. HEX is converted shorthand for RGB values | Data Compression: compressing data to use fewer bits | Lossy: Compresses a file and permanently eliminates information | Lossless (not discussed yet): Every bit of original data remains if file is uncompressed | . Unit 3 Algorithm/Programming Terms . a = &#39;hello&#39; # String Data Type b = True # Boolean Data Type c = 5 # Integer Data Type d = 4.33 # Float Data Type print(a) print(b) print(c) print(d) . hello True 5 4.33 . list1_d = [3, 4, 2, 1, 5, 6, 7] list2_d = [[2,3,6,5,], [3, 5, 6, 2], [4, 5, 2, 5]] dict = { &#39;key1&#39; : 1, &#39;key2&#39; : 2, &#39;key3&#39; : 3 } . #Python If, Elif, Else conditionals; # Python Def procedures, Parameters, Return Values list1_d = [3,4,2,1,5,6,7] def addnum(num): #algorithm, Python Def procedures, Parameters for i in list1_d: #Iteration if num &gt; i: #If list1_d.append(num) print(list1_d) break elif num &lt; i: #elif list1_d.pop(0) print(list1_d) else: # else break addnum(2) addnum(12) . [4, 2, 1, 5, 6, 7] [4, 2, 1, 5, 6, 7, 12] . i = 0 while i &lt; len(list1_d): # Iterating through while loops print(list1_d[i]) i = i + 1 . 4 2 1 5 6 7 12 . . a = &quot;Python is &quot; b = &quot;fun&quot; c = a + b print(c) . Python is fun . num = -89 if num &gt;= 0: if num == 0: print(&quot;Zero&quot;) else: print(&quot;Positive &quot;) else: print(&quot;Negative&quot;) . Negative . num = 5 for number in range(num): if number%2 == 0: print(number, &quot;is divisible by 2.&quot;) else: print(number, &quot;is not divisible by 2.&quot;) . 0 is divisible by 2. 1 is not divisible by 2. 2 is divisible by 2. 3 is not divisible by 2. 4 is divisible by 2. . 3.1 and 3.2 : Variables and Data Abstraction . Defining Variables in Python: Type the variable name (no spaces) and use = to assign a value to it | Mathematical Expressions : variable defined using a numerical value . That variable can be used in expressions in the place of a regular number | Functions on Lists : append function adds elements to list | Data Abstraction: the storage of data in abstract variables | Dictionaries : Dictionary can be defined using curly brackets | Interchanging Variables : you can interchange variables by setting them equal to each other with a temporary variable | Floats: used in the same was as int types, are decimals | . 3.3 and 3.4: Mathematical Expressions and Strings . Algorithm: a set of instructions that tells a program what to do | Concatenation: combining strings. In python use + or , between strings to concatenate | . 3.5 and 3.6 Booleans and Logical Operators . Logical operators: and, or, not. These operators compare values | Boolean: Return True or False. Return only one of two values similar to binary | . 3.7 Nested Conditional Statements . Conditional: code proceeds if condition written is met: ex if/else statements Nested conditionals: conditionals within conditionals . 3.8, 3.10 (our presentation, see group fastpages for vocab) . 3.11 Search: . Sequential Search: search method that iterates through each index of a series of data (inefficient compared to binary) . | Binary Search: search method starts at median of the data, compares to the target value and ignores part of the list that doesn&#39;t have the target. The numbers must be in numerical order for this method, this method works fast . | . 3.12 Calling Procedures: . Procedure: defined programming instructions. Can have paramters and they return a value. Often called a function . | Parameters: Inputs of a procedure. . | Arguments: specify the values of the parameters when a procedure is called . | . 3.13 Developing Procedures: . Modularity: organizing the procedures in a program into seperate block based on what task they achieve . | Procedural Abstraction: naming a process , defining a function by name by what it does . | . 3.14 Libraries: . Library: are imported through packages, contain many prewritten procedure . | Packages: collections of methods which come from libraries libraries . | Documentation: written explanation of what a procedure/code does. Pseudo code but in words . | . def multiply(x, y): z = x*y return z multiply(6, 4) . 24 . 3.15 Random Values . Random Values : a number generated using a large set of numbers and a mathematical algorithm which gives equal probability to all number occuring | . import random random_number = random.randint(1,100) print(random_number) . 32 . 3.16 Simulations . Simulations: Simulations are abstractions that mimic more complex objects or phenomena from the real world to draw inferences about things we cant observe . Variability and randomness in the world can be the reason behind bias in simulations | . 3.17 + 3.18 Algorithmic Efficiency and Undecidable Problems . A decidable problem will always have a definite answer | An undecidable problem will either have multiple answers or can not get to the answer in a set amount of time | Problem: a general description of a task that can or cannot be solved algorithmically | Decision Problem: A problem with a yes or no answer | Organization Problem: a problem with a goal of finding the best answer | Instance: a problem with a specific input | Efficiency: amount of computing needed to solve a problem | Polynomial Efficiency (Good): more work takes a proportional amount of time (1 job is +2 time) | Exponential Efficiency (Bad): more work takes an exponential amount more time (1 job is 2x time) | Heuristic Approach: When optimal solutions are inefficient, look for a possibly optimal solution that is more efficient | Decidable Problem: A decision problem that has a clear solution that will always make a correct output | Undecidable Problem: A decision problem with no solution that is not gaurenteed to produce the correct output | .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/notebooks/vocab",
            "relUrl": "/notebooks/vocab",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Unit 3.15 Random Values",
            "content": "Purpose/Objectives: Teach student how to implement randomness into their code to make their code simulate real life situations. . In this lesson students will learn: . How to import random to python | How to use random with a list or number range | How to code randomness in everyday scenarios | . ADD YOUR ADDITIONAL NOTES HERE: . What are Random Values? . Random Values are a number generated using a large set of numbers and a mathematical algorithm which gives equal probability to all number occuring . Each Result from randomization is equally likely to occur Using random number generation in a program means each execution may produce a different result . What are Examples of Random outputs in the world? Add a few you can think of. . Ex: Marbles | . Why do we need Random Values for code? . Random values can be used in coding: . import random random_number = random.randint(1,100) print(random_number) . 49 . def randomlist(): list = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;blueberry&quot;] element = random.choice(list) print(element) randomlist() . blueberry . Real Life Examples: Dice Roll . import random for i in range(3): roll = random.randint(1,6) print(&quot;Roll &quot; + str(i + 1) + &quot;:&quot; + str(roll)) . Roll 1:1 Roll 2:5 Roll 3:5 . Challenge #1 . Write a function that will a simulate a coinflip and print the output . import random def coinflip(): list = [&#39;Heads&#39;, &#39;Tails&#39;] x = random.choice(list) print(x) coinflip() coinflip() . Heads Tails . Royal Flush (Extra) . EXTRA: Create a function that will randomly select 5 playing Cards and check if the 5 cards are a Royal Flush . import random suits = [&#39;Spades&#39;, &#39;Diamonds&#39;, &#39;Clubs&#39;, &#39;Hearts&#39;] cards = [&#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;,&#39;9&#39;, &#39;J&#39;, &#39;Q&#39;, &#39;K&#39;, &#39;A&#39;] royals = [&#39;J&#39;, &#39;Q&#39;, &#39;K&#39;, &#39;A&#39;] group = [] for i in range(4): i = random.randint(0,3) j = random.randint(0,10) x = (cards[j], &#39;of &#39; + suits[i]) group.append(x) random.shuffle(group) count = 0 for x, y in group: if x in royals: count = count + 1 else: count = count if count == 5: print(&#39;Royal flush!&#39;) else: print(&quot;No royal flush, better luck next time&quot;) print(group) . No royal flush, better luck next time [(&#39;9&#39;, &#39;of Spades&#39;), (&#39;Q&#39;, &#39;of Diamonds&#39;), (&#39;8&#39;, &#39;of Diamonds&#39;), (&#39;5&#39;, &#39;of Hearts&#39;)] . Homework (and hexa decimal extra1) . Given a random decimal number convert it into binary as Extra convert it to hexidecimal as well. . import random num = random.randint(1,100) def convert(num): if num &gt;= 1: convert(num // 2) print(num % 2, end = &#39;&#39;) print(&quot;Binary of num &quot; + str(num) + &quot; is:&quot;, end=&quot; &quot;) convert(num) . Binary of num 93 is: 01011101 . import math import random num = random.randint(1,100) def DecimalToBinary(num): strs = &quot;&quot; while num: # if (num &amp; 1) = 1 if (num &amp; 1): strs += &quot;1&quot; # if (num &amp; 1) = 0 else: strs += &quot;0&quot; # right shift by 1 num &gt;&gt;= 1 return strs[::-1] def dectohex(N): hexlist = [] while N &gt; 0: hex = N %16 N = N // 16 if hex &lt; 10: hexlist.append(hex) elif hex == 10: hexlist.append(&#39;A&#39;) elif hex == 11: hexlist.append(&#39;B&#39;) elif hex == 12: hexlist.append(&#39;C&#39;) elif hex == 13: hexlist.append(&#39;D&#39;) elif hex == 14: hexlist.append(&#39;E&#39;) elif hex == 15: hexlist.append(&#39;F&#39;) print(hexlist) print(num , &quot; in hexadecimal is: &quot;) bin = int(DecimalToBinary(num)) dectohex(bin) . 84 in hexadecimal is: [4, &#39;B&#39;, 9, 6, &#39;F&#39;] . Unit 3.14 Libraries Lesson . Here is our lesson about libraries! . Purpose: Help students streamline and make their coding experience easier through built in packages and methods from a library Objective: By the end of the lesson, students should be able to fluently use methods from the turtle and math packages, and be able to look up documentation for any python package and us it. . fill in the blanks! . Libraries . Okay, so we&#39;ve learned a lot of code, and all of you now can boast that you can code at least some basic programs in python. But, what about more advanced stuff? What if there&#39;s a more advanced program you don&#39;t know how to make? Do you need to make it yourself? Well, not always. . You&#39;ve already learned about functions that you can write to reuse in your code in previous lessons. But,there are many others who code in python just like you. So why would you do again what someone has already done, and is available for any python user? . Packages allow a python user to import methods from a library, and use the methods in their code. Most package come with documentation on the different methods they entail and how to use them, and they can be found with a quick google search. methods are used with the following: . Note: a method from a package can only be used after the import statement. . Some methods are always installed, such as those with the list methods which we have previously discussed. But others require a special python keyword called import. We will learn different ways to import in Challenge 1. . Sometimes we only need to import a single method from the package. We can do that with the word &quot;from&quot;, followed by the package name, then the word &quot;import&quot;, then the method. This will alllow you to use the method without mentioning the package&#39;s name, unlike what we did before, however other methods from that package cannot be used. To get the best of both worlds you can use &quot;*&quot;. . To import a method as an easier name, just do what we did first, add the word &quot;as&quot;, and write the name you would like to use that package as. . Challenge 1: Basic Libraries . Find a python package on the internet and import it | Choose a method from the package and import only the method | import the package as a more convenient name. | Extra Notes . libraries need to be installed or imported before being used | Packages allow user to import methos from a library | Libraries come with documentation (like a guide to their syntax) | . import random as rd print(rd.randint(1,5)) from random import randint randint(1,5) from random import randint as ri ri(1,5) from random import * print(randint(1,5)) . 3 2 . Challenge 2: Turtle . Turtle is a python __ library which allows you to draw all kinds of different shapes. It&#39;s ofter used to teach beginning python learners, but is really cool to use anywhere. Turtle employs a __ __ to display what you&#39;ve done, but unfortunately it&#39;s kind of annoying to make work with vscode. Use: repl.it Click &quot;+ Create&quot;, and for language, select &quot;Python (with Turtle)&quot; Documentation Task: Have fun with turtle! Create something that uses at least 2 lines of different lengths and 2 turns with different angles, and changes at least one setting about either the pen or canvas. Also use one command that isn&#39;t mentioned on the table below(there are a lot). Paste a screenshot of the code and the drawing from repl.it . Commands . forward(pixels) | . right(degrees) | . left(degrees) | . setpos(x,y) | . speed(speed) | . pensize(size) | . pencolor(color) | . Note: Color should be within quotes, like &quot;brown&quot;, or &quot;red&quot; . from turtle import * oogway = Turtle() import turtle turtle.bgcolor(&#39;light blue&#39;) turtle.speed(2) for i in range(20): turtle.circle(3*i) turtle.circle(-3*i) turtle.left(i) . Challenge 3: Math . The math package allows for some really cool mathematical methods! . methods Action . ceil(x) | _input decimal number, returns the next highest integer__ | . floor(x)_ | rounds to largest intefer less than or equal to x | . factorial(x) | returns the factorial_ | . gcd(x,y)_ | returns the greatest common denominator of x and y, cant be decimals | . lcm(x,y) | returns least common multiple | . Challenge: Create a program which asks for a user input of two numbers, and returns the following: . each number rounded up | each number rounded down | the lcm of the rounded down numbers | the gcf of the rounded up numbers | the factorial of each number | something else using the math package! Documentation | . from math import * x = input(&quot;Insert your first number:&quot;) y = input(&quot;Insert your second number:&quot;) xfloat = floor(float(x)) yfloat = floor(float(y)) xceil = ceil(float(x)) yceil = ceil(float(y)) gcdv = gcd(xfloat, yfloat) xfac = factorial(xfloat) yfac = factorial(yfloat) print(&#39;Each number rounded down:&#39;, xfloat ,&quot; and &quot;, yfloat) print(&#39;Each number rounded up:&#39;, xceil ,&quot; and &quot;, yceil) print(&#39;GCD:&#39;, gcdv) print(&#39;Each numbers factorial :&#39;, xfac ,&quot; and &quot;, yfac) . Each number rounded down: 2 and 7 Each number rounded up: 3 and 8 GCD: 1 Each numbers factorial : 2 and 5040 . Homework: Putting it all together(complete only after the random values lesson) . Option 1: Create a python program which generates a random number between 1 and 10, and use turtle to draw a regular polygon with that many sides. As a hint, remember that the total sum of all the angles in a polygon is (the number of sides - 2) * 180. Note: a regular polygon has all sides and angles the same size. Paste a screenshot of the code and the drawing from repl.it . Option 2: use the &quot;datetime&quot; package, and looking up documentation, create a program to generate 2 random dates and find the number of days between . Extra ideas: customize the settings, draw a picture, or something else! . import turtle import random turtle.bgcolor(&#39;light blue&#39;) x = random.randint(3,10) print(x) length = 15 for i in range(x): turtle.forward(length) turtle.right(360/x) turtle.forward(length) .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/week-13/big-idea-3/2022/12/01/StudentCopyRandomValues.html",
            "relUrl": "/week-13/big-idea-3/2022/12/01/StudentCopyRandomValues.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Homework Lessons 5,6,7",
            "content": "Homework/Hacks . our homework we have decided for a decimal number to binary converter. You must use conditional statements within your code and have a input box for where the decimal number will go. This will give you a 2.7 out of 3 and you may add anything else to the code to get above a 2.7. . Below is an example of decimal number to binary converter which you can use as a starting template. . num = int(input(&quot;Enter a decimal number to be converted into binary.&quot;)) def convert(num): if num &gt;= 1: convert(num // 2) # double slash : divide the first number by the second, rounds to the nearest integer print(num % 2, end = &#39;&#39;) # end = &#39;&#39; signifies what will come between each printed num # Driver Code print(&quot;Binary of num &quot; + str(num) + &quot; is:&quot;, end=&quot; &quot;) convert(num) . Binary of num 45 is: 0101101 . print(&quot;True:&quot;,4 == 4) print(&quot;True:&quot;,1 &gt; 0) print(&quot;False:&quot;,7 &lt; 3) print(&quot;True:&quot;,5 &lt; 6) print(&quot;False:&quot;,7 &gt; 8) print(&quot;True:&quot;,3 == 3) print(&#39;&#39;) # Same as above, but now for other values other than int print(&#39;True:&#39;,&quot;as&quot; == &quot;as&quot;) print(&quot;False:&quot;,True == False) print(&quot;False:&quot;,[2,3,1] != [2,3,1]) print(&quot;True:&quot;,&#39;af&#39; &lt; &#39;bc&#39;) print(&quot;False:&quot;,&#39;ce&#39; &gt; &#39;cf&#39;) print(&quot;True:&quot;,[1,&#39;b&#39;] &gt; [1,&#39;a&#39;]) print(&#39;&#39;) . True: True True: True False: False True: True False: False True: True True: True False: False False: False True: True False: False True: True . print(&quot;True:&quot;, True != False) print(&quot;False:&quot;, True &lt; False) print(&quot;True:&quot;, True == True) print(&quot;False:&quot;, False &gt; True) print(&quot;False:&quot;, True == False) print(&quot;True:&quot;, False != True) . True: True False: False True: True False: False False: False True: True . Age = int(input(&quot;What is your age?&quot;)) print(&quot;You are &quot; + str(Age) + &quot; years old.&quot;) if (Age &lt; 10): print(&quot;You are very young&quot;) else: print(&quot;You&#39;re in the double digits!&quot;) if (Age &gt; 50): print(&quot;You&#39;re pretty old&quot;) else: print(&quot;You&#39;re still in your young years&quot;) # ignore this comment . You are 32 years old. You&#39;re in the double digits! You&#39;re still in your young years . 5: Boolean Expressions . Booleans are like binary, 2 possible values: True, False | Regional Operator: Works between two values that are the same type. ==, !=, &gt; , &lt; ,&gt;=, &lt;= | Logical Operator: operators produce one boolean result (True/False) | . 6: Conditionals . Algorithms: set of instructions to accomplish a task | Selection: process that determines which parts of an algorithm should be run based on a condition | Conditional is a statement that determines the flow of a program | If statements for example | . 7: Nested Conditionals . conditional statements within conditional statements | If/else within if/else (see below for example) | . IF (condition ): &lt;execute A&gt; ELSE IF (condition ): &lt;execute B&gt; ELSE: &lt;Execute C&gt; . num = -89 if num &gt;= 0: if num == 0: print(&quot;Zero&quot;) else: print(&quot;Positive &quot;) else: print(&quot;Negative&quot;) . Negative . temp = 95 if (temp &gt;= 90): print(&quot;it is too hot outside&quot;) if (temp &gt;= 65): print(&quot;i will go outside&quot;) if (temp &lt; 65): print(&quot;it is too cold outside&quot;) .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/week%2013/2022/11/30/homework567.html",
            "relUrl": "/week%2013/2022/11/30/homework567.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Searching Introduction",
            "content": "What is searching? . In certain computer programs and applications, one might find the need to locate and retrieve a data value and/or it&#39;s index. Searching algorithms could be done in either intervals or sequences, and certain algorithms could be more efficient than others, with benefits and drawbacks to each. . The Naive Approach . The most intuitively obvious solution to the searching problem is to sequentialy check each successful value in the data structure until either a matching value is found, or the entire structure has been transversed. This thought process could be explained graphically in this example . This algorithm could also be expressed in code, as shown below. . def sequentialSearch(arr, target): N = len(arr) # Declare N as length of array for i in range(N): # Iterate over the list if arr[i] == target: # Check for match return i # Match found, return index and end function call return -1 # Element not found . Sequential Search - Larger Inputs . Although for selection sort is seemingly fast for smaller inputs, it is clear that it cannot keep up with increasing input sizes. Because sequential search checks every value of the given array, the algorithm&#39;s overall runtime increases &quot;linearly&quot; with the input size. . i.e. Pretend that one check takes one second, and that we are searching for the last element in an array. If the array length is 4, it would take 4 seconds to find the last element, whereas if the array length is 86400 indices long, it would take a whole day to find the element. . Hence, although selection sort is known for its simplicity, it is unfeasible for large inputs . Below, we have created three sorted lists of length 100,1000000,100000000. . import time arr1 = [i for i in range(100)] arr2 = [i for i in range(1000000)] arr3 = [i for i in range(100000000)] . To analyze the sequential search algorithm, we will check for the worst case scenario, where runtime is maximized. This is because when measuring the efficiency of our algorithm, we want to be able to guarantee an upper limit or set amount of time for our program to finish running. To do this, we will attempt to search for the last element in the array . print(&quot;length of list: &quot;, len(arr1)) s = time.time() print(&quot;Index: &quot;, sequentialSearch(arr1,99)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 100 Index: 99 Execution time: 0.05602836608886719 ms . print(&quot;length of list: &quot;, len(arr2)) s = time.time() print(&quot;Index: &quot;, sequentialSearch(arr2,999999)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 1000000 Index: 999999 Execution time: 58.67457389831543 ms . print(&quot;length of list: &quot;, len(arr3)) s = time.time() print(&quot;Index: &quot;, sequentialSearch(arr3,99999999)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 100000000 Index: 99999999 Execution time: 5162.384986877441 ms . As you can see, as the input list grows larger and larger, the overall runtime of the program increases linearly as well, resulting in a lower scalability for the sequential search algorithm. . Binary Search . Binary search is an efficient way to iterate through a SORTED list to find a requested value. This is done through checking the middle value of a list and checking if the requested value is greater than or less than the middle value. You can start to see why the requested list must be sorted. If the list is not sorted, this logic is flawed, and the binary search algorithm will no longer work. . Unlike the sequential search method, binary search doesn&#39;t check for each successive element until a match is found. In every iteration the algorithm is making a binary decision; if the selected element is larger or smaller than the target. . How exactly does this work? Lets look at these amazing ms paint drawings: . i was too lazy to make a third so ur gonna have to live with 2 :) . This algorithm is extremely efficient as the maximum number of cycles in binary search is equal to log base 2 of the closest, next power of two, to length of list. . If the array is 8 items long, the maximum possible cycles would be 3 (log base 2 of 8 is 3) . If the array is 7 items long, the maximum possible cycles would STILL be 3 as the next power of 2 to 7 is 8. . If the array is 9 items long, the maximum possible cycles INCREASES to 4, as the next power of two, is 16. . def binarySearch(array, target): # Parameters: array is the given array and target is what we are looking for low = 0 # the starting lower bound high = len(array)-1 # the starting upper bound while high &gt;= low: # we will keep running until we run out of possible subarrays... mid = (high + low) // 2 # define the middle of the list to be the item at the index of the average of the lower and upper bound if array[mid] == target: # if item is in the middle of the list... we found what we are looking for! return mid # therefore, we return the index of where we found the item. elif array[mid] &gt; target: # if item is less than the middle of the list, this must mean that the item is on the lower half of the list high = mid-1 # therefore, we set the upper bound of the search to be the last item of the lower half else: # if item is neither less than or equal to the middle of the list, this must mean that the item is on the upper half of the list low = mid+1 # therefore, we set the lower bound of the search to be the first item of the upper half # if nothing is returned by the time the while loop ends, that means item MUST be missing from list return False # therefore we tell the user that the requested item was not found . Likewise, we can also take a recursive approach to this problem, note the similarities . def BinarySearchRecursion(arr, target, lo, hi): if lo &gt; hi: return False mid = (lo+hi)//2 if arr[mid] == target: return mid elif arr[mid] &gt; target: return BinarySearchRecursion(arr, target, lo, mid-1) elif arr[mid] &lt; target: return BinarySearchRecursion(arr, target, mid+1, hi) . Now, let&#39;s compare the runtime with the same lists we tried with the sequential search algorithm. . print(&quot;length of list: &quot;, len(arr1)) s = time.time() print(&quot;Index: &quot;, binarySearch(arr1,99)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 100 Index: 99 Execution time: 0.05507469177246094 ms . print(&quot;length of list: &quot;, len(arr2)) s = time.time() print(&quot;Index: &quot;, binarySearch(arr2,999999)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 1000000 Index: 999999 Execution time: 0.17070770263671875 ms . print(&quot;length of list: &quot;, len(arr3)) s = time.time() print(&quot;Index: &quot;, binarySearch(arr3,99999999)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 100000000 Index: 99999999 Execution time: 0.06628036499023438 ms . arr4 = [1,4,5,8,10,13,145,1938] print(&quot;Index: &quot;, binarySearch(arr4,17)) . Index: False . Challenges and Homework . You have one homework problem. . Yes just one. . Don&#39;t get excited though. . Problem: Given a specific integer N, return the square root of N (R) if N is a perfect square, otherwise, return the square root of N rounded down to the nearest integer . Input: N (Integer) . Output: R (Integer) . Constraints: Do not use any built-in math operations such as sqrt(x) or x**(0.5), Try complete the problem in logarithmic time. . Hint 1: Maybe you can use Binary Search to try and reduce the number of checks you have to perform? . Hint 2: Is there a mathematical pattern amongst numbers and their square roots that could help you reduce the number of searches or iterations you must execute? Is there some value or rule you can set before applying binary search to narrow the range of possible values? . Run the very last code segment below to load test cases and submission function . def sqrt_trial(N): numlist = [] num = 0 lo = 0 while num &lt;= N: numlist.append(num) num = num + 1 else: hi = num mid = (lo + hi) / 2 for mid in numlist: if mid**2 == N: return mid elif mid**2 &lt; N: hi = mid mid = (hi-lo)/2 elif mid**2 &gt; N: lo = mid mid = (hi-lo)/2 sqrt_trial(169) . 13 . The fucntion sqrt trial worked, but It will not work with higher numbers since it will have to search through a longer list. It was a good start but because of this I had to find a way to do binary search without using a list . def sqrt(N): hi = N lo = 0 if N &gt; 1: hi = N // 2 while hi &gt;= lo: mid = (lo + hi) // 2 if (mid**2) == N: return mid elif (mid**2) &lt; N: lo = mid + 1 else: hi = mid - 1 return None print(sqrt(169)) . 13 . from math import sqrt as sq test_cases = [0,1,4,85248289,22297284,18939904,91107025,69122596,9721924,37810201,1893294144,8722812816,644398225] answers = [int(sq(x)) for x in test_cases] def checkValid(): for i in range(len(test_cases)): if sqrt(test_cases[i]) == answers[i]: print(&quot;Check number {} passed&quot;.format(i+1)) else: print(&quot;Check number {} failed&quot;.format(i+1)) checkValid() . Check number 1 passed Check number 2 passed Check number 3 passed Check number 4 passed Check number 5 passed Check number 6 passed Check number 7 passed Check number 8 passed Check number 9 passed Check number 10 passed Check number 11 passed Check number 12 passed Check number 13 passed .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2022/11/29/searching-introduction.html",
            "relUrl": "/2022/11/29/searching-introduction.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Developing Algorithms (JavaScript)",
            "content": "Review . if-else statements . Syntax: . if (condition) { } else if (condition 2) { } else { } . for loops . for (let i = number; i &lt; number; i++) { // code } . Conditionals vs Booleans . Conditionals and booleans can be equivalent. . For example, let&#39;s say there are two booleans: rainy and sunny. . Let&#39;s look at the following code: . sunny = true; rainy = false; . false . if (sunny) { umbrella = false; } else if (rainy) { umbrella = true; } else { umbrella = false; } console.log(umbrella); . false . The code above is the same as below: . umbrella = !sunny &amp;&amp; rainy; console.log(umbrella); . false . To determine if two conditionals and booleans are the same, you can substitute the four possibilities that the two booleans (sunny and rainy) can be (listed below) into the conditional and boolean and see if both cases match: . sunny = true, rainy = true . sunny = true, rainy = false . sunny = false, rainy = true . sunny = false, rainy = false . Challenge . Using JavaScript, create an algorithm that takes in an IP address and a subnet mask and computes the network address. . Overview . As we&#39;ve seen in Unit 4.1, an IP address is a 32 bit number that uniquely identifies each device. (See this for a recap). Something extra is that an IP address also comes with a subnet mask. A subnet mask is also a 32 bit number that identifies what network an IP address in in through a process that uses the bitwise AND. . In ANDing: . 0 + 0 = 0 . 0 + 1 = 0 . 1 + 0 = 0 . 1 + 1 = 1 . The following are the steps to determine the network that an IP address is in given the subnet mask: . Example: IP address: 192.168.0.1 . Subnet mask: 255.255.255.0 . Convert the IP address into binary: 192.168.0.1 -&gt; 11000000.10101000.00000000.00000001 | Convert the subnet mask into binary: 255.255.255.0 -&gt; 11111111.11111111.11111111.00000000 | Do a bitwise AND operation on the binary IP address and subnet mask: | 11000000.10101000.00000000.00000001 +11111111.11111111.11111111.00000000 =11000000.10101000.00000000.00000000 . Convert the result back to decimal: 11000000.10101000.00000000.00000000 -&gt; 192.168.0.0 | The network address is 192.168.0.0 . function convert(num) { if (num &gt;= 1) { convert(num) % 2; } console.log(num % 2, end = &#39; &#39;) } convert(4); . evalmachine.&lt;anonymous&gt;:1 function convert(num) { ^ RangeError: Maximum call stack size exceeded at convert (evalmachine.&lt;anonymous&gt;:1:17) at convert (evalmachine.&lt;anonymous&gt;:3:9) at convert (evalmachine.&lt;anonymous&gt;:3:9) at convert (evalmachine.&lt;anonymous&gt;:3:9) at convert (evalmachine.&lt;anonymous&gt;:3:9) at convert (evalmachine.&lt;anonymous&gt;:3:9) at convert (evalmachine.&lt;anonymous&gt;:3:9) at convert (evalmachine.&lt;anonymous&gt;:3:9) at convert (evalmachine.&lt;anonymous&gt;:3:9) at convert (evalmachine.&lt;anonymous&gt;:3:9) . num = int(input(&quot;Enter a decimal number to be converted into binary.&quot;)) def convert(num): if num &gt;= 1: convert(num // 2) # double slash : divide the first number by the second, rounds to the nearest integer print(num % 2, end = &#39;&#39;) # end = &#39;&#39; signifies what will come between each printed num # Driver Code print(&quot;Binary of num &quot; + str(num) + &quot; is:&quot;, end=&quot; &quot;) convert(num) .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2022/11/29/developing-algorithms-js.html",
            "relUrl": "/2022/11/29/developing-algorithms-js.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Developing Algorithms",
            "content": "Algorithms can be written in different ways and still accomplish the same tasks. Algorithms that look similar often yield differnet outputs. To solve the same problem, many different algorithms can be used. . Therefore, algorithms are very important for programmers, and today we&#39;re going to explore how to determine the outcome of algorithms, how to deteremine the output of similar algorithms, how to edit existing algorithms, and how to develop our own algorithms. . Determine the outcome of algorithms . Consider the following algorithm. . def mystery(num, num2): if (num % num2 == 0): print(&quot;True&quot;) else: print(&quot;False&quot;) mystery(20, 4) . True . What does the algorithm do? Please explain in words. This algorithm takes the input of num and num2 and sees if num is divisible by num2. If true then output is true. Else the output is false. | What if I put in 30 as num and 4 as num2. What would be the output? The output would be false because 30 is not divisible by 4. | Determine the outcome of similar algorithms . What is the output of this algorithm? . temp = 95 if (temp &gt;= 90): print(&quot;it is too hot outside&quot;) else: if (temp &gt;= 65): print(&quot;I will go outside&quot;) else: print(&quot;it is too cold outside&quot;) . it is too hot outside . What is the output of this algorithm? it looks similar but the output is different! To make them the same output you could use an elif statement instead of three consequent if statements. . temp = 95 if (temp &gt;= 90): print(&quot;it is too hot outside&quot;) if (temp &gt;= 65): print(&quot;i will go outside&quot;) if (temp &lt; 65): print(&quot;it is too cold outside&quot;) . it is too hot outside i will go outside . Editing Algorithms . Task: Please edit the algorithm above to have it yield the same results as the previous algorithm! (no matter what temp you put in) . Developing Algorithms . To develop algorithms, we first need to understand what the question is asking. Then, think about how you would approach it as a human and then try to find what pattern you went through to arrive at the answer. Apply this to code, and there you have it! An algorithm! . Let&#39;s say you wanted to sum up the first five integers. How would you do this in real life? Your thought process would probably be: . The sum of the first integer is 1. | Then, increase that integer by 1. I now add 2 to my existing sum (1). My new sum is 3. | Repeat until I add 5 to my sum. The resulting sum is 15. | . Now let&#39;s translate this into code. . sum = 0 # start with a sum of 0 for i in range (1, 6): # you will repeat the process five times for integers 1-5 sum = sum + i # add the number to your sum print(sum) # print the result . 15 . Task: Write an algorithm in python that sums up the first 5 odd integers. You can use the following code as a starter. . sum = 0 for i in range(10): if i % 2 == 1: sum = sum + i print(sum) . 25 . Homework . Create an algorithm that will start with any positive integer n and display the full sequence of numbers that result from the Collatz Conjecture. The COllatz Conjecture is as follows: . start with any positive integer | if the number is even, divide by 2 | if the number is odd, multiply by 3 and add 1 | repeat steps 2 and 3 until you reach 1 | Example: if the starting number was 6, the output would be 6, 3, 10, 5, 16, 8, 4, 2, 1 . def function(num): list = [] list.append(num) while num &gt; 1: if num % 2: num = num * 3 + 1 list.append(num) else: num = num//2 list.append(num) print(list) function(6) . [6, 3, 10, 5, 16, 8, 4, 2, 1] .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2022/11/29/Developing-Algorithms.html",
            "relUrl": "/2022/11/29/Developing-Algorithms.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Lesson 1-2",
            "content": "Variables and Assignment Python/JS . a variable represents a value | Can be: strings, lists, booleans, numbers | variables must be assigned the above | . Defining Variables in Python . Type the variable name (no spaces) and use = to assign a value to it | . Mathematical Expressions . variable defined using a numerical value | that variable can be used in expressions in the place of a regular number | . Functions on Lists . append function adds elements to list | . Dictionaries . Dictionary can be defined using curly brackets | . Interchanging Variables . you can interchange variables by setting them equal to each other with a temporary variable | . Floats . used in the same was as int types | are decimals | . JS Variables . one way to assign a variable is using var var x = 2; | console.log(x) to print variable | const q = 5 sets q as a constant | Boolean(w &gt; x) prints true or false | const groupnames = [ string, string, string] to make a list | . Unit 3.2 Data Abstraction Python/JS . manage complexity in programs by giving a collection of data a name without refrencing the specific elements of the representation, makes it easier to implement, develop and maintain code, AP exam index start at 1 | Lists, dictionaries are a type of data abstraction | spilt() : splits string into a list and join(): joins list into a string | Js: declare function using function function_name(parameters) | can input and store data then display it | . Challenge . data = [104, 101, 4, 105, 308, 103, 5, 107, 100, 306, 106, 102, 108] # list of the different numerical values min_valid = 100 # minimum value max_valid = 200 # maximum value for num in data: if num&gt;200 or num&lt;100 : print (str(num) + &quot; &quot; + &quot;index: &quot; + str(data.index(num))) . 4 index: 2 308 index: 4 5 index: 6 306 index: 9 . HW/ Hacks . The list given contains 4 album names - Welcome to my Nightmare, Bad Company, Nightflight, More Mayhem - and each album contains at least 4 songs within another list. Given this, write a block of code that enables users to input in integer values that correspond to the albums and songs - Welcome to my Nightmare is 1, Bad Company is 2, etc. - Then, a sentence is outputted that says Playing ___ based on which song was chosen using the numbers inputted by the user that corresponds to each song. . albums = [ (&quot;Welcome to my Nightmare&quot;, &quot;Alice Cooper&quot;, 1975, # First album list [ (1, &quot;Welcome to my Nightmare&quot;), (2, &quot;Devil&#39;s Food&quot;), (3, &quot;The Black Widow&quot;), (4, &quot;Some Folks&quot;), (5, &quot;Only Women Bleed&quot;), ] ), (&quot;Bad Company&quot;, &quot;Bad Company&quot;, 1974, # Second album list [ (1, &quot;Can&#39;t Get Enough&quot;), (2, &quot;Rock Steady&quot;), (3, &quot;Ready for Love&quot;), (4, &quot;Don&#39;t Let Me Down&quot;), (5, &quot;Bad Company&quot;), (6, &quot;The Way I Choose&quot;), (7, &quot;Movin&#39; On&quot;), (8, &quot;Seagull&quot;), ] ), (&quot;Nightflight&quot;, &quot;Budgie&quot;, 1981, [ (1, &quot;I Turned to Stone&quot;), (2, &quot;Keeping a Rendezvous&quot;), (3, &quot;Reaper of the Glory&quot;), (4, &quot;She Used Me Up&quot;), ] ), (&quot;More Mayhem&quot;, &quot;Imelda May&quot;, 2011, [ (1, &quot;Pulling the Rug&quot;), (2, &quot;Psycho&quot;), (3, &quot;Mayhem&quot;), (4, &quot;Kentish Town Waltz&quot;), ] ), ] albumid = int(input(&quot;What is your preferred album 1-4?&quot;)) songid = int(input(&quot;What is your preferred song 1-?&quot;)) print(&quot;Playing: &quot; + str(albums[albumid-1][3][songid-1][1]) + &quot; from Album: &quot; + str(albums[albumid-1][0]) + &quot; by Artist: &quot; + str(albums[albumid-1][1])) . Playing: She Used Me Up from Album: Nightflight by Artist: Budgie .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/api/2022/11/28/Lesson1-2.html",
            "relUrl": "/api/2022/11/28/Lesson1-2.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Lists and Iterations",
            "content": "fruits = [&quot;apple&quot;, &quot;orange&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;grape&quot;, &quot;watermelon&quot;] . for item in fruits: print(item) . apple orange banana cherry grape watermelon . for i in range(len(fruits)): print(fruits[i]) . apple orange banana cherry grape watermelon . i = 0 while i &lt; len(fruits): print(fruits[i]) i = i + 1 . apple orange banana cherry grape watermelon . num = [45, 87, 21, 9, 13, 54, 92, 41, 42, 23, 67, 44, 34, 12] . num.remove(45) # removes value of a list num.append(100) # adds value to a list num.sort # sorts int lists from least to greatest print(num) . [9, 12, 13, 21, 23, 34, 41, 42, 44, 54, 67, 87, 92, 100, 100, 100] .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2022/11/18/lessonhacks.html",
            "relUrl": "/2022/11/18/lessonhacks.html",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Big idea 3!",
            "content": "3.3 Expressions(Show video 1 and 3) . Vocab: fill in the blanks . the symbol for exponent is * the symbol for addition is + the symbol for subtraction is - the symbol for multiplication is the symbol for division is / the symbol for modulus is % an algorithm is a sequence of steps that completes a specific task. . Sequencing Practice: the code below does not follow the intended steps below. change the code so that it does so. . divide value1 by 10(value1 = 5) | multiply 2 from the result of the step 1 | subtract 4 from the result of the step 2 | print the result of step 3 | value1 = 5 value2 = value1 / 10 #step 1 value3 = value2 * 2 #step 2 value4 = value3 - 4 #step 3 print(value4) . -3.0 . Selection/Iteration Practice: Create a function to print ONLY the numbers of numlist that are divisble by 3. Hint: use the MOD operator (a % b) to find the remainder when a is divided by b. . numlist = [3,4,9,76,891] for i in numlist: if i % 3 == 0: print( str(i) + &quot; is divisible by 3&quot;) continue else: print( str(i) + &quot; is not divisible by 3&quot;) . 3 is divisible by 3 4 is not divisible by 3 9 is divisible by 3 76 is not divisible by 3 891 is divisible by 3 . Homework/Binary Adaptation: Create a python function that will convert a decimal number 1-255 to binary using mathematical operations and powers of 2. Challenge: add frontend with javascript or html. . def convert(num): if num &gt;= 1: convert(num // 2) # double slash : divide the first number by the second, rounds to the nearest integer print(num % 2, end = &#39; &#39;) # end = &#39;&#39; signifies what will come between each printed num convert(100) . 0 1 1 0 0 1 0 0 . 3.4 Strings(Show video 1) . Vocab: fill in the blanks using the video . Index is a number representing a position, like a character&#39;s position in a string or a string&#39;s position in a list. Concatenation is merging strings Length is length of the list A substring is part of the string, certain characters . What is psuedocode? . Pseudocode is writing out a program in plain language with keywords that are used to refer to common coding concepts. . Can you think of some benefits of using pseudocode prior to writing out the actual code? . Choose an everyday activity | Imagine that you are providing instructions for this activity to a person who has never done it before | Challenge someone to do the steps you wrote out | Ex. Brushing Teeth . Pick up your toothbrush | Rinse toothbrush | Pick up toothpaste | Place toothpaste on the toothbrush | Rinse toothbrush again | Brush teeth in a circular motion | Spit | Wash mouth | Rinse toothbrush | You have brushed your teeth! | Substring/Length Practice: change the print functions to print &quot;hello&quot;, &quot;bye&quot;, and the string length . #the substring will have the characters including the index &quot;start&quot; to the character BEFORE the index &quot;end&quot; #len(string) will print the length of string string = &quot;hellobye&quot; print(string[0:5]) print(string[5:8]) print(string[0:5] + &quot; &quot; + string[5:8]) . hello bye hello bye . Concatenation Practice: combine string1 and string2 to make string3, then print string3. . string1 = &quot;computer&quot; string2 = &quot;science&quot; string3 = string1 + string2 print(string3) . computerscience . Homework/List Adaptation: create a function that prints the name of each string in the list and the string&#39;s length. Challenge: add frontend with javascript or html. . names = [&quot;jaden&quot;,&quot;max&quot;,&quot;dylan&quot;,&quot;orlando&quot;] def length(list): for i in names: length = len(i) print( i + &quot; &quot; + str(length)) length(names) . jaden 5 max 3 dylan 5 orlando 7 . Stuck? . Check out what we did. | . Have any questions? . Ask us if you have any questions! | .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/week-13/big-idea-3/2022/11/18/expressions-and-strings.html",
            "relUrl": "/week-13/big-idea-3/2022/11/18/expressions-and-strings.html",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Tri 2 Tool Check",
            "content": "%%bash #Check version of Java java_version=$(java -version 2&gt;&amp;1 | sed -n &#39;;s/.* version &quot; (.* ) . (.* ) ..*&quot;.*/ 1 2/p;&#39;) #Check version of Python python_version=`python -c &#39;import sys; version=sys.version_info[:3]; print(&quot;{0}.{1}.{2}&quot;.format(*version))&#39;` #Print using conditional statement if [ $java_version &gt; &quot;0&quot; ]; then echo &quot;Java version: &quot;$java_version else echo &quot;Java not installed&quot; fi if [ $python_version &gt; &quot;0&quot; ]; then echo &quot;Python version: &quot;$python_version else echo &quot;Python not installed&quot; fi . Java version: 110 Python version: 3.9.12 .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2022/11/18/Tri2ToolCheck.html",
            "relUrl": "/2022/11/18/Tri2ToolCheck.html",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Binary - Color",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . color Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | | | | | | | | | | | | | | | | | .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/frontend/binary-color",
            "relUrl": "/frontend/binary-color",
            "date": " • Nov 17, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Nov 17, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Night at The Museum Blog",
            "content": "Night of the Museum was a very fun but also eye opening experience. . Presenting our Project . Night at the Museum gave us an oppurtunity to present our projects to others. Our was about music which is something we were passionate about and others were as well. Our project had interactive elements but may have been too personal. We recieved alot of feedback and features that we could have added. It is important to present your project and hear from multiple users and gain perspective to create a product that is universal and lacks bias! . Seeing Other’s Projects . Seeing other people’s projects was just as good of an experience. Peoples ideas and passions really shone through. Visually many projects were satisfying to look at and many had user interaction. But most importantly, seeing other’s ideas gave us ideas for improvement in our own project. Getting inspiration from others is always helpful. . Final Reflection . Overall Night of the Museum was a really helpful learning experience. Getting user feedback and gaining inspiration are all part of the process of creating a successful final product. In the future, I now know that utilizing user feedback into my decisions while creating products is important. Overall I have learned so much in this class, not only coding related, but also collaboration, and persistance. I can’t wait for what’s to come in Tri 2. Thank you Mr. Mort!! .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/posts/natm",
            "relUrl": "/posts/natm",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Unit 4 Notes",
            "content": "4.1 Video 1 . As time evolved, computers became smaller | computers are capable of sending and recieving data | A computer system is a group of computing devices and programs working together for a joint purpose | A computer network is a group of interconnected computing devices capable of sending or recieving data, type of computing system | Packet switching: message is broken up into files and sent in any order. the packets are reassembled by reciever’s device | Routing is the process of finding a path from sender to reciever | A path between two computing devices on a computer netqork (a sender and a reciever) is a sequence of directly connected computing devices that begins at the sender and ends at the reciever | Bandwith: maximum amount of data that can be snet in a fixed amount of time on a computer network (bits/second) | . 4.1 Video 2 . Packet: small amount of data sent over a netqork. Each packet also includes the source and destination of the Data. | protocol: agreed upon set of rules that specify the behavior of a system Computer Protocol Methods: . | OSI: open systems interconnect: layers you have to go through to communicate (7 groups of protocols) | TCP: establishes common standard for how to send messages | Network Access Layer: Setting things up in the hardware, NIC card or wire. MAC address is unique to each card. uses binary | INternet Protocol Layer (IP): Where the packets get set up with sender ip, reciever ip, metadata(contains information used for routing information). | MAC address are used to transport message from sender ip to reciever ip | .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/posts/unit4",
            "relUrl": "/posts/unit4",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Final Exam Blog",
            "content": "Question My Answer Difficulties/Research/Notes . 1. Which of the following best describes the behavior of the code segment? # | D. The code segment displays the value of 2(5^3) by initializing result to 2 and then multiplying result by 5 a total of three times. | None | . 2. In the following procedure, assume that the parameter x is an integer. Which of the following best describes the behavior of the procedure? # | C. It displays true if x is negative and displays nothing otherwise. | y &lt;- (x&lt;0)Output y is True or False. | . 3. A company that develops educational software wants to assemble a collaborative team of developers from a variety of professional and cultural backgrounds. Which of the following is NOT considered a benefit of assembling such a team? | A. Collaboration that includes diverse backgrounds and perspectives can eliminate the need for software testing. | Collaboration with diverse members, allow the team to anticipate needs of users, avoid bias, and reflect the strength of each member. Having a diverse team does not take away the need for software testing. | . 4. Which of the following data are needed for DineOutHelper to recommend a restaurant for the group?Each group member’s list of food allergies or dietary restrictionsAlejandra’s geographic locationThe usernames of the people on Brandon and Cynthia’s contact lists | A. I and II only. | None | . 5. Which of the following data is not provided by Alejandra but is necessary for DineOutHelper to recommend a restaurant for the group?Brandon’s contact listInformation about which restaurants Brandon and Cynthia have visited in the pastInformation about which food allergies and dietary restrictions can be accommodated at different restaurants near Alejandra | B. III onlyOther information is unnecessary |   | . 6. Which of the following is the most appropriate documentation to appear with the printNums procedure? # | B. Prints all positive odd integers that are less than or equal to max. | Note: when pseudo code gets confusing strategy is to assign numbers to variable, or map it out | . 7. Which of the following is the most appropriate documentation to appear with the calculate procedure? # | C. Displays the value of (x + y) / x.The value of the parameter x must not be 0. | C not D because of the restriction on parameter x ** read carefullyDocumentation: Code documentation is text that accompanies software code to explain what your code is doing, why it’s written the way it is, and/or how to use it. source | . 8. Which of the following is the most appropriate documentation to appear with the swapListElements procedure? # | B. Returns a copy of numList with the elements at indices j and k interchanged.The values of j and k must both be between 1 and LENGTH(numList), inclusive. | Indices: indicates the position of the element within the array (starting from 1)sourceA copy of numList, newList is returned with the position in the list (parameters) j and k Values of J and K represent indices, or positions in the list. The positions must be between 0 and the len(numList) inclusive | . 9. Which of the following changes can be made so that the code segment works as intended? # | D. Interchange lines 3 and 7 | Again, assign numbers and remember what happens to each variable when it is overcomplicated | . 10. Three students in different locations are collaborating on the development of an application. Which of the following strategies is LEAST likely to facilitate collaboration among the students? | C. Having all three students write code independently and then having one student combine the code into a program | This is ineffective because without frequent discussion the code may not be coherent | . 11. The code segment compares pairs of list elements, setting containsDuplicates to true if any two elements are found to be equal in value. Which of the following best describes the behavior of how pairs of elements are compared? # | B. The code segment iterates through myList, comparing each element to all subsequent elements in the list. | The code segment iterates through myLIst and compares each element to the elements following it. The first loop, repeats the segment until every element is tested ( j &gt; len(myList) - 1) The second loop repeats as long as ‘k’ which is the subsequent remaining elements of the list is greater than the length of the list. | . 12. A student is creating an application that allows customers to order food for delivery from a local restaurant. Which of the following is LEAST likely to be an input provided by a customer using the application? | B. The cost of a food item currently available for order | This should be an output not user input | . 13. The following procedure is intended to return true if the list of numbers myList contains only positive numbers and is intended to return false otherwise. The procedure does not work as intended. # | C. [-1, 0, 1] | The function iterates through the list, only returning true if the number is positive. But if the first elements in the list are not positive, they are skipped over. Therefore in C, -1 and 0 are skipped over but when +1 is checked to be &gt;0, the return is True even though the first two elements are not positive. | . 14. For which of the following values of numCorrect does the code segment NOT display the intended grade? # | B. 8 and D. 6 | Input 6 will display ‘check’ Input 8 will display ‘check minus’ | . 15. A company that develops mobile applications wants to involve users in the software development process. Which of the following best explains the benefit in having users participate? | D. Users can provide feedback that can be used to incorporate a variety of perspectives into the software. | User feedback incorporates a variety of perspectives | . 16. Which of the following best explains how messages are typically transmitted over the Internet? | B. The message is broken into packets. The packets can be received in any order and still be reassembled by the recipient’s device. | Before messages get sent, they’re broken up into tinier parts called packetssource | . 17. Which of the following is a primary reason for the use of open protocols on the Internet? | D. Open protocols provide a way to standardize data transmission between different devices. | Open protocol: not owned by any particular company and not limited to a particular company’s productsOpen protocol allows data to be standardized | . 18. Which of the following best describes the relationship between the World Wide Web and the Internet? | C. The World Wide Web is a system of linked pages, programs, and files that is accessed via a network called the Internet. | None | . 19. A certain programming language uses 4-bit binary sequences to represent nonnegative integers. For example, the binary sequence 0101 represents the corresponding decimal value 5. Using this programming language, a programmer attempts to add the decimal values 14 and 15 and assign the sum to the variable total. Which of the following best describes the result of this operation? | C. An overflow error will occur because 4 bits is not large enough to represent 29, the sum of 14 and 15. | Binary is 4-bit meaning the max number represented is 4! = 24. 14+15 = 29 &gt; 24 so 29 cannot be represented | . 20. A video game character can face toward one of four directions: north, south, east, and west. Each direction is stored in memory as a sequence of four bits. A new version of the game is created in which the character can face toward one of eight directions, adding northwest, northeast, southwest, and southeast to the original four possibilities. Which of the following statements is true about how the eight directions must be stored in memory? | D. Four bits are enough to store the eight directions. | None | . 21. Which of the following are true statements about the data that can be represented using binary sequences?Binary sequences can be used to represent strings of characters.Binary sequences can be used to represent colors.Binary sequences can be used to represent audio recordings. | D. I, II, and III | Binary can represent many different types of data including strings. source | . 22. Consider the 4-bit binary numbers 0011, 0110, and 1111. Which of the following decimal values is NOT equal to one of these binary numbers? | C. 90011: (2^0 ) 1 = 1(2^1 ) 1 = 2(2^2 ) 0 = 0(2^3 ) 0 = 02+1 = 30110: (2^0 ) 0 = 0(2^1 ) 1 = 2(2^2 ) 1 = 4(2^3 ) 0 = 02+4 = 61111: (2^0 ) 1 = 1(2^1 ) 1 = 2(2^2 ) 1 = 4(2^3 ) 1 = 81+2+4+8 = 15Can not equal 9. | Convert Binary to Decimal #source | . 23. The position of a runner in a race is a type of analog data. The runner’s position is tracked using sensors. Which of the following best describes how the position of the runner is represented digitally? | D. The position of the runner is sampled at regular intervals to approximate the real-word position, and a sequence of bits is used to represent each sample.Best guess | Analog Data: Data represented in a physical way, grooves on a vinyl | . 24. Which of the following lists the values in order from least to greatest?Binary 1011Binary 1101Decimal 5Decimal 12 | A. Decimal 5, binary 1011, decimal 12, binary 11011011: (2^0 ) 1 = 1(2^1 ) 1 = 2(2^2 ) 0 = 0(2^3 ) 1 = 81+2+8 = 111101: (2^0 ) 1 = 1(2^1 ) 0 = 0(2^2 ) 1 = 4(2^3 ) 1 = 81+4+8 = 135, 1011, 12, 1101 | See question 22 | . 25. The variable age is to be used to represent a person’s age, in years. Which of the following is the most appropriate data type for age ? | B. Number | None | . 26. The variable isOpen is to be used to indicate whether or not a store is currently open. Which of the following is the most appropriate data type for isOpen ? | A. Boolean | None | . 27. A teacher is writing a code segment that will use variables to represent a student’s name and whether or not the student is currently absent. Which of the following variables are most appropriate for the code segment? | C. A string variable named studentName and a Boolean variable named isAbsent | None | . 28. Which of the following code segments correctly sets the value of the variable cost to the cost, in dollars, of using numUnits units of electricity? | C. # | None | . 29. Which of the following is a benefit of using a list as a data abstraction in a program? | A. Lists often allow their size to be easily updated to hold as many data values as needed. | Data Abstraction: shows only required information about the data and hides the unnecessary data, like how we manipulated the Api | . 30. A programmer has a need to round many numeric values to the nearest integer. Which of the following best explains the benefit of using a list as a data abstraction in this situation? | B. Keeping the numeric values in a list makes it easier to apply the same computation to every data element. | Apply same rounding computation to each element in list. | . 31. The list wordList has the following contents.[“abc”, “def”, “ghi”, “jkl”]Let myWord be the element at index 3 of wordList. Let myChar be the character at index 2 of myWord. What is the value of myChar ? | C. ‘h’ | None | . 32. What are the contents of yourList after the code segment is executed? # | A. [10, 30, 50, 70] | None | . 33. What is displayed as a result of executing the code segment? # | C. 100 300 500 | None | . 34. What are the contents of secondList after the code segment is executed?# | B. [“guitar”, “drums”, “bass”] | None | . 35. In a certain video game, the variable maxPS represents the maximum possible score a player can earn. The maximum possible score depends on the time it takes the player to complete the game. The value of maxPS should be 30 if time is greater than 120 and 50 otherwise.Which of the following code segments correctly sets the value of maxPS based on the value of time ? ** incorrect sould be A and D | A. #C. # | None | . 36. Intended to store ten consecutive even integers, beginning with 2, in the list evenList. Which of the following can be used to replace so that the code segment works as intended?# | C. APPEND(evenList, 2 * i)i ← i + 1 | None | . 37. Which of the following code segments can be used to interchange the values of the variables num1 and num2 ? | D.# | None | . 38. Which of the following code segments can be used to update the values of the variables as shown in the table? | B. temp ← word1word1 ← word3word3 ← temp | None | . 39.The list wordList contains a list of 10 string values. Which of the following is a valid index for the list? | B. “hello” ** incorrect because it usulally consists of non negative numbers | None | . 40. If the value of x is 3 and the value of y is 5, what is displayed as a result of executing the code segment? # | A. -2 | None | . 41. What is the value of r as a result of executing the code segment? # | B. 20 | None | . 42. What is the value of sum after the code segment is executed? # | C. 16 | None | . 43. What is the value of result after the code segment is executed? # | C. 15 | None | . 44. Which of the following initial values of the variable y would result in the variable z being set to 2 after the code segment is executed?# | C. 3 | MOD: The modulo operation (abbreviated “mod”, or “%” in many programming languages) is the remainder when dividing | . 45. What are the values of count1 and count2 as a result of executing the code segment? # | B. count1 = 2, count2 = 3 | None | . 46. What are the values of first and second as a result of executing the code segment? # | The value of first is true, and the value of second is true. | None | . 47. What is displayed as a result of executing the code segment? # | D. 21 40 30 50 | None | . 48. Which of the variables have the value 50 after executing the code segment? # | C. x and z only | None | . 49. Which of the following code segments can be used to store “noon” in the string variable word ? # | word ← “on”word ← concat(reverse(word), word) | concat(str1, str2)For example, concat(“key”, “board”) returns “keyboard”.reverse(str) For example, reverse(“abcd”) returns “dcba”. | . 50.The variable initials is to be assigned a string consisting of the first letter of the string firstName followed by the first letter of the string lastName. Which of the following assigns the correct string to initials ? | initials ← concat(prefix(firstName, 1), prefix(lastName, 1)) | prefix(str, length)For example, prefix(“delivery”, 3) returns “del” and prefix(“delivery”, 100) returns “delivery”. | .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2022/11/05/finalexam-blog.html",
            "relUrl": "/2022/11/05/finalexam-blog.html",
            "date": " • Nov 5, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Project Planning",
            "content": "Row 1: Program Purpose and Function . Input: Artist Name and Album | Output: Album duration, album song names, number of songs, album cover photo | The purpose of this program is to provide users with data about their favorite artists including their albums, songs, and album duration and allow them to choose their favorite artists. Row 2: Data Abstraction . Data about song and artists stored in dictionary which is retrieved using API . Row 3: Managing Complexity . | use a function to read user input and only provide wanted album information | allowing user to use favorites tab to organize the artists they enjoy Row 4: Procedural Abstraction . | using artist[album], retrieve only wanted data from the dictionary. call developed function to run based on user input. Row 5: Algorithm Implementation . | develop algorithim to count number of songs in album given API data | algorithm to create ‘favorite artists’ tab, where users - can select their favorite artists to be saved in a seperate section of the application Row 6: Testing . | Input multiple artists and album. See if each selected data type displays proper data. Add artists to ‘favorites’ and see if that data is stored | . Screens . .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/posts/project_planning",
            "relUrl": "/posts/project_planning",
            "date": " • Oct 13, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "API Notes and Takeaways",
            "content": "What is API? . API stands for Application Programming Interface | API is a set of code that lets data be transferred between two applications | Easy to remember: API is the ‘messenger’. It takes requests and then tells a system exactly what you want to do. Then it returns the response back to you | Real Life Analogy: At a restaurant, you are sitting at a table and looking at the order choices on the menu. The kitchen is the system that will prepare your order. The link that will communicate your order to the kitchen and deliver the food to your table is the waiter or API! | . Takeaways . API is an important tool used for data transmission and communication | the client sends a request | application sending the response back is the server | API communicates between client and server | . Extra Research: . What is an API Endpoint? . An API Endpoint are kind of touch points in the API communication system | They have server URLS , specific digital locations | . Other Features on Rapid? . Discussions, tutorials | In examples theres a place called “schema” – research more about this | Schema section has headers | .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/posts/api_notes",
            "relUrl": "/posts/api_notes",
            "date": " • Oct 13, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Using RapidAPI to Get Data",
            "content": "import requests url = &quot;https://wft-geo-db.p.rapidapi.com/v1/geo/adminDivisions&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;2589d0d945msh900743935f389a8p15c96ejsn5364cd142d31&quot;, &quot;X-RapidAPI-Host&quot;: &quot;wft-geo-db.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) print(&quot;City Data: Al Mamzar&quot;) cities = response.json().get(&#39;data&#39;) for city in cities: # countries is a list if city[&quot;name&quot;] == &quot;Al Mamzar&quot;: # this filters for USA for key, value in city.items(): # this finds key, value pairs in country print(key, value) . City Data: Al Mamzar id 3515514 wikiDataId Q4117373 name Al Mamzar country United Arab Emirates countryCode AE region Dubai regionCode DU latitude 25.309469444 longitude 55.342811111 population 0 .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/notebooks/api_example",
            "relUrl": "/notebooks/api_example",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Identifying and Correcting Errors",
            "content": "Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i+1) + &quot; letter in the alphabet&quot;) i += 1 . The letter t is the 20 letter in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) count = 1 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . The letter t is the 20 letter in the alphabet . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 1): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . from cmath import inf menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times print(&quot;Your Order:&quot;) while True: item = input(&quot;Please select an item from the menu. Type done to exit.&quot;) if item != &#39;done&#39;: total = total + menu[item] print(item) else: break #code should add the price of the menu items selected by the user print(&quot;Total Price: $&quot; + str(total)) . Menu burger $3.99 fries $1.99 drink $0.99 Your Order: burger burger drink Total Price: $8.97 . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "College Board Quiz Results & Proof",
            "content": "Below is a screen shot of the completed section in college board showing that I completed the quizzes 1.1-1.3 . . Updates * . I didn’t have trouble with any specific problem but I found this one to be a little challenging to understand at first: . I have a better understanding of this problem now that I have gone over it but to summarize: | It returns a copy of numList with j and k switched. Both J and K need to be between 1 and the length of numList (inclusive). The code makes a copy of numList and names it newList. Then the element at newList(j) is switched and instead assigned the element at numList(k). The code only works if j and k are valid within both lists so j and k must be between 1 and the length of the list | At first I didn’t understand the paramaters j and k had to satisy but it makes more sense after reviewing it | .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2022/10/02/collegeboardquiz.html",
            "relUrl": "/2022/10/02/collegeboardquiz.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Java Script Cheat Sheet",
            "content": "// console: prints console.log(&quot;hello&quot;) . hello . // var: assigns variable // &quot;str&quot; + var : prints string variable in that order var msg=&quot;friend&quot;; console.log(&quot;hello &quot; + msg) . hello friend . // The function returns the product of p1 and p2 function myFunction(p1, p2) { return p1 * p2; } myFunction(3, 4) . 12 . // The function returns the largest number in an array console.log(Math.max(1, 3, 2, 4, 5, 2, 9)); . 9 . // Math.PI is equivalent to Pi, math.cos returns cosine var pi = Math.PI; console.log(&quot;The cosine of 2pi = &quot;+ Math.cos(2*pi)); . The cosine of 2pi = 1 . // Math.floor gives value according to floor function console.log(Math.floor(8.99999)); console.log(Math.floor(8.00001)); console.log(Math.floor(8.5555)); . 8 8 8 .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2022/09/25/personaluse-jskernel.html",
            "relUrl": "/2022/09/25/personaluse-jskernel.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Jupyter JS Kernel",
            "content": "Console Log + String . console.log is used behind the scenes and is not visible from the browser. | . console.log(&quot;Hello world!&quot;); . Hello world! . Console Log + String . console log also works without a string, and with a variable instead | . var text = &quot;Hello, World&quot;; console.log(text); . Hello, World . Console.log + function . define function and call | . function logIt(output) { console.log(output); } logIt(text); . Hello, World . Console.log + function (re use) . re use and call function logIt | . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hey!&quot;); logIt(1234) . Reuse of logIT Hey! 1234 . Dynamic language . js is a loosely types language which means you don&#39;t have to specific information type that will be stored into the variable | . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Javascript is a loosely typed language: &quot;) logItType(&quot;hey&quot;) // String logItType(&quot;1234&quot;) // Number logItType([1,2,3,4]); // Object or Array . Javascript is a loosely typed language: string ; hey string ; 1234 object ; [ 1, 2, 3, 4 ] . Build person function to save list . function Person allows to gain name, favorite color, and age data of the user | . // define a function to hold data for a Person function Person(name, favcolor, age) { this.name = name; this.favcolor = favcolor; this.age = age; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, favcolor: this.favcolor, age: this.age, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mrs D&quot;, &quot;neon yellow&quot;, 40); // object type is easy to work with in JavaScript logItType(teacher); // before role logItType(teacher.toJSON()); // ok to do this even though role is not yet defined // output of Object and JSON/string associated with Teacher teacher.setRole(&quot;Teacher&quot;); // set the role logItType(teacher); logItType(teacher.toJSON()); . object ; Person { name: &#39;Mrs D&#39;, favcolor: &#39;neon yellow&#39;, age: 40, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Mrs D&#34;,&#34;favcolor&#34;:&#34;neon yellow&#34;,&#34;age&#34;:40,&#34;role&#34;:&#34;&#34;} object ; Person { name: &#39;Mrs D&#39;, favcolor: &#39;neon yellow&#39;, age: 40, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mrs D&#34;,&#34;favcolor&#34;:&#34;neon yellow&#34;,&#34;age&#34;:40,&#34;role&#34;:&#34;Teacher&#34;} . Build students and classroom array . var students is an array of all the students | forEach goes through the array and .push adds to it | . // define a student Array of Person(s) var students = [ new Person(&quot;Tanisha&quot;, &quot;purple&quot;, 15), new Person(&quot;Claire&quot;, &quot;pink&quot;, 15), new Person(&quot;Amitha&quot;, &quot;blue&quot;, 17), new Person(&quot;Grace&quot;, &quot;sage&quot;, 17), ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mrs D&#39;, favcolor: &#39;neon yellow&#39;, age: 40, role: &#39;Teacher&#39; }, Person { name: &#39;Tanisha&#39;, favcolor: &#39;purple&#39;, age: 15, role: &#39;Student&#39; }, Person { name: &#39;Claire&#39;, favcolor: &#39;pink&#39;, age: 15, role: &#39;Student&#39; }, Person { name: &#39;Amitha&#39;, favcolor: &#39;blue&#39;, age: 17, role: &#39;Student&#39; }, Person { name: &#39;Grace&#39;, favcolor: &#39;sage&#39;, age: 17, role: &#39;Student&#39; } ] string ; Mrs D string ; {&#34;name&#34;:&#34;Mrs D&#34;,&#34;favcolor&#34;:&#34;neon yellow&#34;,&#34;age&#34;:40,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mrs D&#39;, favcolor: &#39;neon yellow&#39;, age: 40, role: &#39;Teacher&#39; } . Table . var style is building the formatting of table | var body is creating the rows and headings. loop creates a new row for every person | . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Favorite Color&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Age&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.favcolor + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.age + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameFavorite ColorAgeRole . Mrs D | neon yellow | 40 | Teacher | Tanisha | purple | 15 | Student | Claire | pink | 15 | Student | Amitha | blue | 17 | Student | Grace | sage | 17 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2022/09/25/jupyter-js-kernell.html",
            "relUrl": "/2022/09/25/jupyter-js-kernell.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Agile Methodology",
            "content": "Agile Methodology . Notes on Agile Methodology . 1: Our highest priority is to satisfy the customer through early and continuous delivery of valuable software. . | 2: Welcome changing requirements, even late in development. Agile processes harness change for the customer’s competitive advantage. . | 3: Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale. . | 4: Business people and developers must work together daily throughout the project. . | 5: Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done. . | 6: The most efficient and effective method of conveying information to and within a development team is face-to-face conversation. . | 7: Working software is the primary measure of progress. . | 8: Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely. . | 9: Continuous attention to technical excellence and good design enhances agility. . | 10: Simplicity–the art of maximizing the amount of work not done–is essential. . | 11: The best architectures, requirements, and designs emerge from self-organizing teams. . | 12: At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly. . | . Our Diagram . Link to Scrum Diagram . Our Scrum Board . Link to our Scrum Board .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2022/09/25/agile-methodology.html",
            "relUrl": "/2022/09/25/agile-methodology.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "Psychology Video Notes",
            "content": "Vocabulary and Main Ideas . Insights of Happiness: . You can control your happiness | Life circumstances do not dictate our happiness | Takes daily effort and work to be happier Stats . Yale professor explains that students are filled with stress. . | 40% college students have more than the average level of stress | 1/3 students are depressed to the point of lessened functionality | 40% are hopeless . | This class in yale was very hepful. 1/4 students at yale took this course | 80% are overwhelmed . Healthy Practices matter . | sleep | exercise | welth in time &gt; wealth in money | make time for gratitude | help other people to get enjoyment for yourself | have social connection | be present Gratitude List . I am greatful for my: . | my brother | family | painting | music, piano | my home country, india | my best friends | field hockey | teachers | mine and my family’s health My 3 Goals . | sleep more | eat fulfilling food and more often and excercise | help my friends and family more | .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2022/09/21/Psychologyvidnotes.html",
            "relUrl": "/2022/09/21/Psychologyvidnotes.html",
            "date": " • Sep 21, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "Unit 1 Notes",
            "content": "1.1 Collaboration . Think Pair Share : . Team Collab . Notes on Collaboration : . Computing innovation: integrates the use of a program in order to function | Collaboration is necessary in order to avoid bias, and have new perspectives in development. This is clearly shown in the differences between Super Mario Bro 2 and 3 | Collaboration teaches skills like: communication, negotiation, conflict resolution, consensus building | Pair programming: is when two people work as a pair on a program together. One types code while other observes and looks for errors | Think Pair Share: is when you think on your own, think with a partner, and then share with a larger group | You can collaborate using repl, github, shared doc, comments in code | . 1.2 Program Function and Purpose . All computing innovations are developed for a purpose and this purpose guides the development of the program | Computer programs take inputs in a variety of fashions to influence the program’s behavior | Computer programs: collection of statements that are executed according to the rules of the programming language Row 1: Program Purpose and Function . | Input: Artist Name and Album | Output: Album duration, album song names, number of songs, album cover photo The purpose of this program is to provide users with data about their favorite artists including their albums, songs, and album duration and allow them to choose their favorite artists. | . 1.3 Program Design and Development . Computer programs are developed with a systematic approach to achieve a desired purpose | Programs are developed by groups of people and new prgrams are often written by expaning on the programs already written by others | Programmers can use comments/ documentation (short descriptions) to explain the purpose of their program to themselves, collaboraters, and others involved Row 2: Data Abstraction . Data about song and artists stored in dictionary which is retrieved using API . | . Row 3: Managing Complexity . use a function to read user input and only provide wanted album information allowing user to use favorites tab to organize the artists they enjoy . Row 4: Procedural Abstraction . using artist[album], retrieve only wanted data from the dictionary. call developed function to run based on user input. . Row 5: Algorithm Implementation . develop algorithim to count number of songs in album given API data algorithm to create ‘favorite artists’ tab, where users - can select their favorite artists to be saved in a seperate section of the application . Row 6: Testing . Input multiple artists and album. See if each selected data type displays proper data. Add artists to ‘favorites’ and see if that data is stored . 1.4 Identifying and Correcting Errors . Errors are inevitable, they happen | Understanding the different types of errors is important to being a proficient programmer | To understand errors, programmers need to create testing schemes to ensure programs are working as intented Identifying and Correcting Errors practice | .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/posts/unit1",
            "relUrl": "/posts/unit1",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "Ideas for Performance Task",
            "content": "Ideas for Performance Task: . Languages Translator: user selects language, take user input, checks it against a previously stored dictionary, outputs appropriate translation | Pixel Art : user input of characteristics: color/brush size/location , output pixel displayed wit correct characteristics | Graphing Calculator: user input of equation, output of graph | Citation Machine: user input of type of citation, source name/author/etc , output of complete citation | . Rubric/Expectations . Row 1: Program Purpose and Function . Assesses students’ ability to explain how a code segment or program functions. (Skill: Code Analysis) For 3a, make sure to differentiate between program purpose and function They are defined in the scoring guidelines . Row 2: Data Abstraction . Assesses students’ ability to use abstraction to manage complexity in a program. (Skill Abstraction in Program Development - data) . Row 3: Managing Complexity . Assesses students’ ability to explain how abstraction manages complexity. (Skill Abstraction in Program Development explain complexity) Be specific about how the program manages complexity in the context of your own program . Row 4: Procedural Abstraction . Assesses students’ ability to use abstraction to manage complexity in a program. (Skill Abstraction in Program Development - procedures/functions) Must be a student-developed procedure . Row 5: Algorithm Implementation . Assesses students’ ability to implement and apply an algorithm. (Skill Algorithms and Program Development) ## Row 6: Testing Assesses students’ ability to investigate the situation, context,or task. (Skill Computational Solution Design - testing) .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2022/09/12/performancetask-ideas.html",
            "relUrl": "/2022/09/12/performancetask-ideas.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Night at The Museum Blog",
            "content": "Night of the Museum was a very fun but also eye opening experience. . Presenting our Project . Night at the Museum gave us an oppurtunity to present our projects to others. Our was about music which is something we were passionate about and others were as well. Our project had interactive elements but may have been too personal. We recieved alot of feedback and features that we could have added. It is important to present your project and hear from multiple users and gain perspective to create a product that is universal and lacks bias. . Seeing Other’s Projects . Seeing other people’s projects was just as good of an experience. Peoples ideas and passions really shone through. Visually many projects were satisfying to look at and many had user interaction. But most importantly, seeing other’s ideas gave us ideas for improvement in our own project. Getting inspiration from others is always helpful. . Final Reflection . Overall Night of the Museum was a really helpful learning experience. Getting user feedback and gaining inspiration are all part of the process of creating a successful final product. In the future, I now know that utilizing user feedback into my decisions while creating products is important. Overall I have learned so much in this class, not only coding related, but also collaboration, and persistance. I can’t wait for what’s to come in Tri 2. Thank you Mr. Mort!! .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/posts/natm",
            "relUrl": "/posts/natm",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "Creative Development Blog",
            "content": "Creative Development Blog . AppLab Creations . AppLab Creation | Personality Quiz . | Program Purpose This purpose of this program is to test the user’s ability to recognize popular luxury brand logos. | Program Functionality This program consists of three questions in order to quiz the user on their ability to recognize logos. It starts at the home page and navigates through each question page. If the answer selected is wrong, the program leads the user to an ‘incorrect’ question that allows the user to either retry the question or get a hint. The last screen desplays the results of the quiz. | Program Testing I tested this program multiple times. At first I did not use hints and realized that for someone without knowledge of brands, not having hints or retries could be discouraging. Also, the score calculator was not displaying because the if statement was not under an ‘on event statement’. After changing this and reassigning score values to each answer I got better results. App Planning - Logos Quiz . | Home page (introduces quiz, leads to q1) | Q1: question with four options A B C D. If correct answer isn’t chosen, lead user to ‘incorrect’ page. Incorrect page displays that the user input was incorrect and has option to return to the question or recieve a hint. When correct answer choice is clicked, leads to ‘correct’ page which leads to question 2. | Q2: choose between four image options using check box. If correct answer isn’t checked, lead user to ‘incorrect’ page. Incorrect page displays that the user input was incorrect and has option to return to the question or recieve a hint. When correct answer choice is clicked, leads to ‘correct’ page which leads to question 2. | Q3: choose between two images. If incorrect, lead to incorrect page and option to return to question | . Additions . Successes: use of correct/incorrect pages, check boxs | Failures: tried to use a for loop but wasn’t able to because when looped the incorrect answers had to go to different pages based on the question that was incorrect, drop down failed because dropdown only changed the screen and did not give an output | Adjustments: could not use the dropdown so I used the checkbozes instead. Loops did not work due to the fact that each user input needed specific screen changes. So I did not use loops. Ideally I would have figured out the loops because the code was very long. | . Extra . created a second quiz inspired by buzzfeed quix | created a series of questions that determine whether you are an introvert or extrovert | I created a variable ‘score’ and for whichever answer I added/subtracted it a specific value to be added to var score. | In the end I used an if/else statement and said that if score was greater than 0, to display the score and ‘introvert’ | .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2022/09/11/creativedevelopmentblog.html",
            "relUrl": "/2022/09/11/creativedevelopmentblog.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "Remote Theme Change",
            "content": "Remote Theme Change Observations . I temporarily changed the theme to the ‘modernist’ theme . Front Page . . no pages | title is not a link back to the home page | enlarged post pictures | website shrunken horizontally against dark bakground | new font Post . . | emojis are not displayed | headings are not properly placed | indents are not properly placed Jupyter Notebook . . | new font within code cells and md cells | title is not a link back to the home page | tags displayed as a link | .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/markdown/week2/2022/09/05/changetheme-blog.html",
            "relUrl": "/markdown/week2/2022/09/05/changetheme-blog.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "Info Data Base",
            "content": "InfoDb is a database that has information about students&#39; grades, their names, and student id numbers within it. The final goal is to get an input from the user of the student ID, find it in the dictionary, and print the correct student&#39;s information. . InfoDb = [] # Append to List a Dictionary of key/values related student and grades InfoDb.append({ &quot;Name&quot;: [&quot;Sofia Kemuel&quot;], &quot;Student ID&quot;: [&quot;1029&quot;], &quot;Math&quot;: [&quot;88% B+&quot;], &quot;English&quot;: [&quot;93% A-&quot;], &quot;History&quot;: [&quot;95% A&quot;], &quot;Art&quot;: [&quot;98% A+&quot;], &quot;Physical Education&quot;: [&quot;89% B+&quot;], }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;Name&quot;: [&quot;Jennifer Darcey&quot;], &quot;Student ID&quot;: [&quot;2837&quot;], &quot;Math&quot;: [&quot;77% C+&quot;], &quot;English&quot;: [&quot;90% A-&quot;], &quot;History&quot;: [&quot;91% A-&quot;], &quot;Art&quot;: [&quot;100% A+&quot;], &quot;Physical Education&quot;: [&quot;82% B-&quot;], }) # Print the data structure print(InfoDb) print() . [{&#39;Name&#39;: [&#39;Sofia Kemuel&#39;], &#39;Student ID&#39;: [&#39;1029&#39;], &#39;Math&#39;: [&#39;88% B+&#39;], &#39;English&#39;: [&#39;93% A-&#39;], &#39;History&#39;: [&#39;95% A&#39;], &#39;Art&#39;: [&#39;98% A+&#39;], &#39;Physical Education&#39;: [&#39;89% B+&#39;]}, {&#39;Name&#39;: [&#39;Jennifer Darcey&#39;], &#39;Student ID&#39;: [&#39;2837&#39;], &#39;Math&#39;: [&#39;77% C+&#39;], &#39;English&#39;: [&#39;90% A-&#39;], &#39;History&#39;: [&#39;91% A-&#39;], &#39;Art&#39;: [&#39;100% A+&#39;], &#39;Physical Education&#39;: [&#39;82% B-&#39;]}] . As you can see, the code cell above has just saved the information of students Sofia and Jennifer within the dictionaries. . def print_data(db): print(db[&quot;Name&quot;]) print(&quot; t&quot;, &quot;Student ID:&quot;, db[&quot;Student ID&quot;]) print(&quot; t&quot;, &quot;Math:&quot;, db[&quot;Math&quot;]) print(&quot; t&quot;, &quot;English:&quot;, db[&quot;English&quot;]) print(&quot; t&quot;, &quot;History:&quot;, db[&quot;History&quot;]) print(&quot; t&quot;, &quot;Art:&quot;, db[&quot;Art&quot;]) print(&quot; t&quot;, &quot;Physical Education:&quot;, db[&quot;Physical Education&quot;]) print() # define function for_loop to print dictionaries def for_loop(): for record in InfoDb: print_data(record) for_loop() . [&#39;Sofia Kemuel&#39;] Student ID: [&#39;1029&#39;] Math: [&#39;88% B+&#39;] English: [&#39;93% A-&#39;] History: [&#39;95% A&#39;] Art: [&#39;98% A+&#39;] Physical Education: [&#39;89% B+&#39;] [&#39;Jennifer Darcey&#39;] Student ID: [&#39;2837&#39;] Math: [&#39;77% C+&#39;] English: [&#39;90% A-&#39;] History: [&#39;91% A-&#39;] Art: [&#39;100% A+&#39;] Physical Education: [&#39;82% B-&#39;] . Using a for loop, the code cell above finds the record within InfoDb and prints student information one by one for all students (2). . def while_loop(): i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . [&#39;Sofia Kemuel&#39;] Student ID: [&#39;1029&#39;] Math: [&#39;88% B+&#39;] English: [&#39;93% A-&#39;] History: [&#39;95% A&#39;] Art: [&#39;98% A+&#39;] Physical Education: [&#39;89% B+&#39;] [&#39;Jennifer Darcey&#39;] Student ID: [&#39;2837&#39;] Math: [&#39;77% C+&#39;] English: [&#39;90% A-&#39;] History: [&#39;91% A-&#39;] Art: [&#39;100% A+&#39;] Physical Education: [&#39;82% B-&#39;] . The code cell above executes a code using a while loop to print the contents of the dictionary. It loops comparing a value i to the length of the dictionary. . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return recursive_loop(0) . [&#39;Sofia Kemuel&#39;] Student ID: [&#39;1029&#39;] Math: [&#39;88% B+&#39;] English: [&#39;93% A-&#39;] History: [&#39;95% A&#39;] Art: [&#39;98% A+&#39;] Physical Education: [&#39;89% B+&#39;] [&#39;Jennifer Darcey&#39;] Student ID: [&#39;2837&#39;] Math: [&#39;77% C+&#39;] English: [&#39;90% A-&#39;] History: [&#39;91% A-&#39;] Art: [&#39;100% A+&#39;] Physical Education: [&#39;82% B-&#39;] . The code cell above prints the contents of the infodb dictionary using a recursive function (meaning the function itself is called within the loop) . input_id = input(&quot;Enter student ID: &quot;) # define function to find in InfoDb and print information corrsponding to certain ID def loop_with_input(): for record in InfoDb: if search(record, input_id): print_data(record) loop_with_input() . [&#39;Sofia Kemuel&#39;] Student ID: [&#39;1029&#39;] Math: [&#39;88% B+&#39;] English: [&#39;93% A-&#39;] History: [&#39;95% A&#39;] Art: [&#39;98% A+&#39;] Physical Education: [&#39;89% B+&#39;] . The code cell above takes the input from the user and assigns it to the variable &quot;input_id&quot;. It uses a for loop and &#39;record&#39; in InfoDb to loop betweeen all the student&#39;s data one by one. It checks whether input_id is in each student&#39;s data. If it is, it prints the student data. .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2022/09/03/infodb.html",
            "relUrl": "/2022/09/03/infodb.html",
            "date": " • Sep 3, 2022"
        }
        
    
  
    
        ,"post53": {
            "title": "Panel Notes",
            "content": "CS Alumini Notes and Takeaways . How did you realize you wanted to do your major through apcsp/csa? . used coding knowledge and applied it to other fields | taking these classes certified their previous interest in cs | take time to reflect on how u want to apply comp sci in your life | Doing internships can solidify your interest | Even if you don’t want to go into computer science, it can help with other fields | csa made people realize that you can apply cs skills in real life | . Biggest challenge in doing Cs? . perseveration and determination | having an open mind and using resources like google | focus on your own path and journey | Don’t take shortcuts, try to learn and go above and beyond | Willing to just jump into CS . project based classes will help | . PBL scenario is in college cs classes . not a lot of project based learning in college | Self initiate projects | Good to learn how to self study and group study | . How have you applied CS in your major if you’re not majoring in CS? . Can help you in all of your projects | All fields have applications of CS | MatLab CAD softwares 3D printing etc | many applications of CS | CS can help with high level math courses especially python | can use jupyter notebooks for technical papers and interactive graphs | . Have you had a job with school or your professor . put together a resume, linkedin | talk to your teachers | Stand out to your teachers | internships:northrop grumman, LG software intern, arts graphic design web design, smaller companies in SD | make sure you network, reach out | robotics | job: code ninjas *Do personal projects *ucsd triton ai | . Main Takeaways: . No matter what STEM field you enter, CS basic logic and being familiar with syntax will be very helpful | Go above and beyond, try to research CS deeper than what is presented in class and do personal projects | Network and communicate with businesses. After taking CS, you can apply it to internships and jobs. | .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2022/08/29/panel_notes.html",
            "relUrl": "/2022/08/29/panel_notes.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post54": {
            "title": "Basic Python Vocabulary",
            "content": "Vocab List . print: used to print a message on the screen. The message can be a string, integer, list, and more ex: print(“Hello!”) outpyt: Hello! . | input: used to take an input from the user. Input taken from the user will be converted into a string ex: input(“Enter value: “) Enter value: 100 ‘100’ . | .append: used to add elements to the end of a list ex: fruits_list = [‘apple’, ‘banana’, ‘plum’] fruits_list.append(‘peach’) print(fruits_list) [‘apple’, ‘banana’, ‘plum’, ‘peach’] . | if statement: evaluates whether a condition is true or false. runs code based on that. ex: if 5 &gt; 2: print(“yellow”) Since 5 &gt; 2 = true, ‘yellow’ will be printed . |",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2022/08/27/pythonvocab.html",
            "relUrl": "/2022/08/27/pythonvocab.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post55": {
            "title": "Bash Check",
            "content": "%%bash #Check version of Java java_version=$(java -version 2&gt;&amp;1 | sed -n &#39;;s/.* version &quot; (.* ) . (.* ) ..*&quot;.*/ 1 2/p;&#39;) #Check version of Python python_version=`python -c &#39;import sys; version=sys.version_info[:3]; print(&quot;{0}.{1}.{2}&quot;.format(*version))&#39;` #Print using conditional statement if [ $java_version &gt; &quot;0&quot; ]; then echo &quot;Java version: &quot;$java_version else echo &quot;Java not installed&quot; fi if [ $python_version &gt; &quot;0&quot; ]; then echo &quot;Python version: &quot;$python_version else echo &quot;Python not installed&quot; fi . Java version: 110 Python version: 3.9.12 .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2022/08/27/bash_install_check.html",
            "relUrl": "/2022/08/27/bash_install_check.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post56": {
            "title": "My Python Quiz",
            "content": "score = 0 username = input(&#39;Enter your name:&#39;) print(&#39;Hello, &#39; + username) ready = input(&quot;This quiz will test your knowledge of python vocabulary. It is four questions long. Are you ready to take the test? Answer yes or no&quot;) if ready == &#39;yes&#39;: print(&quot;Great, let&#39;s get started&quot;) else: print(&quot;Don&#39;t worry, you&#39;ll do great&quot;) #question 1: answer_1 = input(&quot;Question 1: What is a statement containing if or if/else called?&quot;) if answer_1 == &#39;conditional&#39;: print(&quot;Correct! Time for the next question&quot;) score = score + 1 else: print(&quot;No! That is incorrect&quot;) #question 2: answer_2 = input(&quot;Question 2: Fill in the blank: ___ is a datatype with only two possible values; true or false&quot;) if answer_2 == &#39;boolean&#39;: print(&quot;Correct! Time for the next question&quot;) score = score + 1 else: print(&quot;No! That is incorrect&quot;) #question 3: answer_3 = input(&quot;Question 3: What should you write before a function to DEFine it&quot;) if answer_3 == &#39;def&#39;: print(&quot;Correct! Time for the next question&quot;) score = score + 1 else: print(&quot;No! That is incorrect&quot;) #question 4: answer_4 = input(&quot;Question 4: What can you use to store values?&quot;) if answer_4 == &#39;variable&#39;: print(&quot;Correct! Time for the next question&quot;) score = score + 1 else: print(&quot;No! That is incorrect&quot;) #end if score &gt;= 3: print(&quot;Congrats! You finished the quiz and did so well! Your score is: {}/4&quot; .format(score)) else: print(&quot;Congrats! You finished the quiz. Your score is: {}/4. Better luck next time&quot; .format(score)) . Hello, Tanisha Great, let&#39;s get started No! That is incorrect Correct! Time for the next question Correct! Time for the next question No! That is incorrect Congrats! You finished the quiz. Your score is: 2/4. Better luck next time .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2022/08/26/pyquiz.html",
            "relUrl": "/2022/08/26/pyquiz.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post57": {
            "title": "Tanisha's Daily Blog",
            "content": "Thursday, August 25th . Period 1 Intro to Engineering Design: . :clock1: Starts @ 8:35 am | :pencil2: Warm Up/Notes : class discussion about brainstorming and concept sketches | :bulb: Main Idea : Brainstorming can be a lenghty and diffucult process. It’s important to be patient and not discard any ideas you have. | :memo: HW : finish concept sketch and brainstorming 20 ideas for game Period 2 AP Chemistry: | :clock1: Starts @ 9:49 am | :pencil2: Warm Up/Notes : Mass Spectroscopy notes | :bulb: Main Idea : the four processes that occur inside a mass spectrometer are ionization, acceleration, deflection, and detection | :memo: HW : finish extension questions, print out and fill out lab storyboard Period 3 AP Calculus AB: | :clock1: Starts @ 11:13 am | :pencil2: Warm Up/Notes : a-g , getting more comfortable with algebraic limits | :bulb: Main Idea : if f(x) is continous at x=a then lim of f(x) as x approaches a = f(a) | :memo: HW : finish notes a-g, p 103-104 # 15, 40, 42, 49 and p 115 # 24, 26 (optional), 28, 30, 32, 37, 38, 41, 43, 54 Lunch Break Period 4 APCSP: | :clock1: Starts @ 12:47 pm | :pencil2: Warm Up/Notes : Learned about bash and worked on project due monday | :bulb: Main Idea : bash scripting is a way to automate tasks (collection of bash commands) that you need to execute at a specific time | :memo: HW : Work on bash, pyquiz, and blog/vocab md post Period 5 Honors Humanities: | :clock1: Starts @ 2:36 pm | :pencil2: Warm Up/Notes : analyze art, read tolstoy’s definition of art | :bulb: Main Idea : The definition of art has changed throughout the centuries. Art must convey an emotion. feeling, or idea | :memo: HW : finish cornell notes on “Culture and Values”, prepare for class discussion and presentation on POE and D Field Hockey Practice: :runner: Practice from 4-6 pm | .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2022/08/26/dailyblog.html",
            "relUrl": "/2022/08/26/dailyblog.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post58": {
            "title": "First Jupyter Notebook",
            "content": "print(&quot;Hello, Welcome to my Jupyter Notebook&quot;) . Hello, Welcome to my Jupyter Notebook .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2022/08/21/python-1.html",
            "relUrl": "/2022/08/21/python-1.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post59": {
            "title": "Tanisha's First Markdown Post",
            "content": "Tanisha’s First Markdown Post . This is my markdown post :+1: . :memo: Note: This is my first time making a markdown post. . Table . This is . a | table | . List . Tanisha’s Favorite Foods: . Pizza 🍕 . | Pasta 🥘 . | Ice Cream 🍨 . | Cupcakes 🧁 . | . Image . The Rocky Mountains are beautiful! I want to go here some day.:blush: .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/markdown/2022/08/21/first-blog-post.html",
            "relUrl": "/markdown/2022/08/21/first-blog-post.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post60": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Jul 7, 2022"
        }
        
    
  
    
        ,"post61": {
            "title": "Binary Hacks",
            "content": "Binary Logic Coding Challenge . import csv with open(&#39;files/valid_guesses.csv&#39;, mode=&#39;r&#39;) as file: csv_reader = csv.reader(file) wlist = [] for row in csv_reader: wlist.append(row[0]) modified_wlist = [] for word in wlist: if (word[0] not in [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]) and (word[-1] in [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]): modified_wlist.append(word) elif (word[0] in [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]) and (word[-1] not in [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]): modified_wlist.append(word) elif (word[0] not in [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]) and (word[-1] not in [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]): addism = word + &quot;ism&quot; modified_wlist.append(addism) print(modified_wlist) . [&#39;word&#39;, &#39;aalii&#39;, &#39;aargh&#39;, &#39;aarti&#39;, &#39;abaci&#39;, &#39;abacs&#39;, &#39;abaft&#39;, &#39;abamp&#39;, &#39;abash&#39;, &#39;abask&#39;, &#39;abbas&#39;, &#39;abbes&#39;, &#39;abcee&#39;, &#39;abeam&#39;, &#39;abear&#39;, &#39;abele&#39;, &#39;abers&#39;, &#39;abets&#39;, &#39;abies&#39;, &#39;abler&#39;, &#39;ables&#39;, &#39;ablet&#39;, &#39;ablow&#39;, &#39;abmho&#39;, &#39;abohm&#39;, &#39;aboil&#39;, &#39;aboon&#39;, &#39;abore&#39;, &#39;abram&#39;, &#39;abray&#39;, &#39;abrim&#39;, &#39;abrin&#39;, &#39;abris&#39;, &#39;absey&#39;, &#39;absit&#39;, &#39;abune&#39;, &#39;abuts&#39;, &#39;abuzz&#39;, &#39;abyes&#39;, &#39;abysm&#39;, &#39;acais&#39;, &#39;acari&#39;, &#39;accas&#39;, &#39;accoy&#39;, &#39;acers&#39;, &#39;achar&#39;, &#39;aches&#39;, &#39;achoo&#39;, &#39;acids&#39;, &#39;acidy&#39;, &#39;acing&#39;, &#39;acini&#39;, &#39;ackee&#39;, &#39;acker&#39;, &#39;acmes&#39;, &#39;acnes&#39;, &#39;acock&#39;, &#39;acres&#39;, &#39;acros&#39;, &#39;actin&#39;, &#39;acton&#39;, &#39;acyls&#39;, &#39;adaws&#39;, &#39;adays&#39;, &#39;adbot&#39;, &#39;addax&#39;, &#39;adder&#39;, &#39;addio&#39;, &#39;addle&#39;, &#39;adeem&#39;, &#39;adhan&#39;, &#39;adieu&#39;, &#39;adios&#39;, &#39;adits&#39;, &#39;adman&#39;, &#39;admen&#39;, &#39;admix&#39;, &#39;adobo&#39;, &#39;adown&#39;, &#39;adoze&#39;, &#39;adsum&#39;, &#39;aduki&#39;, &#39;adust&#39;, &#39;advew&#39;, &#39;adzes&#39;, &#39;aedes&#39;, &#39;aegis&#39;, &#39;aeons&#39;, &#39;aerie&#39;, &#39;aeros&#39;, &#39;aesir&#39;, &#39;afars&#39;, &#39;afear&#39;, &#39;aflaj&#39;, &#39;afore&#39;, &#39;afrit&#39;, &#39;afros&#39;, &#39;agami&#39;, &#39;agars&#39;, &#39;agast&#39;, &#39;agave&#39;, &#39;agaze&#39;, &#39;agene&#39;, &#39;agers&#39;, &#39;agger&#39;, &#39;aggie&#39;, &#39;aggri&#39;, &#39;aggro&#39;, &#39;aggry&#39;, &#39;aghas&#39;, &#39;agios&#39;, &#39;agism&#39;, &#39;agist&#39;, &#39;aglee&#39;, &#39;aglet&#39;, &#39;agley&#39;, &#39;agloo&#39;, &#39;aglus&#39;, &#39;agmas&#39;, &#39;agoge&#39;, &#39;agone&#39;, &#39;agons&#39;, &#39;agrin&#39;, &#39;agros&#39;, &#39;agues&#39;, &#39;aguti&#39;, &#39;aheap&#39;, &#39;ahent&#39;, &#39;ahigh&#39;, &#39;ahing&#39;, &#39;ahint&#39;, &#39;ahull&#39;, &#39;ahuru&#39;, &#39;aidas&#39;, &#39;aides&#39;, &#39;aidoi&#39;, &#39;aidos&#39;, &#39;aiery&#39;, &#39;aigas&#39;, &#39;aight&#39;, &#39;aimer&#39;, &#39;ainee&#39;, &#39;aioli&#39;, &#39;airer&#39;, &#39;airns&#39;, &#39;airth&#39;, &#39;airts&#39;, &#39;aitch&#39;, &#39;aitus&#39;, &#39;aiver&#39;, &#39;aiyee&#39;, &#39;aizle&#39;, &#39;ajies&#39;, &#39;ajwan&#39;, &#39;akees&#39;, &#39;akene&#39;, &#39;aking&#39;, &#39;akkas&#39;, &#39;alaap&#39;, &#39;alack&#39;, &#39;alamo&#39;, &#39;alane&#39;, &#39;alang&#39;, &#39;alans&#39;, &#39;alant&#39;, &#39;alaps&#39;, &#39;alary&#39;, &#39;alate&#39;, &#39;alays&#39;, &#39;albas&#39;, &#39;albee&#39;, &#39;alcos&#39;, &#39;alder&#39;, &#39;aldol&#39;, &#39;aleck&#39;, &#39;alecs&#39;, &#39;alefs&#39;, &#39;aleft&#39;, &#39;aleph&#39;, &#39;alews&#39;, &#39;aleye&#39;, &#39;alfas&#39;, &#39;algal&#39;, &#39;algas&#39;, &#39;algin&#39;, &#39;algor&#39;, &#39;algum&#39;, &#39;alias&#39;, &#39;alifs&#39;, &#39;aline&#39;, &#39;alist&#39;, &#39;alkie&#39;, &#39;alkos&#39;, &#39;alkyl&#39;, &#39;allee&#39;, &#39;allel&#39;, &#39;allis&#39;, &#39;allyl&#39;, &#39;almah&#39;, &#39;almas&#39;, &#39;almeh&#39;, &#39;almes&#39;, &#39;almug&#39;, &#39;alods&#39;, &#39;aloes&#39;, &#39;aloin&#39;, &#39;aloos&#39;, &#39;alowe&#39;, &#39;altho&#39;, &#39;altos&#39;, &#39;alums&#39;, &#39;alure&#39;, &#39;alvar&#39;, &#39;alway&#39;, &#39;amahs&#39;, &#39;amain&#39;, &#39;amate&#39;, &#39;amaut&#39;, &#39;amban&#39;, &#39;ambit&#39;, &#39;ambos&#39;, &#39;ambry&#39;, &#39;ameer&#39;, &#39;amene&#39;, &#39;amens&#39;, &#39;ament&#39;, &#39;amias&#39;, &#39;amice&#39;, &#39;amici&#39;, &#39;amide&#39;, &#39;amido&#39;, &#39;amids&#39;, &#39;amies&#39;, &#39;amigo&#39;, &#39;amine&#39;, &#39;amino&#39;, &#39;amins&#39;, &#39;amirs&#39;, &#39;amlas&#39;, &#39;amman&#39;, &#39;ammon&#39;, &#39;ammos&#39;, &#39;amnio&#39;, &#39;amoks&#39;, &#39;amole&#39;, &#39;amort&#39;, &#39;amour&#39;, &#39;amove&#39;, &#39;amowt&#39;, &#39;ampul&#39;, &#39;amrit&#39;, &#39;amuck&#39;, &#39;amyls&#39;, &#39;ancho&#39;, &#39;ancle&#39;, &#39;ancon&#39;, &#39;andro&#39;, &#39;anear&#39;, &#39;anele&#39;, &#39;anent&#39;, &#39;angas&#39;, &#39;anglo&#39;, &#39;anigh&#39;, &#39;anile&#39;, &#39;anils&#39;, &#39;animi&#39;, &#39;anion&#39;, &#39;anise&#39;, &#39;anker&#39;, &#39;ankhs&#39;, &#39;ankus&#39;, &#39;anlas&#39;, &#39;annal&#39;, &#39;annas&#39;, &#39;annat&#39;, &#39;anoas&#39;, &#39;anole&#39;, &#39;anomy&#39;, &#39;ansae&#39;, &#39;antae&#39;, &#39;antar&#39;, &#39;antas&#39;, &#39;antes&#39;, &#39;antis&#39;, &#39;antre&#39;, &#39;antsy&#39;, &#39;anyon&#39;, &#39;apace&#39;, &#39;apage&#39;, &#39;apays&#39;, &#39;apeak&#39;, &#39;apeek&#39;, &#39;apers&#39;, &#39;apert&#39;, &#39;apery&#39;, &#39;apgar&#39;, &#39;aphis&#39;, &#39;apian&#39;, &#39;apiol&#39;, &#39;apish&#39;, &#39;apism&#39;, &#39;apode&#39;, &#39;apods&#39;, &#39;apoop&#39;, &#39;aport&#39;, &#39;appal&#39;, &#39;appay&#39;, &#39;appel&#39;, &#39;appro&#39;, &#39;appui&#39;, &#39;appuy&#39;, &#39;apres&#39;, &#39;apses&#39;, &#39;apsis&#39;, &#39;apsos&#39;, &#39;apter&#39;, &#39;aquae&#39;, &#39;aquas&#39;, &#39;araks&#39;, &#39;arame&#39;, &#39;arars&#39;, &#39;arbas&#39;, &#39;archi&#39;, &#39;arcos&#39;, &#39;arcus&#39;, &#39;ardri&#39;, &#39;areae&#39;, &#39;areal&#39;, &#39;arear&#39;, &#39;areas&#39;, &#39;arede&#39;, &#39;arefy&#39;, &#39;arene&#39;, &#39;arere&#39;, &#39;arete&#39;, &#39;arets&#39;, &#39;arett&#39;, &#39;argal&#39;, &#39;argan&#39;, &#39;argil&#39;, &#39;argle&#39;, &#39;argol&#39;, &#39;argon&#39;, &#39;argot&#39;, &#39;argus&#39;, &#39;arhat&#39;, &#39;arias&#39;, &#39;ariel&#39;, &#39;ariki&#39;, &#39;arils&#39;, &#39;ariot&#39;, &#39;arish&#39;, &#39;arles&#39;, &#39;armer&#39;, &#39;armet&#39;, &#39;armil&#39;, &#39;arnas&#39;, &#39;arnut&#39;, &#39;arpas&#39;, &#39;arpen&#39;, &#39;arrah&#39;, &#39;arras&#39;, &#39;arret&#39;, &#39;arris&#39;, &#39;arroz&#39;, &#39;arses&#39;, &#39;arsey&#39;, &#39;arsis&#39;, &#39;artal&#39;, &#39;artel&#39;, &#39;artis&#39;, &#39;aruhe&#39;, &#39;arums&#39;, &#39;arval&#39;, &#39;arvee&#39;, &#39;arvos&#39;, &#39;aryls&#39;, &#39;ascon&#39;, &#39;ascus&#39;, &#39;ashes&#39;, &#39;ashet&#39;, &#39;asker&#39;, &#39;askoi&#39;, &#39;askos&#39;, &#39;aspen&#39;, &#39;asper&#39;, &#39;aspie&#39;, &#39;aspis&#39;, &#39;aspro&#39;, &#39;assai&#39;, &#39;assam&#39;, &#39;asses&#39;, &#39;assez&#39;, &#39;assot&#39;, &#39;aster&#39;, &#39;astir&#39;, &#39;astun&#39;, &#39;asway&#39;, &#39;aswim&#39;, &#39;ataps&#39;, &#39;ataxy&#39;, &#39;atigi&#39;, &#39;atilt&#39;, &#39;atimy&#39;, &#39;atlas&#39;, &#39;atman&#39;, &#39;atmas&#39;, &#39;atmos&#39;, &#39;atocs&#39;, &#39;atoke&#39;, &#39;atoks&#39;, &#39;atoms&#39;, &#39;atomy&#39;, &#39;atony&#39;, &#39;atopy&#39;, &#39;atrip&#39;, &#39;attap&#39;, &#39;attar&#39;, &#39;atuas&#39;, &#39;auger&#39;, &#39;aught&#39;, &#39;aulas&#39;, &#39;auloi&#39;, &#39;aulos&#39;, &#39;aumil&#39;, &#39;aunes&#39;, &#39;aunts&#39;, &#39;aurae&#39;, &#39;aural&#39;, &#39;aurar&#39;, &#39;auras&#39;, &#39;aurei&#39;, &#39;aures&#39;, &#39;auris&#39;, &#39;aurum&#39;, &#39;autos&#39;, &#39;auxin&#39;, &#39;avale&#39;, &#39;avant&#39;, &#39;avast&#39;, &#39;avels&#39;, &#39;avens&#39;, &#39;avers&#39;, &#39;avgas&#39;, &#39;avine&#39;, &#39;avion&#39;, &#39;avise&#39;, &#39;aviso&#39;, &#39;avize&#39;, &#39;avows&#39;, &#39;avyze&#39;, &#39;awarn&#39;, &#39;awato&#39;, &#39;awave&#39;, &#39;aways&#39;, &#39;awdls&#39;, &#39;aweel&#39;, &#39;aweto&#39;, &#39;awing&#39;, &#39;awmry&#39;, &#39;awner&#39;, &#39;awols&#39;, &#39;awork&#39;, &#39;axels&#39;, &#39;axile&#39;, &#39;axils&#39;, &#39;axing&#39;, &#39;axite&#39;, &#39;axles&#39;, &#39;axman&#39;, &#39;axmen&#39;, &#39;axone&#39;, &#39;axons&#39;, &#39;ayahs&#39;, &#39;ayelp&#39;, &#39;aygre&#39;, &#39;ayins&#39;, &#39;ayont&#39;, &#39;ayres&#39;, &#39;ayrie&#39;, &#39;azans&#39;, &#39;azide&#39;, &#39;azido&#39;, &#39;azine&#39;, &#39;azlon&#39;, &#39;azole&#39;, &#39;azons&#39;, &#39;azote&#39;, &#39;azoth&#39;, &#39;azuki&#39;, &#39;azurn&#39;, &#39;azury&#39;, &#39;azygy&#39;, &#39;azyme&#39;, &#39;azyms&#39;, &#39;baals&#39;, &#39;babas&#39;, &#39;babel&#39;, &#39;babes&#39;, &#39;baboo&#39;, &#39;babul&#39;, &#39;babus&#39;, &#39;bacco&#39;, &#39;baccy&#39;, &#39;bachs&#39;, &#39;backs&#39;, &#39;baddy&#39;, &#39;baels&#39;, &#39;baffs&#39;, &#39;baffy&#39;, &#39;bafts&#39;, &#39;baghs&#39;, &#39;bagie&#39;, &#39;bahts&#39;, &#39;bahus&#39;, &#39;bahut&#39;, &#39;bails&#39;, &#39;bairn&#39;, &#39;baith&#39;, &#39;baits&#39;, &#39;baize&#39;, &#39;bajan&#39;, &#39;bajri&#39;, &#39;bajus&#39;, &#39;baken&#39;, &#39;bakes&#39;, &#39;balas&#39;, &#39;balds&#39;, &#39;baldy&#39;, &#39;bales&#39;, &#39;balks&#39;, &#39;balky&#39;, &#39;balls&#39;, &#39;bally&#39;, &#39;balms&#39;, &#39;baloo&#39;, &#39;balti&#39;, &#39;balun&#39;, &#39;balus&#39;, &#39;bambi&#39;, &#39;banak&#39;, &#39;banco&#39;, &#39;bancs&#39;, &#39;bandh&#39;, &#39;bands&#39;, &#39;bandy&#39;, &#39;banes&#39;, &#39;bangs&#39;, &#39;banks&#39;, &#39;banns&#39;, &#39;bants&#39;, &#39;bantu&#39;, &#39;banty&#39;, &#39;bapus&#39;, &#39;barbe&#39;, &#39;barbs&#39;, &#39;barby&#39;, &#39;barde&#39;, &#39;bardo&#39;, &#39;bards&#39;, &#39;bardy&#39;, &#39;barer&#39;, &#39;bares&#39;, &#39;barfi&#39;, &#39;barfs&#39;, &#39;barks&#39;, &#39;barky&#39;, &#39;barms&#39;, &#39;barmy&#39;, &#39;barns&#39;, &#39;barny&#39;, &#39;barps&#39;, &#39;barre&#39;, &#39;barro&#39;, &#39;barry&#39;, &#39;barye&#39;, &#39;basan&#39;, &#39;basen&#39;, &#39;baser&#39;, &#39;bases&#39;, &#39;basho&#39;, &#39;basij&#39;, &#39;basks&#39;, &#39;bason&#39;, &#39;basse&#39;, &#39;bassi&#39;, &#39;basso&#39;, &#39;bassy&#39;, &#39;basti&#39;, &#39;basto&#39;, &#39;basts&#39;, &#39;bates&#39;, &#39;baths&#39;, &#39;batik&#39;, &#39;batts&#39;, &#39;battu&#39;, &#39;bauds&#39;, &#39;bauks&#39;, &#39;baulk&#39;, &#39;baurs&#39;, &#39;bavin&#39;, &#39;bawds&#39;, &#39;bawks&#39;, &#39;bawls&#39;, &#39;bawns&#39;, &#39;bawrs&#39;, &#39;bawty&#39;, &#39;bayer&#39;, &#39;bayes&#39;, &#39;bayle&#39;, &#39;bayts&#39;, &#39;bazar&#39;, &#39;bazoo&#39;, &#39;beads&#39;, &#39;beaks&#39;, &#39;beaky&#39;, &#39;beals&#39;, &#39;beams&#39;, &#39;beamy&#39;, &#39;beano&#39;, &#39;beans&#39;, &#39;beany&#39;, &#39;beare&#39;, &#39;bears&#39;, &#39;beath&#39;, &#39;beats&#39;, &#39;beaty&#39;, &#39;beaus&#39;, &#39;beaut&#39;, &#39;beaux&#39;, &#39;bebop&#39;, &#39;becap&#39;, &#39;becke&#39;, &#39;becks&#39;, &#39;bedel&#39;, &#39;bedes&#39;, &#39;bedew&#39;, &#39;bedim&#39;, &#39;bedye&#39;, &#39;beedi&#39;, &#39;beefs&#39;, &#39;beeps&#39;, &#39;beers&#39;, &#39;beery&#39;, &#39;beets&#39;, &#39;befog&#39;, &#39;begar&#39;, &#39;begem&#39;, &#39;begot&#39;, &#39;begum&#39;, &#39;beige&#39;, &#39;beigy&#39;, &#39;beins&#39;, &#39;bekah&#39;, &#39;belah&#39;, &#39;belar&#39;, &#39;belay&#39;, &#39;belee&#39;, &#39;bells&#39;, &#39;belon&#39;, &#39;belts&#39;, &#39;bemas&#39;, &#39;bemix&#39;, &#39;bends&#39;, &#39;bendy&#39;, &#39;benes&#39;, &#39;benet&#39;, &#39;benis&#39;, &#39;benne&#39;, &#39;benni&#39;, &#39;benny&#39;, &#39;bento&#39;, &#39;bents&#39;, &#39;benty&#39;, &#39;bepat&#39;, &#39;beray&#39;, &#39;beres&#39;, &#39;bergs&#39;, &#39;berko&#39;, &#39;berks&#39;, &#39;berme&#39;, &#39;berms&#39;, &#39;beryl&#39;, &#39;besat&#39;, &#39;besaw&#39;, &#39;besee&#39;, &#39;beses&#39;, &#39;besit&#39;, &#39;besom&#39;, &#39;besot&#39;, &#39;besti&#39;, &#39;bests&#39;, &#39;betas&#39;, &#39;betes&#39;, &#39;beths&#39;, &#39;beton&#39;, &#39;betty&#39;, &#39;bever&#39;, &#39;bevor&#39;, &#39;bevue&#39;, &#39;bevvy&#39;, &#39;bewet&#39;, &#39;bewig&#39;, &#39;bezes&#39;, &#39;bezil&#39;, &#39;bezzy&#39;, &#39;bhais&#39;, &#39;bhaji&#39;, &#39;bhang&#39;, &#39;bhats&#39;, &#39;bhels&#39;, &#39;bhoot&#39;, &#39;bhuts&#39;, &#39;biach&#39;, &#39;biali&#39;, &#39;bialy&#39;, &#39;bibbs&#39;, &#39;bibes&#39;, &#39;biccy&#39;, &#39;bices&#39;, &#39;bider&#39;, &#39;bides&#39;, &#39;bidet&#39;, &#39;bidis&#39;, &#39;bidon&#39;, &#39;biers&#39;, &#39;biffo&#39;, &#39;biffs&#39;, &#39;biffy&#39;, &#39;bigae&#39;, &#39;biggs&#39;, &#39;biggy&#39;, &#39;bight&#39;, &#39;bigly&#39;, &#39;bigos&#39;, &#39;bijou&#39;, &#39;biker&#39;, &#39;bikes&#39;, &#39;bikie&#39;, &#39;bilbo&#39;, &#39;bilby&#39;, &#39;biles&#39;, &#39;bilgy&#39;, &#39;bilks&#39;, &#39;bills&#39;, &#39;bimah&#39;, &#39;bimas&#39;, &#39;bimbo&#39;, &#39;binal&#39;, &#39;bindi&#39;, &#39;binds&#39;, &#39;biner&#39;, &#39;bines&#39;, &#39;bings&#39;, &#39;bingy&#39;, &#39;binit&#39;, &#39;binks&#39;, &#39;bints&#39;, &#39;biogs&#39;, &#39;biont&#39;, &#39;birds&#39;, &#39;birks&#39;, &#39;birle&#39;, &#39;birls&#39;, &#39;biros&#39;, &#39;birrs&#39;, &#39;birse&#39;, &#39;birsy&#39;, &#39;bises&#39;, &#39;bisks&#39;, &#39;bisom&#39;, &#39;bitch&#39;, &#39;biter&#39;, &#39;bites&#39;, &#39;bitos&#39;, &#39;bitou&#39;, &#39;bitsy&#39;, &#39;bitte&#39;, &#39;bitts&#39;, &#39;bivvy&#39;, &#39;bizes&#39;, &#39;bizzo&#39;, &#39;bizzy&#39;, &#39;blabs&#39;, &#39;blads&#39;, &#39;blady&#39;, &#39;blaer&#39;, &#39;blaes&#39;, &#39;blaff&#39;, &#39;blags&#39;, &#39;blahs&#39;, &#39;blain&#39;, &#39;blams&#39;, &#39;blart&#39;, &#39;blase&#39;, &#39;blash&#39;, &#39;blate&#39;, &#39;blats&#39;, &#39;blatt&#39;, &#39;blawn&#39;, &#39;blaws&#39;, &#39;blays&#39;, &#39;blear&#39;, &#39;blebs&#39;, &#39;blech&#39;, &#39;blees&#39;, &#39;blent&#39;, &#39;blert&#39;, &#39;blest&#39;, &#39;blets&#39;, &#39;bleys&#39;, &#39;blimy&#39;, &#39;bling&#39;, &#39;blini&#39;, &#39;blins&#39;, &#39;bliny&#39;, &#39;blips&#39;, &#39;blist&#39;, &#39;blite&#39;, &#39;blits&#39;, &#39;blive&#39;, &#39;blobs&#39;, &#39;blocs&#39;, &#39;blogs&#39;, &#39;blook&#39;, &#39;bloop&#39;, &#39;blore&#39;, &#39;blots&#39;, &#39;blows&#39;, &#39;blowy&#39;, &#39;blubs&#39;, &#39;blude&#39;, &#39;bluds&#39;, &#39;bludy&#39;, &#39;blues&#39;, &#39;bluet&#39;, &#39;bluey&#39;, &#39;blume&#39;, &#39;blunk&#39;, &#39;blurs&#39;, &#39;blype&#39;, &#39;boabs&#39;, &#39;boaks&#39;, &#39;boars&#39;, &#39;boart&#39;, &#39;boats&#39;, &#39;bobak&#39;, &#39;bobas&#39;, &#39;bobol&#39;, &#39;bobos&#39;, &#39;bocce&#39;, &#39;bocci&#39;, &#39;boche&#39;, &#39;bocks&#39;, &#39;bodes&#39;, &#39;bodge&#39;, &#39;bodhi&#39;, &#39;bodle&#39;, &#39;boeps&#39;, &#39;boets&#39;, &#39;boeuf&#39;, &#39;boffo&#39;, &#39;boffs&#39;, &#39;bogan&#39;, &#39;bogey&#39;, &#39;boggy&#39;, &#39;bogie&#39;, &#39;bogle&#39;, &#39;bogue&#39;, &#39;bogus&#39;, &#39;bohos&#39;, &#39;boils&#39;, &#39;boing&#39;, &#39;boink&#39;, &#39;boite&#39;, &#39;bokeh&#39;, &#39;bokes&#39;, &#39;bokos&#39;, &#39;bolar&#39;, &#39;bolas&#39;, &#39;bolds&#39;, &#39;boles&#39;, &#39;bolix&#39;, &#39;bolls&#39;, &#39;bolos&#39;, &#39;bolts&#39;, &#39;bolus&#39;, &#39;bomas&#39;, &#39;bombe&#39;, &#39;bombo&#39;, &#39;bombs&#39;, &#39;bonce&#39;, &#39;bonds&#39;, &#39;boner&#39;, &#39;bones&#39;, &#39;bongs&#39;, &#39;bonie&#39;, &#39;bonks&#39;, &#39;bonne&#39;, &#39;bonny&#39;, &#39;bonze&#39;, &#39;booai&#39;, &#39;booay&#39;, &#39;boobs&#39;, &#39;boody&#39;, &#39;boofy&#39;, &#39;boogy&#39;, &#39;boohs&#39;, &#39;books&#39;, &#39;booky&#39;, &#39;bools&#39;, &#39;booms&#39;, &#39;boomy&#39;, &#39;boong&#39;, &#39;boons&#39;, &#39;boors&#39;, &#39;boose&#39;, &#39;boots&#39;, &#39;boppy&#39;, &#39;borak&#39;, &#39;boral&#39;, &#39;boras&#39;, &#39;borde&#39;, &#39;bords&#39;, &#39;boree&#39;, &#39;borel&#39;, &#39;borer&#39;, &#39;bores&#39;, &#39;borgo&#39;, &#39;borks&#39;, &#39;borms&#39;, &#39;boron&#39;, &#39;borts&#39;, &#39;borty&#39;, &#39;bortz&#39;, &#39;bosie&#39;, &#39;bosks&#39;, &#39;bosky&#39;, &#39;boson&#39;, &#39;bosun&#39;, &#39;botas&#39;, &#39;botel&#39;, &#39;botes&#39;, &#39;bothy&#39;, &#39;botte&#39;, &#39;botts&#39;, &#39;botty&#39;, &#39;bouge&#39;, &#39;bouks&#39;, &#39;boult&#39;, &#39;bouns&#39;, &#39;bourg&#39;, &#39;bourn&#39;, &#39;bouse&#39;, &#39;bousy&#39;, &#39;bouts&#39;, &#39;bowat&#39;, &#39;bower&#39;, &#39;bowes&#39;, &#39;bowet&#39;, &#39;bowie&#39;, &#39;bowls&#39;, &#39;bowne&#39;, &#39;bowrs&#39;, &#39;bowse&#39;, &#39;boxen&#39;, &#39;boxes&#39;, &#39;boxty&#39;, &#39;boyar&#39;, &#39;boyau&#39;, &#39;boyfs&#39;, &#39;boygs&#39;, &#39;boyos&#39;, &#39;boysy&#39;, &#39;bozos&#39;, &#39;braai&#39;, &#39;brach&#39;, &#39;brack&#39;, &#39;bract&#39;, &#39;brads&#39;, &#39;braes&#39;, &#39;brags&#39;, &#39;brail&#39;, &#39;braks&#39;, &#39;braky&#39;, &#39;brame&#39;, &#39;brane&#39;, &#39;brank&#39;, &#39;brans&#39;, &#39;brant&#39;, &#39;brast&#39;, &#39;brats&#39;, &#39;bravi&#39;, &#39;braws&#39;, &#39;braxy&#39;, &#39;brays&#39;, &#39;braze&#39;, &#39;bream&#39;, &#39;brede&#39;, &#39;breds&#39;, &#39;breem&#39;, &#39;breer&#39;, &#39;brees&#39;, &#39;breis&#39;, &#39;breme&#39;, &#39;brens&#39;, &#39;brent&#39;, &#39;brere&#39;, &#39;brers&#39;, &#39;breve&#39;, &#39;brews&#39;, &#39;breys&#39;, &#39;brier&#39;, &#39;bries&#39;, &#39;brigs&#39;, &#39;briki&#39;, &#39;briks&#39;, &#39;brill&#39;, &#39;brims&#39;, &#39;brins&#39;, &#39;brios&#39;, &#39;brise&#39;, &#39;briss&#39;, &#39;brith&#39;, &#39;brits&#39;, &#39;britt&#39;, &#39;brize&#39;, &#39;broch&#39;, &#39;brock&#39;, &#39;brods&#39;, &#39;brogh&#39;, &#39;brogs&#39;, &#39;brome&#39;, &#39;bromo&#39;, &#39;brool&#39;, &#39;broos&#39;, &#39;brose&#39;, &#39;brosy&#39;, &#39;brows&#39;, &#39;brugh&#39;, &#39;bruin&#39;, &#39;bruit&#39;, &#39;brule&#39;, &#39;brume&#39;, &#39;brung&#39;, &#39;brusk&#39;, &#39;brust&#39;, &#39;bruts&#39;, &#39;buats&#39;, &#39;buaze&#39;, &#39;bubal&#39;, &#39;bubas&#39;, &#39;bubbe&#39;, &#39;bubby&#39;, &#39;bubus&#39;, &#39;buchu&#39;, &#39;bucko&#39;, &#39;bucks&#39;, &#39;bucku&#39;, &#39;budas&#39;, &#39;budis&#39;, &#39;budos&#39;, &#39;buffe&#39;, &#39;buffi&#39;, &#39;buffo&#39;, &#39;buffs&#39;, &#39;buffy&#39;, &#39;bufos&#39;, &#39;bufty&#39;, &#39;buhls&#39;, &#39;buhrs&#39;, &#39;buiks&#39;, &#39;buist&#39;, &#39;bukes&#39;, &#39;bulbs&#39;, &#39;bulgy&#39;, &#39;bulks&#39;, &#39;bulls&#39;, &#39;bulse&#39;, &#39;bumbo&#39;, &#39;bumfs&#39;, &#39;bumph&#39;, &#39;bumps&#39;, &#39;bumpy&#39;, &#39;bunas&#39;, &#39;bunce&#39;, &#39;bunco&#39;, &#39;bunde&#39;, &#39;bundh&#39;, &#39;bunds&#39;, &#39;bundt&#39;, &#39;bundu&#39;, &#39;bundy&#39;, &#39;bungs&#39;, &#39;bungy&#39;, &#39;bunje&#39;, &#39;bunjy&#39;, &#39;bunko&#39;, &#39;bunks&#39;, &#39;bunns&#39;, &#39;bunts&#39;, &#39;bunty&#39;, &#39;buoys&#39;, &#39;buppy&#39;, &#39;buran&#39;, &#39;buras&#39;, &#39;burbs&#39;, &#39;burds&#39;, &#39;buret&#39;, &#39;burfi&#39;, &#39;burgh&#39;, &#39;burgs&#39;, &#39;burin&#39;, &#39;burke&#39;, &#39;burks&#39;, &#39;burls&#39;, &#39;burns&#39;, &#39;buroo&#39;, &#39;burps&#39;, &#39;burro&#39;, &#39;burrs&#39;, &#39;burry&#39;, &#39;burse&#39;, &#39;busby&#39;, &#39;buses&#39;, &#39;busks&#39;, &#39;busky&#39;, &#39;bussu&#39;, &#39;busti&#39;, &#39;busts&#39;, &#39;busty&#39;, &#39;buteo&#39;, &#39;butes&#39;, &#39;butle&#39;, &#39;butoh&#39;, &#39;butts&#39;, &#39;butty&#39;, &#39;butut&#39;, &#39;butyl&#39;, &#39;buzzy&#39;, &#39;bwazi&#39;, &#39;bydes&#39;, &#39;bykes&#39;, &#39;byres&#39;, &#39;byrls&#39;, &#39;byssi&#39;, &#39;bytes&#39;, &#39;byway&#39;, &#39;cabas&#39;, &#39;caber&#39;, &#39;cabre&#39;, &#39;cacas&#39;, &#39;cacks&#39;, &#39;cacky&#39;, &#39;cadee&#39;, &#39;cades&#39;, &#39;cadge&#39;, &#39;cadgy&#39;, &#39;cadie&#39;, &#39;cadis&#39;, &#39;cadre&#39;, &#39;caese&#39;, &#39;cafes&#39;, &#39;caffs&#39;, &#39;cager&#39;, &#39;cages&#39;, &#39;cagot&#39;, &#39;cahow&#39;, &#39;caids&#39;, &#39;cains&#39;, &#39;cajon&#39;, &#39;cajun&#39;, &#39;cakes&#39;, &#39;cakey&#39;, &#39;calfs&#39;, &#39;calif&#39;, &#39;calix&#39;, &#39;calks&#39;, &#39;calls&#39;, &#39;calms&#39;, &#39;calmy&#39;, &#39;calos&#39;, &#39;calps&#39;, &#39;calve&#39;, &#39;calyx&#39;, &#39;caman&#39;, &#39;camas&#39;, &#39;cames&#39;, &#39;camis&#39;, &#39;camos&#39;, &#39;campi&#39;, &#39;campo&#39;, &#39;camps&#39;, &#39;campy&#39;, &#39;camus&#39;, &#39;caneh&#39;, &#39;caner&#39;, &#39;canes&#39;, &#39;cangs&#39;, &#39;canns&#39;, &#39;canso&#39;, &#39;canst&#39;, &#39;canto&#39;, &#39;cants&#39;, &#39;canty&#39;, &#39;capas&#39;, &#39;capes&#39;, &#39;capex&#39;, &#39;caphs&#39;, &#39;capiz&#39;, &#39;caple&#39;, &#39;capon&#39;, &#39;capos&#39;, &#39;capot&#39;, &#39;capri&#39;, &#39;capul&#39;, &#39;carap&#39;, &#39;carbo&#39;, &#39;carbs&#39;, &#39;carby&#39;, &#39;cardi&#39;, &#39;cards&#39;, &#39;cardy&#39;, &#39;carer&#39;, &#39;cares&#39;, &#39;caret&#39;, &#39;carex&#39;, &#39;carks&#39;, &#39;carle&#39;, &#39;carls&#39;, &#39;carns&#39;, &#39;carny&#39;, &#39;carom&#39;, &#39;caron&#39;, &#39;carpi&#39;, &#39;carps&#39;, &#39;carrs&#39;, &#39;carse&#39;, &#39;carte&#39;, &#39;carts&#39;, &#39;carvy&#39;, &#39;casas&#39;, &#39;casco&#39;, &#39;cases&#39;, &#39;casks&#39;, &#39;casky&#39;, &#39;casts&#39;, &#39;casus&#39;, &#39;cates&#39;, &#39;cauks&#39;, &#39;cauls&#39;, &#39;caums&#39;, &#39;caups&#39;, &#39;cauri&#39;, &#39;cavas&#39;, &#39;cavel&#39;, &#39;caver&#39;, &#39;caves&#39;, &#39;cavie&#39;, &#39;cawks&#39;, &#39;caxon&#39;, &#39;ceaze&#39;, &#39;cecal&#39;, &#39;cecum&#39;, &#39;ceder&#39;, &#39;cedes&#39;, &#39;cedis&#39;, &#39;ceili&#39;, &#39;ceils&#39;, &#39;celli&#39;, &#39;cells&#39;, &#39;celom&#39;, &#39;celts&#39;, &#39;cense&#39;, &#39;cento&#39;, &#39;cents&#39;, &#39;centu&#39;, &#39;ceorl&#39;, &#39;cepes&#39;, &#39;cerci&#39;, &#39;ceres&#39;, &#39;cerge&#39;, &#39;cerne&#39;, &#39;ceros&#39;, &#39;certs&#39;, &#39;certy&#39;, &#39;cesse&#39;, &#39;cesti&#39;, &#39;cetes&#39;, &#39;cetyl&#39;, &#39;cezve&#39;, &#39;chace&#39;, &#39;chack&#39;, &#39;chaco&#39;, &#39;chado&#39;, &#39;chads&#39;, &#39;chaft&#39;, &#39;chais&#39;, &#39;chals&#39;, &#39;chams&#39;, &#39;chang&#39;, &#39;chank&#39;, &#39;chape&#39;, &#39;chaps&#39;, &#39;chapt&#39;, &#39;chare&#39;, &#39;chark&#39;, &#39;charr&#39;, &#39;chars&#39;, &#39;chary&#39;, &#39;chats&#39;, &#39;chave&#39;, &#39;chavs&#39;, &#39;chawk&#39;, &#39;chaws&#39;, &#39;chays&#39;, &#39;cheep&#39;, &#39;chefs&#39;, &#39;chelp&#39;, &#39;chemo&#39;, &#39;chems&#39;, &#39;chere&#39;, &#39;chert&#39;, &#39;cheth&#39;, &#39;chevy&#39;, &#39;chews&#39;, &#39;chewy&#39;, &#39;chiao&#39;, &#39;chias&#39;, &#39;chibs&#39;, &#39;chich&#39;, &#39;chico&#39;, &#39;chics&#39;, &#39;chiel&#39;, &#39;chiks&#39;, &#39;chile&#39;, &#39;chimo&#39;, &#39;chimp&#39;, &#39;chine&#39;, &#39;ching&#39;, &#39;chink&#39;, &#39;chino&#39;, &#39;chins&#39;, &#39;chips&#39;, &#39;chirk&#39;, &#39;chirl&#39;, &#39;chirm&#39;, &#39;chiro&#39;, &#39;chirr&#39;, &#39;chirt&#39;, &#39;chiru&#39;, &#39;chits&#39;, &#39;chive&#39;, &#39;chivs&#39;, &#39;chivy&#39;, &#39;chizz&#39;, &#39;choco&#39;, &#39;chocs&#39;, &#39;chode&#39;, &#39;chogs&#39;, &#39;choil&#39;, &#39;choko&#39;, &#39;choky&#39;, &#39;choli&#39;, &#39;cholo&#39;, &#39;chomp&#39;, &#39;chons&#39;, &#39;choof&#39;, &#39;chook&#39;, &#39;choom&#39;, &#39;choon&#39;, &#39;chops&#39;, &#39;chott&#39;, &#39;chout&#39;, &#39;choux&#39;, &#39;chowk&#39;, &#39;chows&#39;, &#39;chubs&#39;, &#39;chuff&#39;, &#39;chugs&#39;, &#39;chums&#39;, &#39;churl&#39;, &#39;churr&#39;, &#39;chuse&#39;, &#39;chuts&#39;, &#39;chyle&#39;, &#39;chyme&#39;, &#39;cibol&#39;, &#39;cides&#39;, &#39;ciels&#39;, &#39;ciggy&#39;, &#39;cills&#39;, &#39;cimar&#39;, &#39;cimex&#39;, &#39;cinct&#39;, &#39;cines&#39;, &#39;cinqs&#39;, &#39;cions&#39;, &#39;cippi&#39;, &#39;circs&#39;, &#39;cires&#39;, &#39;cirls&#39;, &#39;cirri&#39;, &#39;cisco&#39;, &#39;cissy&#39;, &#39;cists&#39;, &#39;cital&#39;, &#39;citer&#39;, &#39;cites&#39;, &#39;cives&#39;, &#39;civet&#39;, &#39;civie&#39;, &#39;civvy&#39;, &#39;clach&#39;, &#39;clade&#39;, &#39;clads&#39;, &#39;claes&#39;, &#39;clags&#39;, &#39;clame&#39;, &#39;clams&#39;, &#39;clans&#39;, &#39;claps&#39;, &#39;clapt&#39;, &#39;claro&#39;, &#39;clart&#39;, &#39;clary&#39;, &#39;clast&#39;, &#39;clats&#39;, &#39;claut&#39;, &#39;clave&#39;, &#39;clavi&#39;, &#39;claws&#39;, &#39;clays&#39;, &#39;cleck&#39;, &#39;cleek&#39;, &#39;cleep&#39;, &#39;clefs&#39;, &#39;clegs&#39;, &#39;cleik&#39;, &#39;clems&#39;, &#39;clepe&#39;, &#39;clept&#39;, &#39;cleve&#39;, &#39;clews&#39;, &#39;clies&#39;, &#39;clift&#39;, &#39;clime&#39;, &#39;cline&#39;, &#39;clint&#39;, &#39;clipe&#39;, &#39;clips&#39;, &#39;clipt&#39;, &#39;clits&#39;, &#39;cloam&#39;, &#39;clods&#39;, &#39;cloff&#39;, &#39;clogs&#39;, &#39;cloke&#39;, &#39;clomp&#39;, &#39;clonk&#39;, &#39;clons&#39;, &#39;cloop&#39;, &#39;cloot&#39;, &#39;clops&#39;, &#39;clote&#39;, &#39;clots&#39;, &#39;clour&#39;, &#39;clous&#39;, &#39;clows&#39;, &#39;cloye&#39;, &#39;cloys&#39;, &#39;cloze&#39;, &#39;clubs&#39;, &#39;clues&#39;, &#39;cluey&#39;, &#39;clunk&#39;, &#39;clype&#39;, &#39;coact&#39;, &#39;coady&#39;, &#39;coals&#39;, &#39;coaly&#39;, &#39;coapt&#39;, &#39;coate&#39;, &#39;coati&#39;, &#39;coats&#39;, &#39;cobbs&#39;, &#39;cobby&#39;, &#39;coble&#39;, &#39;cocas&#39;, &#39;cocci&#39;, &#39;cocco&#39;, &#39;cocks&#39;, &#39;cocky&#39;, &#39;cocos&#39;, &#39;codas&#39;, &#39;coden&#39;, &#39;coder&#39;, &#39;codes&#39;, &#39;codex&#39;, &#39;codon&#39;, &#39;coeds&#39;, &#39;coffs&#39;, &#39;cogie&#39;, &#39;cogon&#39;, &#39;cogue&#39;, &#39;cohen&#39;, &#39;cohoe&#39;, &#39;cohog&#39;, &#39;cohos&#39;, &#39;coifs&#39;, &#39;coign&#39;, &#39;coils&#39;, &#39;coins&#39;, &#39;coirs&#39;, &#39;coits&#39;, &#39;cokes&#39;, &#39;colas&#39;, &#39;colby&#39;, &#39;colds&#39;, &#39;coles&#39;, &#39;coley&#39;, &#39;colin&#39;, &#39;colls&#39;, &#39;colly&#39;, &#39;colog&#39;, &#39;colts&#39;, &#39;comae&#39;, &#39;comal&#39;, &#39;comas&#39;, &#39;combe&#39;, &#39;combi&#39;, &#39;combo&#39;, &#39;combs&#39;, &#39;comby&#39;, &#39;comer&#39;, &#39;comes&#39;, &#39;comix&#39;, &#39;commo&#39;, &#39;comms&#39;, &#39;commy&#39;, &#39;compo&#39;, &#39;comps&#39;, &#39;compt&#39;, &#39;comte&#39;, &#39;comus&#39;, &#39;cones&#39;, &#39;coney&#39;, &#39;confs&#39;, &#39;conge&#39;, &#39;congo&#39;, &#39;conin&#39;, &#39;conks&#39;, &#39;conky&#39;, &#39;conne&#39;, &#39;conns&#39;, &#39;conte&#39;, &#39;conto&#39;, &#39;conus&#39;, &#39;convo&#39;, &#39;cooch&#39;, &#39;cooee&#39;, &#39;cooer&#39;, &#39;cooey&#39;, &#39;coofs&#39;, &#39;cooks&#39;, &#39;cooky&#39;, &#39;cools&#39;, &#39;cooly&#39;, &#39;cooms&#39;, &#39;coomy&#39;, &#39;coons&#39;, &#39;coops&#39;, &#39;coopt&#39;, &#39;coost&#39;, &#39;coots&#39;, &#39;cooze&#39;, &#39;copal&#39;, &#39;copay&#39;, &#39;copen&#39;, &#39;coper&#39;, &#39;copes&#39;, &#39;coppy&#39;, &#39;copsy&#39;, &#39;coqui&#39;, &#39;coram&#39;, &#39;corbe&#39;, &#39;corby&#39;, &#39;cords&#39;, &#39;cores&#39;, &#39;corey&#39;, &#39;corgi&#39;, &#39;corks&#39;, &#39;corky&#39;, &#39;corms&#39;, &#39;corni&#39;, &#39;corno&#39;, &#39;corns&#39;, &#39;cornu&#39;, &#39;corps&#39;, &#39;corse&#39;, &#39;corso&#39;, &#39;coses&#39;, &#39;coset&#39;, &#39;cosey&#39;, &#39;cosie&#39;, &#39;coste&#39;, &#39;costs&#39;, &#39;cotan&#39;, &#39;cotes&#39;, &#39;coths&#39;, &#39;cotts&#39;, &#39;coude&#39;, &#39;coups&#39;, &#39;coure&#39;, &#39;cours&#39;, &#39;couth&#39;, &#39;coves&#39;, &#39;covin&#39;, &#39;cowal&#39;, &#39;cowan&#39;, &#39;cowks&#39;, &#39;cowls&#39;, &#39;cowps&#39;, &#39;cowry&#39;, &#39;coxae&#39;, &#39;coxal&#39;, &#39;coxes&#39;, &#39;coyau&#39;, &#39;coyer&#39;, &#39;coypu&#39;, &#39;cozen&#39;, &#39;cozes&#39;, &#39;cozey&#39;, &#39;cozie&#39;, &#39;craal&#39;, &#39;crabs&#39;, &#39;crags&#39;, &#39;craig&#39;, &#39;crake&#39;, &#39;crame&#39;, &#39;crams&#39;, &#39;crans&#39;, &#39;crape&#39;, &#39;craps&#39;, &#39;crapy&#39;, &#39;crare&#39;, &#39;craws&#39;, &#39;crays&#39;, &#39;creds&#39;, &#39;creel&#39;, &#39;crees&#39;, &#39;crems&#39;, &#39;creps&#39;, &#39;crepy&#39;, &#39;crewe&#39;, &#39;crews&#39;, &#39;crias&#39;, &#39;cribs&#39;, &#39;cries&#39;, &#39;crims&#39;, &#39;crine&#39;, &#39;crios&#39;, &#39;cripe&#39;, &#39;crips&#39;, &#39;crise&#39;, &#39;crith&#39;, &#39;crits&#39;, &#39;croci&#39;, &#39;crocs&#39;, &#39;croft&#39;, &#39;crogs&#39;, &#39;crome&#39;, &#39;cronk&#39;, &#39;crons&#39;, &#39;crool&#39;, &#39;croon&#39;, &#39;crops&#39;, &#39;crore&#39;, &#39;crost&#39;, &#39;crout&#39;, &#39;crows&#39;, &#39;croze&#39;, &#39;cruck&#39;, &#39;crudo&#39;, &#39;cruds&#39;, &#39;crudy&#39;, &#39;crues&#39;, &#39;cruet&#39;, &#39;cruft&#39;, &#39;crunk&#39;, &#39;cruor&#39;, &#39;cruse&#39;, &#39;crusy&#39;, &#39;cruve&#39;, &#39;crwth&#39;, &#39;cryer&#39;, &#39;ctene&#39;, &#39;cubby&#39;, &#39;cuber&#39;, &#39;cubes&#39;, &#39;cubit&#39;, &#39;cuddy&#39;, &#39;cuffo&#39;, &#39;cuffs&#39;, &#39;cuifs&#39;, &#39;cuing&#39;, &#39;cuish&#39;, &#39;cuits&#39;, &#39;cukes&#39;, &#39;culch&#39;, &#39;culet&#39;, &#39;culex&#39;, &#39;culls&#39;, &#39;cully&#39;, &#39;culms&#39;, &#39;culti&#39;, &#39;cults&#39;, &#39;culty&#39;, &#39;cundy&#39;, &#39;cunei&#39;, &#39;cunit&#39;, &#39;cunts&#39;, &#39;cupel&#39;, &#39;cuppy&#39;, &#39;curat&#39;, &#39;curbs&#39;, &#39;curch&#39;, &#39;curds&#39;, &#39;curdy&#39;, &#39;curer&#39;, &#39;cures&#39;, &#39;curet&#39;, &#39;curfs&#39;, &#39;curie&#39;, &#39;curli&#39;, &#39;curls&#39;, &#39;curns&#39;, &#39;curny&#39;, &#39;currs&#39;, &#39;cursi&#39;, &#39;curst&#39;, &#39;cushy&#39;, &#39;cusks&#39;, &#39;cusps&#39;, &#39;cuspy&#39;, &#39;cusso&#39;, &#39;cusum&#39;, &#39;cutch&#39;, &#39;cuter&#39;, &#39;cutes&#39;, &#39;cutey&#39;, &#39;cutin&#39;, &#39;cutis&#39;, &#39;cutto&#39;, &#39;cutty&#39;, &#39;cutup&#39;, &#39;cuvee&#39;, &#39;cuzes&#39;, &#39;cwtch&#39;, &#39;cyano&#39;, &#39;cyans&#39;, &#39;cycas&#39;, &#39;cyclo&#39;, &#39;cyder&#39;, &#39;cylix&#39;, &#39;cymae&#39;, &#39;cymar&#39;, &#39;cymas&#39;, &#39;cymes&#39;, &#39;cymol&#39;, &#39;cysts&#39;, &#39;cytes&#39;, &#39;cyton&#39;, &#39;czars&#39;, &#39;daals&#39;, &#39;daces&#39;, &#39;dacks&#39;, &#39;dadah&#39;, &#39;dadas&#39;, &#39;dados&#39;, &#39;daffs&#39;, &#39;daffy&#39;, &#39;daggy&#39;, &#39;dagos&#39;, &#39;dahls&#39;, &#39;daiko&#39;, &#39;daine&#39;, &#39;daint&#39;, &#39;daker&#39;, &#39;dales&#39;, &#39;dalis&#39;, &#39;dalle&#39;, &#39;dalts&#39;, &#39;daman&#39;, &#39;damar&#39;, &#39;dames&#39;, &#39;damme&#39;, &#39;damns&#39;, &#39;damps&#39;, &#39;dampy&#39;, &#39;dancy&#39;, &#39;dangs&#39;, &#39;danio&#39;, &#39;danks&#39;, &#39;danny&#39;, &#39;dants&#39;, &#39;daraf&#39;, &#39;darbs&#39;, &#39;darcy&#39;, &#39;darer&#39;, &#39;dares&#39;, &#39;dargs&#39;, &#39;daris&#39;, &#39;darks&#39;, &#39;darky&#39;, &#39;darns&#39;, &#39;darre&#39;, &#39;darts&#39;, &#39;darzi&#39;, &#39;dashi&#39;, &#39;dashy&#39;, &#39;datal&#39;, &#39;dater&#39;, &#39;dates&#39;, &#39;datos&#39;, &#39;datto&#39;, &#39;daube&#39;, &#39;daubs&#39;, &#39;dauby&#39;, &#39;dauds&#39;, &#39;dault&#39;, &#39;daurs&#39;, &#39;dauts&#39;, &#39;daven&#39;, &#39;davit&#39;, &#39;dawah&#39;, &#39;dawds&#39;, &#39;dawen&#39;, &#39;dawks&#39;, &#39;dawns&#39;, &#39;dawts&#39;, &#39;dayan&#39;, &#39;daych&#39;, &#39;daynt&#39;, &#39;dazer&#39;, &#39;dazes&#39;, &#39;deads&#39;, &#39;deair&#39;, &#39;deals&#39;, &#39;deans&#39;, &#39;deare&#39;, &#39;dearn&#39;, &#39;dears&#39;, &#39;deary&#39;, &#39;deash&#39;, &#39;deave&#39;, &#39;deaws&#39;, &#39;deawy&#39;, &#39;debag&#39;, &#39;debby&#39;, &#39;debel&#39;, &#39;debes&#39;, &#39;debts&#39;, &#39;debur&#39;, &#39;debus&#39;, &#39;debye&#39;, &#39;decaf&#39;, &#39;decan&#39;, &#39;decko&#39;, &#39;decks&#39;, &#39;decos&#39;, &#39;dedal&#39;, &#39;deeds&#39;, &#39;deedy&#39;, &#39;deely&#39;, &#39;deems&#39;, &#39;deens&#39;, &#39;deeps&#39;, &#39;deere&#39;, &#39;deers&#39;, &#39;deets&#39;, &#39;deeve&#39;, &#39;deevs&#39;, &#39;defat&#39;, &#39;deffo&#39;, &#39;defis&#39;, &#39;defog&#39;, &#39;degas&#39;, &#39;degum&#39;, &#39;degus&#39;, &#39;deice&#39;, &#39;deids&#39;, &#39;deify&#39;, &#39;deils&#39;, &#39;deism&#39;, &#39;deist&#39;, &#39;dekes&#39;, &#39;dekko&#39;, &#39;deles&#39;, &#39;delfs&#39;, &#39;delft&#39;, &#39;delis&#39;, &#39;dells&#39;, &#39;delly&#39;, &#39;delos&#39;, &#39;delph&#39;, &#39;delts&#39;, &#39;deman&#39;, &#39;demes&#39;, &#39;demit&#39;, &#39;demoi&#39;, &#39;demos&#39;, &#39;dempt&#39;, &#39;denar&#39;, &#39;denay&#39;, &#39;dench&#39;, &#39;denes&#39;, &#39;denet&#39;, &#39;denis&#39;, &#39;dents&#39;, &#39;deoxy&#39;, &#39;derat&#39;, &#39;deray&#39;, &#39;deres&#39;, &#39;derig&#39;, &#39;derms&#39;, &#39;derns&#39;, &#39;derny&#39;, &#39;deros&#39;, &#39;derro&#39;, &#39;derry&#39;, &#39;derth&#39;, &#39;dervs&#39;, &#39;desex&#39;, &#39;deshi&#39;, &#39;desis&#39;, &#39;desks&#39;, &#39;desse&#39;, &#39;devas&#39;, &#39;devel&#39;, &#39;devis&#39;, &#39;devon&#39;, &#39;devos&#39;, &#39;devot&#39;, &#39;dewan&#39;, &#39;dewar&#39;, &#39;dewax&#39;, &#39;dexes&#39;, &#39;dexie&#39;, &#39;dhaks&#39;, &#39;dhals&#39;, &#39;dhikr&#39;, &#39;dhobi&#39;, &#39;dhole&#39;, &#39;dholl&#39;, &#39;dhols&#39;, &#39;dhoti&#39;, &#39;dhows&#39;, &#39;dhuti&#39;, &#39;diact&#39;, &#39;dials&#39;, &#39;diane&#39;, &#39;diazo&#39;, &#39;dibbs&#39;, &#39;dicer&#39;, &#39;dices&#39;, &#39;dicht&#39;, &#39;dicks&#39;, &#39;dicky&#39;, &#39;dicot&#39;, &#39;dicts&#39;, &#39;dicty&#39;, &#39;diddy&#39;, &#39;didie&#39;, &#39;didos&#39;, &#39;didst&#39;, &#39;diebs&#39;, &#39;diels&#39;, &#39;diene&#39;, &#39;diets&#39;, &#39;diffs&#39;, &#39;dight&#39;, &#39;dikas&#39;, &#39;diker&#39;, &#39;dikes&#39;, &#39;dikey&#39;, &#39;dildo&#39;, &#39;dilli&#39;, &#39;dills&#39;, &#39;dimbo&#39;, &#39;dimer&#39;, &#39;dimes&#39;, &#39;dimps&#39;, &#39;dinar&#39;, &#39;dines&#39;, &#39;dinge&#39;, &#39;dings&#39;, &#39;dinks&#39;, &#39;dinky&#39;, &#39;dinos&#39;, &#39;dints&#39;, &#39;diols&#39;, &#39;dippy&#39;, &#39;dipso&#39;, &#39;diram&#39;, &#39;direr&#39;, &#39;dirke&#39;, &#39;dirks&#39;, &#39;dirls&#39;, &#39;dirts&#39;, &#39;disas&#39;, &#39;disci&#39;, &#39;discs&#39;, &#39;dishy&#39;, &#39;disks&#39;, &#39;disme&#39;, &#39;dital&#39;, &#39;ditas&#39;, &#39;dites&#39;, &#39;ditsy&#39;, &#39;ditts&#39;, &#39;ditzy&#39;, &#39;divan&#39;, &#39;divas&#39;, &#39;dives&#39;, &#39;divis&#39;, &#39;divos&#39;, &#39;divot&#39;, &#39;divvy&#39;, &#39;diwan&#39;, &#39;dixie&#39;, &#39;dixit&#39;, &#39;diyas&#39;, &#39;dizen&#39;, &#39;djinn&#39;, &#39;djins&#39;, &#39;doabs&#39;, &#39;doats&#39;, &#39;dobby&#39;, &#39;dobes&#39;, &#39;dobie&#39;, &#39;dobro&#39;, &#39;docht&#39;, &#39;docks&#39;, &#39;docos&#39;, &#39;docus&#39;, &#39;doddy&#39;, &#39;dodos&#39;, &#39;doeks&#39;, &#39;doers&#39;, &#39;doest&#39;, &#39;doeth&#39;, &#39;doffs&#39;, &#39;dogan&#39;, &#39;doges&#39;, &#39;dogey&#39;, &#39;doggo&#39;, &#39;doggy&#39;, &#39;dogie&#39;, &#39;dohyo&#39;, &#39;doilt&#39;, &#39;doily&#39;, &#39;doits&#39;, &#39;dojos&#39;, &#39;dolce&#39;, &#39;dolci&#39;, &#39;doles&#39;, &#39;dolls&#39;, &#39;dolor&#39;, &#39;dolos&#39;, &#39;dolts&#39;, &#39;domal&#39;, &#39;domes&#39;, &#39;donah&#39;, &#39;donas&#39;, &#39;donee&#39;, &#39;doner&#39;, &#39;dongs&#39;, &#39;donko&#39;, &#39;donne&#39;, &#39;donny&#39;, &#39;donsy&#39;, &#39;doobs&#39;, &#39;dooce&#39;, &#39;doody&#39;, &#39;dooks&#39;, &#39;doole&#39;, &#39;dools&#39;, &#39;dooly&#39;, &#39;dooms&#39;, &#39;doomy&#39;, &#39;doorn&#39;, &#39;doors&#39;, &#39;doozy&#39;, &#39;dopas&#39;, &#39;doper&#39;, &#39;dopes&#39;, &#39;dorbs&#39;, &#39;doree&#39;, &#39;dores&#39;, &#39;doris&#39;, &#39;dorks&#39;, &#39;dorky&#39;, &#39;dorms&#39;, &#39;dormy&#39;, &#39;dorps&#39;, &#39;dorrs&#39;, &#39;dorse&#39;, &#39;dorts&#39;, &#39;dorty&#39;, &#39;dosai&#39;, &#39;dosas&#39;, &#39;doseh&#39;, &#39;doser&#39;, &#39;doses&#39;, &#39;dotal&#39;, &#39;doter&#39;, &#39;dotes&#39;, &#39;dotty&#39;, &#39;douar&#39;, &#39;douce&#39;, &#39;doucs&#39;, &#39;douks&#39;, &#39;doums&#39;, &#39;doups&#39;, &#39;douse&#39;, &#39;douts&#39;, &#39;doven&#39;, &#39;dover&#39;, &#39;doves&#39;, &#39;dovie&#39;, &#39;dowar&#39;, &#39;dowds&#39;, &#39;dower&#39;, &#39;dowie&#39;, &#39;dowle&#39;, &#39;dowls&#39;, &#39;dowly&#39;, &#39;downs&#39;, &#39;dowps&#39;, &#39;dowse&#39;, &#39;dowts&#39;, &#39;doxes&#39;, &#39;doxie&#39;, &#39;doyen&#39;, &#39;doyly&#39;, &#39;dozer&#39;, &#39;dozes&#39;, &#39;drabs&#39;, &#39;drack&#39;, &#39;draco&#39;, &#39;draff&#39;, &#39;drags&#39;, &#39;drail&#39;, &#39;drams&#39;, &#39;drant&#39;, &#39;draps&#39;, &#39;drats&#39;, &#39;drave&#39;, &#39;draws&#39;, &#39;drays&#39;, &#39;drear&#39;, &#39;dreck&#39;, &#39;dreer&#39;, &#39;drees&#39;, &#39;dregs&#39;, &#39;dreks&#39;, &#39;drent&#39;, &#39;drere&#39;, &#39;drest&#39;, &#39;dreys&#39;, &#39;dribs&#39;, &#39;drice&#39;, &#39;dries&#39;, &#39;drily&#39;, &#39;drips&#39;, &#39;dript&#39;, &#39;droil&#39;, &#39;droke&#39;, &#39;drole&#39;, &#39;drome&#39;, &#39;drony&#39;, &#39;droog&#39;, &#39;drook&#39;, &#39;drops&#39;, &#39;dropt&#39;, &#39;drouk&#39;, &#39;drows&#39;, &#39;drubs&#39;, &#39;drugs&#39;, &#39;drums&#39;, &#39;drupe&#39;, &#39;druse&#39;, &#39;drusy&#39;, &#39;druxy&#39;, &#39;dryas&#39;, &#39;dsobo&#39;, &#39;dsomo&#39;, &#39;duads&#39;, &#39;duals&#39;, &#39;duans&#39;, &#39;duars&#39;, &#39;dubbo&#39;, &#39;ducal&#39;, &#39;ducat&#39;, &#39;duces&#39;, &#39;ducks&#39;, &#39;ducky&#39;, &#39;ducts&#39;, &#39;duddy&#39;, &#39;dudes&#39;, &#39;duels&#39;, &#39;duets&#39;, &#39;duett&#39;, &#39;duffs&#39;, &#39;dufus&#39;, &#39;duing&#39;, &#39;duits&#39;, &#39;dukas&#39;, &#39;dukes&#39;, &#39;dulce&#39;, &#39;dules&#39;, &#39;dulls&#39;, &#39;dulse&#39;, &#39;dumas&#39;, &#39;dumbo&#39;, &#39;dumbs&#39;, &#39;dumky&#39;, &#39;dumps&#39;, &#39;dunam&#39;, &#39;dunch&#39;, &#39;dunes&#39;, &#39;dungs&#39;, &#39;dungy&#39;, &#39;dunks&#39;, &#39;dunno&#39;, &#39;dunny&#39;, &#39;dunsh&#39;, &#39;dunts&#39;, &#39;duomi&#39;, &#39;duomo&#39;, &#39;duper&#39;, &#39;dupes&#39;, &#39;duple&#39;, &#39;duply&#39;, &#39;duppy&#39;, &#39;dural&#39;, &#39;duras&#39;, &#39;dures&#39;, &#39;durgy&#39;, &#39;durns&#39;, &#39;duros&#39;, &#39;duroy&#39;, &#39;durrs&#39;, &#39;durry&#39;, &#39;durst&#39;, &#39;durum&#39;, &#39;durzi&#39;, &#39;dusks&#39;, &#39;dusts&#39;, &#39;duxes&#39;, &#39;dwaal&#39;, &#39;dwale&#39;, &#39;dwalm&#39;, &#39;dwams&#39;, &#39;dwang&#39;, &#39;dwaum&#39;, &#39;dwile&#39;, &#39;dwine&#39;, &#39;dyads&#39;, &#39;dyers&#39;, &#39;dykes&#39;, &#39;dykey&#39;, &#39;dykon&#39;, &#39;dynel&#39;, &#39;dynes&#39;, &#39;dzhos&#39;, &#39;eagreism&#39;, &#39;ealed&#39;, &#39;ealesism&#39;, &#39;eaned&#39;, &#39;eardsism&#39;, &#39;eared&#39;, &#39;earlsism&#39;, &#39;earnsism&#39;, &#39;earntism&#39;, &#39;earstism&#39;, &#39;eased&#39;, &#39;easerism&#39;, &#39;easesism&#39;, &#39;easleism&#39;, &#39;eastsism&#39;, &#39;eatheism&#39;, &#39;eaved&#39;, &#39;eavesism&#39;, &#39;ebbed&#39;, &#39;ebbetism&#39;, &#39;ebonsism&#39;, &#39;ebookism&#39;, &#39;ecadsism&#39;, &#39;eched&#39;, &#39;echesism&#39;, &#39;echosism&#39;, &#39;ecrusism&#39;, &#39;edema&#39;, &#39;edged&#39;, &#39;edgerism&#39;, &#39;edgesism&#39;, &#39;edileism&#39;, &#39;editsism&#39;, &#39;educeism&#39;, &#39;eductism&#39;, &#39;eejitism&#39;, &#39;eensyism&#39;, &#39;eevenism&#39;, &#39;eevnsism&#39;, &#39;effed&#39;, &#39;egadsism&#39;, &#39;egersism&#39;, &#39;egestism&#39;, &#39;eggarism&#39;, &#39;egged&#39;, &#39;eggerism&#39;, &#39;egmasism&#39;, &#39;ehingism&#39;, &#39;eiderism&#39;, &#39;eidosism&#39;, &#39;eigneism&#39;, &#39;eiked&#39;, &#39;eikonism&#39;, &#39;eildsism&#39;, &#39;eiselism&#39;, &#39;ejidoism&#39;, &#39;ekkasism&#39;, &#39;elainism&#39;, &#39;eland&#39;, &#39;elansism&#39;, &#39;elchiism&#39;, &#39;eldinism&#39;, &#39;elemiism&#39;, &#39;elfed&#39;, &#39;eliad&#39;, &#39;elintism&#39;, &#39;elmenism&#39;, &#39;elogeism&#39;, &#39;elogyism&#39;, &#39;eloinism&#39;, &#39;elopsism&#39;, &#39;elpeeism&#39;, &#39;elsinism&#39;, &#39;eluteism&#39;, &#39;elvanism&#39;, &#39;elvenism&#39;, &#39;elverism&#39;, &#39;elvesism&#39;, &#39;emacsism&#39;, &#39;embarism&#39;, &#39;embayism&#39;, &#39;embogism&#39;, &#39;embowism&#39;, &#39;emboxism&#39;, &#39;embusism&#39;, &#39;emeerism&#39;, &#39;emend&#39;, &#39;emergism&#39;, &#39;emeryism&#39;, &#39;emeusism&#39;, &#39;emicsism&#39;, &#39;emirsism&#39;, &#39;emitsism&#39;, &#39;emmasism&#39;, &#39;emmerism&#39;, &#39;emmetism&#39;, &#39;emmewism&#39;, &#39;emmysism&#39;, &#39;emojiism&#39;, &#39;emongism&#39;, &#39;emoteism&#39;, &#39;emoveism&#39;, &#39;emptsism&#39;, &#39;emuleism&#39;, &#39;emureism&#39;, &#39;emydeism&#39;, &#39;emydsism&#39;, &#39;enarmism&#39;, &#39;enateism&#39;, &#39;ended&#39;, &#39;enderism&#39;, &#39;endewism&#39;, &#39;endueism&#39;, &#39;enewsism&#39;, &#39;enfixism&#39;, &#39;eniac&#39;, &#39;enlitism&#39;, &#39;enmewism&#39;, &#39;ennogism&#39;, &#39;enokiism&#39;, &#39;enolsism&#39;, &#39;enormism&#39;, &#39;enowsism&#39;, &#39;enrolism&#39;, &#39;ensewism&#39;, &#39;enskyism&#39;, &#39;entia&#39;, &#39;enureism&#39;, &#39;enurnism&#39;, &#39;envoiism&#39;, &#39;enzymism&#39;, &#39;eorlsism&#39;, &#39;eosinism&#39;, &#39;epactism&#39;, &#39;epeesism&#39;, &#39;ephahism&#39;, &#39;ephasism&#39;, &#39;ephod&#39;, &#39;ephorism&#39;, &#39;epicsism&#39;, &#39;epodeism&#39;, &#39;epoptism&#39;, &#39;eprisism&#39;, &#39;equesism&#39;, &#39;equid&#39;, &#39;erbia&#39;, &#39;erevsism&#39;, &#39;ergonism&#39;, &#39;ergosism&#39;, &#39;ergotism&#39;, &#39;erhusism&#39;, &#39;erica&#39;, &#39;erickism&#39;, &#39;ericsism&#39;, &#39;eringism&#39;, &#39;erned&#39;, &#39;ernesism&#39;, &#39;eroseism&#39;, &#39;erred&#39;, &#39;ersesism&#39;, &#39;eructism&#39;, &#39;erugoism&#39;, &#39;eruvsism&#39;, &#39;ervenism&#39;, &#39;ervilism&#39;, &#39;escarism&#39;, &#39;escotism&#39;, &#39;esileism&#39;, &#39;eskarism&#39;, &#39;eskerism&#39;, &#39;esnesism&#39;, &#39;essesism&#39;, &#39;estoc&#39;, &#39;estopism&#39;, &#39;estroism&#39;, &#39;etageism&#39;, &#39;etapeism&#39;, &#39;etatsism&#39;, &#39;etensism&#39;, &#39;ethalism&#39;, &#39;ethneism&#39;, &#39;ethylism&#39;, &#39;eticsism&#39;, &#39;etnasism&#39;, &#39;ettinism&#39;, &#39;ettleism&#39;, &#39;etuisism&#39;, &#39;etweeism&#39;, &#39;etyma&#39;, &#39;eughsism&#39;, &#39;euked&#39;, &#39;eupad&#39;, &#39;eurosism&#39;, &#39;eusolism&#39;, &#39;evensism&#39;, &#39;evertism&#39;, &#39;evetsism&#39;, &#39;evhoeism&#39;, &#39;evilsism&#39;, &#39;eviteism&#39;, &#39;evoheism&#39;, &#39;ewersism&#39;, &#39;ewestism&#39;, &#39;ewhowism&#39;, &#39;ewked&#39;, &#39;examsism&#39;, &#39;exeatism&#39;, &#39;execsism&#39;, &#39;exeemism&#39;, &#39;exemeism&#39;, &#39;exfilism&#39;, &#39;exiesism&#39;, &#39;exineism&#39;, &#39;exingism&#39;, &#39;exitsism&#39;, &#39;exodeism&#39;, &#39;exomeism&#39;, &#39;exonsism&#39;, &#39;expatism&#39;, &#39;exposism&#39;, &#39;exudeism&#39;, &#39;exulsism&#39;, &#39;exurb&#39;, &#39;eyassism&#39;, &#39;eyersism&#39;, &#39;eyotsism&#39;, &#39;eyrasism&#39;, &#39;eyresism&#39;, &#39;eyrieism&#39;, &#39;eyrirism&#39;, &#39;ezineism&#39;, &#39;fabbyism&#39;, &#39;faced&#39;, &#39;facerism&#39;, &#39;facesism&#39;, &#39;facia&#39;, &#39;facta&#39;, &#39;factsism&#39;, &#39;faddyism&#39;, &#39;faded&#39;, &#39;faderism&#39;, &#39;fadesism&#39;, &#39;fadgeism&#39;, &#39;fadosism&#39;, &#39;faena&#39;, &#39;faeryism&#39;, &#39;faffsism&#39;, &#39;faffyism&#39;, &#39;faggyism&#39;, &#39;faginism&#39;, &#39;fagotism&#39;, &#39;faiksism&#39;, &#39;failsism&#39;, &#39;faineism&#39;, &#39;fainsism&#39;, &#39;fairsism&#39;, &#39;faked&#39;, &#39;fakerism&#39;, &#39;fakesism&#39;, &#39;fakeyism&#39;, &#39;fakieism&#39;, &#39;fakirism&#39;, &#39;falajism&#39;, &#39;fallsism&#39;, &#39;famed&#39;, &#39;famesism&#39;, &#39;fanalism&#39;, &#39;fandsism&#39;, &#39;fanesism&#39;, &#39;fanga&#39;, &#39;fangoism&#39;, &#39;fangsism&#39;, &#39;fanksism&#39;, &#39;fanonism&#39;, &#39;fanosism&#39;, &#39;fanumism&#39;, &#39;faqirism&#39;, &#39;farad&#39;, &#39;farciism&#39;, &#39;farcyism&#39;, &#39;fardsism&#39;, &#39;fared&#39;, &#39;farerism&#39;, &#39;faresism&#39;, &#39;farleism&#39;, &#39;farlsism&#39;, &#39;farmsism&#39;, &#39;farosism&#39;, &#39;farroism&#39;, &#39;farseism&#39;, &#39;fartsism&#39;, &#39;fasciism&#39;, &#39;fastiism&#39;, &#39;fastsism&#39;, &#39;fated&#39;, &#39;fatesism&#39;, &#39;fatlyism&#39;, &#39;fatsoism&#39;, &#39;fatwa&#39;, &#39;faughism&#39;, &#39;fauld&#39;, &#39;faunsism&#39;, &#39;faurd&#39;, &#39;fautsism&#39;, &#39;fauveism&#39;, &#39;favasism&#39;, &#39;favelism&#39;, &#39;faverism&#39;, &#39;favesism&#39;, &#39;favusism&#39;, &#39;fawnsism&#39;, &#39;fawnyism&#39;, &#39;faxed&#39;, &#39;faxesism&#39;, &#39;fayed&#39;, &#39;fayerism&#39;, &#39;fayneism&#39;, &#39;fayreism&#39;, &#39;fazed&#39;, &#39;fazesism&#39;, &#39;fealsism&#39;, &#39;feareism&#39;, &#39;fearsism&#39;, &#39;feartism&#39;, &#39;feaseism&#39;, &#39;featsism&#39;, &#39;feazeism&#39;, &#39;fecesism&#39;, &#39;fechtism&#39;, &#39;fecitism&#39;, &#39;fecksism&#39;, &#39;fedexism&#39;, &#39;feebsism&#39;, &#39;feedsism&#39;, &#39;feelsism&#39;, &#39;feensism&#39;, &#39;feersism&#39;, &#39;feeseism&#39;, &#39;feezeism&#39;, &#39;fehmeism&#39;, &#39;feintism&#39;, &#39;feistism&#39;, &#39;felchism&#39;, &#39;felid&#39;, &#39;fellsism&#39;, &#39;fellyism&#39;, &#39;feltsism&#39;, &#39;feltyism&#39;, &#39;femalism&#39;, &#39;femesism&#39;, &#39;femmyism&#39;, &#39;fendsism&#39;, &#39;fendyism&#39;, &#39;fenisism&#39;, &#39;fenksism&#39;, &#39;fennyism&#39;, &#39;fentsism&#39;, &#39;feodsism&#39;, &#39;feoffism&#39;, &#39;fererism&#39;, &#39;feresism&#39;, &#39;feria&#39;, &#39;ferlyism&#39;, &#39;fermiism&#39;, &#39;fermsism&#39;, &#39;fernsism&#39;, &#39;fernyism&#39;, &#39;fesseism&#39;, &#39;festa&#39;, &#39;festsism&#39;, &#39;festyism&#39;, &#39;fetasism&#39;, &#39;feted&#39;, &#39;fetesism&#39;, &#39;fetorism&#39;, &#39;fetta&#39;, &#39;fettsism&#39;, &#39;fetwa&#39;, &#39;feuarism&#39;, &#39;feudsism&#39;, &#39;feued&#39;, &#39;feyed&#39;, &#39;feyerism&#39;, &#39;feylyism&#39;, &#39;fezesism&#39;, &#39;fezzyism&#39;, &#39;fiarsism&#39;, &#39;fiatsism&#39;, &#39;fibroism&#39;, &#39;ficesism&#39;, &#39;ficheism&#39;, &#39;fichuism&#39;, &#39;ficinism&#39;, &#39;ficosism&#39;, &#39;fidesism&#39;, &#39;fidgeism&#39;, &#39;fidosism&#39;, &#39;fiefsism&#39;, &#39;fientism&#39;, &#39;fiereism&#39;, &#39;fiersism&#39;, &#39;fiestism&#39;, &#39;fifed&#39;, &#39;fiferism&#39;, &#39;fifesism&#39;, &#39;fifisism&#39;, &#39;figgyism&#39;, &#39;figosism&#39;, &#39;fiked&#39;, &#39;fikesism&#39;, &#39;filarism&#39;, &#39;filchism&#39;, &#39;filed&#39;, &#39;filesism&#39;, &#39;filiiism&#39;, &#39;filksism&#39;, &#39;filleism&#39;, &#39;filloism&#39;, &#39;fillsism&#39;, &#39;filmiism&#39;, &#39;filmsism&#39;, &#39;filosism&#39;, &#39;filumism&#39;, &#39;finca&#39;, &#39;findsism&#39;, &#39;fined&#39;, &#39;finesism&#39;, &#39;finisism&#39;, &#39;finksism&#39;, &#39;finnyism&#39;, &#39;finosism&#39;, &#39;fiord&#39;, &#39;fiqhsism&#39;, &#39;fiqueism&#39;, &#39;fired&#39;, &#39;firerism&#39;, &#39;firesism&#39;, &#39;firieism&#39;, &#39;firksism&#39;, &#39;firmsism&#39;, &#39;firnsism&#39;, &#39;firryism&#39;, &#39;firthism&#39;, &#39;fiscsism&#39;, &#39;fisksism&#39;, &#39;fistsism&#39;, &#39;fistyism&#39;, &#39;fitchism&#39;, &#39;fitlyism&#39;, &#39;fitna&#39;, &#39;fitteism&#39;, &#39;fittsism&#39;, &#39;fiverism&#39;, &#39;fivesism&#39;, &#39;fixed&#39;, &#39;fixesism&#39;, &#39;fixitism&#39;, &#39;fjeld&#39;, &#39;flabsism&#39;, &#39;flaffism&#39;, &#39;flagsism&#39;, &#39;flaksism&#39;, &#39;flammism&#39;, &#39;flamsism&#39;, &#39;flamyism&#39;, &#39;flaneism&#39;, &#39;flansism&#39;, &#39;flapsism&#39;, &#39;flaryism&#39;, &#39;flatsism&#39;, &#39;flava&#39;, &#39;flawnism&#39;, &#39;flawsism&#39;, &#39;flawyism&#39;, &#39;flaxyism&#39;, &#39;flaysism&#39;, &#39;fleamism&#39;, &#39;fleasism&#39;, &#39;fleekism&#39;, &#39;fleerism&#39;, &#39;fleesism&#39;, &#39;flegsism&#39;, &#39;flemeism&#39;, &#39;fleurism&#39;, &#39;flewsism&#39;, &#39;flexiism&#39;, &#39;flexoism&#39;, &#39;fleysism&#39;, &#39;flicsism&#39;, &#39;flied&#39;, &#39;fliesism&#39;, &#39;flimpism&#39;, &#39;flimsism&#39;, &#39;flipsism&#39;, &#39;flirsism&#39;, &#39;fliskism&#39;, &#39;fliteism&#39;, &#39;flitsism&#39;, &#39;flittism&#39;, &#39;flobsism&#39;, &#39;flocsism&#39;, &#39;floesism&#39;, &#39;flogsism&#39;, &#39;flongism&#39;, &#39;flopsism&#39;, &#39;florsism&#39;, &#39;floryism&#39;, &#39;floshism&#39;, &#39;flota&#39;, &#39;floteism&#39;, &#39;flowsism&#39;, &#39;flubsism&#39;, &#39;flued&#39;, &#39;fluesism&#39;, &#39;flueyism&#39;, &#39;flukyism&#39;, &#39;flumpism&#39;, &#39;fluorism&#39;, &#39;flurrism&#39;, &#39;flutyism&#39;, &#39;fluytism&#39;, &#39;flybyism&#39;, &#39;flypeism&#39;, &#39;flyteism&#39;, &#39;foalsism&#39;, &#39;foamsism&#39;, &#39;foehnism&#39;, &#39;fogeyism&#39;, &#39;fogieism&#39;, &#39;fogleism&#39;, &#39;fogouism&#39;, &#39;fohnsism&#39;, &#39;foidsism&#39;, &#39;foilsism&#39;, &#39;foinsism&#39;, &#39;foldsism&#39;, &#39;foleyism&#39;, &#39;folia&#39;, &#39;folic&#39;, &#39;folieism&#39;, &#39;folksism&#39;, &#39;folkyism&#39;, &#39;fomesism&#39;, &#39;fonda&#39;, &#39;fondsism&#39;, &#39;fonduism&#39;, &#39;fonesism&#39;, &#39;fonlyism&#39;, &#39;fontsism&#39;, &#39;foodsism&#39;, &#39;foodyism&#39;, &#39;foolsism&#39;, &#39;footsism&#39;, &#39;footyism&#39;, &#39;foramism&#39;, &#39;forbsism&#39;, &#39;forbyism&#39;, &#39;fordoism&#39;, &#39;fordsism&#39;, &#39;forelism&#39;, &#39;foresism&#39;, &#39;forexism&#39;, &#39;forksism&#39;, &#39;forkyism&#39;, &#39;formeism&#39;, &#39;formsism&#39;, &#39;fortsism&#39;, &#39;forza&#39;, &#39;forzeism&#39;, &#39;fossa&#39;, &#39;fosseism&#39;, &#39;fouatism&#39;, &#39;foudsism&#39;, &#39;fouerism&#39;, &#39;fouetism&#39;, &#39;fouleism&#39;, &#39;foulsism&#39;, &#39;fountism&#39;, &#39;foursism&#39;, &#39;fouthism&#39;, &#39;fovea&#39;, &#39;fowlsism&#39;, &#39;fowthism&#39;, &#39;foxed&#39;, &#39;foxesism&#39;, &#39;foxieism&#39;, &#39;foyleism&#39;, &#39;foyneism&#39;, &#39;frabsism&#39;, &#39;frackism&#39;, &#39;fractism&#39;, &#39;fragsism&#39;, &#39;fraimism&#39;, &#39;franc&#39;, &#39;frapeism&#39;, &#39;frapsism&#39;, &#39;frassism&#39;, &#39;frateism&#39;, &#39;fratiism&#39;, &#39;fratsism&#39;, &#39;frausism&#39;, &#39;fraysism&#39;, &#39;freesism&#39;, &#39;freetism&#39;, &#39;freitism&#39;, &#39;fremd&#39;, &#39;frena&#39;, &#39;freonism&#39;, &#39;frereism&#39;, &#39;fretsism&#39;, &#39;fribsism&#39;, &#39;frierism&#39;, &#39;friesism&#39;, &#39;frigsism&#39;, &#39;friseism&#39;, &#39;fristism&#39;, &#39;frithism&#39;, &#39;fritsism&#39;, &#39;frittism&#39;, &#39;frizeism&#39;, &#39;frizzism&#39;, &#39;froesism&#39;, &#39;frogsism&#39;, &#39;fronsism&#39;, &#39;froreism&#39;, &#39;frornism&#39;, &#39;froryism&#39;, &#39;froshism&#39;, &#39;frowsism&#39;, &#39;frowyism&#39;, &#39;frugsism&#39;, &#39;frumpism&#39;, &#39;frushism&#39;, &#39;frustism&#39;, &#39;fryerism&#39;, &#39;fubarism&#39;, &#39;fubbyism&#39;, &#39;fubsyism&#39;, &#39;fucksism&#39;, &#39;fucusism&#39;, &#39;fuddyism&#39;, &#39;fudgyism&#39;, &#39;fuelsism&#39;, &#39;fueroism&#39;, &#39;fuffsism&#39;, &#39;fuffyism&#39;, &#39;fugalism&#39;, &#39;fuggyism&#39;, &#39;fugieism&#39;, &#39;fugioism&#39;, &#39;fugleism&#39;, &#39;fuglyism&#39;, &#39;fugusism&#39;, &#39;fujisism&#39;, &#39;fullsism&#39;, &#39;fumed&#39;, &#39;fumerism&#39;, &#39;fumesism&#39;, &#39;fumetism&#39;, &#39;fundiism&#39;, &#39;fundsism&#39;, &#39;fundyism&#39;, &#39;fungoism&#39;, &#39;fungsism&#39;, &#39;funksism&#39;, &#39;furalism&#39;, &#39;furanism&#39;, &#39;furca&#39;, &#39;furlsism&#39;, &#39;furolism&#39;, &#39;furrsism&#39;, &#39;furthism&#39;, &#39;furzeism&#39;, &#39;furzyism&#39;, &#39;fused&#39;, &#39;fuseeism&#39;, &#39;fuselism&#39;, &#39;fusesism&#39;, &#39;fusilism&#39;, &#39;fusksism&#39;, &#39;fustsism&#39;, &#39;fustyism&#39;, &#39;futonism&#39;, &#39;fuzed&#39;, &#39;fuzeeism&#39;, &#39;fuzesism&#39;, &#39;fuzilism&#39;, &#39;fycesism&#39;, &#39;fyked&#39;, &#39;fykesism&#39;, &#39;fylesism&#39;, &#39;fyrdsism&#39;, &#39;fytteism&#39;, &#39;gabba&#39;, &#39;gabbyism&#39;, &#39;gableism&#39;, &#39;gaddiism&#39;, &#39;gadesism&#39;, &#39;gadgeism&#39;, &#39;gadid&#39;, &#39;gadisism&#39;, &#39;gadjeism&#39;, &#39;gadjoism&#39;, &#39;gadsoism&#39;, &#39;gaffsism&#39;, &#39;gaged&#39;, &#39;gagerism&#39;, &#39;gagesism&#39;, &#39;gaidsism&#39;, &#39;gainsism&#39;, &#39;gairsism&#39;, &#39;gaita&#39;, &#39;gaitsism&#39;, &#39;gaittism&#39;, &#39;gajosism&#39;, &#39;galahism&#39;, &#39;galasism&#39;, &#39;galaxism&#39;, &#39;galea&#39;, &#39;galed&#39;, &#39;galesism&#39;, &#39;gallsism&#39;, &#39;gallyism&#39;, &#39;galopism&#39;, &#39;galutism&#39;, &#39;galvoism&#39;, &#39;gamasism&#39;, &#39;gamayism&#39;, &#39;gamba&#39;, &#39;gambeism&#39;, &#39;gamboism&#39;, &#39;gambsism&#39;, &#39;gamed&#39;, &#39;gamesism&#39;, &#39;gameyism&#39;, &#39;gamic&#39;, &#39;gaminism&#39;, &#39;gammeism&#39;, &#39;gammyism&#39;, &#39;gampsism&#39;, &#39;ganchism&#39;, &#39;gandyism&#39;, &#39;ganefism&#39;, &#39;ganevism&#39;, &#39;gangsism&#39;, &#39;ganja&#39;, &#39;ganofism&#39;, &#39;gantsism&#39;, &#39;gaolsism&#39;, &#39;gaped&#39;, &#39;gaperism&#39;, &#39;gapesism&#39;, &#39;gaposism&#39;, &#39;gappyism&#39;, &#39;garbeism&#39;, &#39;garboism&#39;, &#39;garbsism&#39;, &#39;garda&#39;, &#39;garesism&#39;, &#39;garisism&#39;, &#39;garmsism&#39;, &#39;garniism&#39;, &#39;garreism&#39;, &#39;garthism&#39;, &#39;garumism&#39;, &#39;gasesism&#39;, &#39;gaspsism&#39;, &#39;gaspyism&#39;, &#39;gastsism&#39;, &#39;gatchism&#39;, &#39;gated&#39;, &#39;gaterism&#39;, &#39;gatesism&#39;, &#39;gathsism&#39;, &#39;gatorism&#39;, &#39;gauchism&#39;, &#39;gaucyism&#39;, &#39;gaudsism&#39;, &#39;gaujeism&#39;, &#39;gaultism&#39;, &#39;gaumsism&#39;, &#39;gaumyism&#39;, &#39;gaupsism&#39;, &#39;gaursism&#39;, &#39;gaussism&#39;, &#39;gauzyism&#39;, &#39;gavotism&#39;, &#39;gawcyism&#39;, &#39;gawdsism&#39;, &#39;gawksism&#39;, &#39;gawpsism&#39;, &#39;gawsyism&#39;, &#39;gayalism&#39;, &#39;gazalism&#39;, &#39;gazarism&#39;, &#39;gazed&#39;, &#39;gazesism&#39;, &#39;gazonism&#39;, &#39;gazooism&#39;, &#39;gealsism&#39;, &#39;geansism&#39;, &#39;geareism&#39;, &#39;gearsism&#39;, &#39;geatsism&#39;, &#39;geburism&#39;, &#39;gecksism&#39;, &#39;geeksism&#39;, &#39;geepsism&#39;, &#39;geestism&#39;, &#39;geistism&#39;, &#39;geitsism&#39;, &#39;geldsism&#39;, &#39;geleeism&#39;, &#39;gelid&#39;, &#39;gellyism&#39;, &#39;geltsism&#39;, &#39;gemelism&#39;, &#39;gemma&#39;, &#39;gemmyism&#39;, &#39;gemotism&#39;, &#39;genalism&#39;, &#39;genasism&#39;, &#39;genesism&#39;, &#39;genetism&#39;, &#39;genic&#39;, &#39;geniiism&#39;, &#39;genipism&#39;, &#39;gennyism&#39;, &#39;genoa&#39;, &#39;genomism&#39;, &#39;genroism&#39;, &#39;gentsism&#39;, &#39;gentyism&#39;, &#39;genua&#39;, &#39;genusism&#39;, &#39;geodeism&#39;, &#39;geoid&#39;, &#39;gerahism&#39;, &#39;gerbeism&#39;, &#39;geresism&#39;, &#39;gerleism&#39;, &#39;germsism&#39;, &#39;germyism&#39;, &#39;gerneism&#39;, &#39;gesseism&#39;, &#39;gessoism&#39;, &#39;gesteism&#39;, &#39;gestsism&#39;, &#39;getasism&#39;, &#39;getupism&#39;, &#39;geumsism&#39;, &#39;geyanism&#39;, &#39;geyerism&#39;, &#39;ghastism&#39;, &#39;ghatsism&#39;, &#39;ghautism&#39;, &#39;ghaziism&#39;, &#39;gheesism&#39;, &#39;ghestism&#39;, &#39;ghyllism&#39;, &#39;gibed&#39;, &#39;gibelism&#39;, &#39;giberism&#39;, &#39;gibesism&#39;, &#39;gibliism&#39;, &#39;gibusism&#39;, &#39;giftsism&#39;, &#39;gigasism&#39;, &#39;gigheism&#39;, &#39;gigotism&#39;, &#39;gigueism&#39;, &#39;gilasism&#39;, &#39;gildsism&#39;, &#39;giletism&#39;, &#39;gillsism&#39;, &#39;gillyism&#39;, &#39;gilpyism&#39;, &#39;giltsism&#39;, &#39;gimelism&#39;, &#39;gimmeism&#39;, &#39;gimpsism&#39;, &#39;gimpyism&#39;, &#39;ginchism&#39;, &#39;gingeism&#39;, &#39;gingsism&#39;, &#39;ginksism&#39;, &#39;ginnyism&#39;, &#39;ginzoism&#39;, &#39;giponism&#39;, &#39;gippoism&#39;, &#39;gippyism&#39;, &#39;girdsism&#39;, &#39;girlsism&#39;, &#39;girnsism&#39;, &#39;gironism&#39;, &#39;girosism&#39;, &#39;girrsism&#39;, &#39;girshism&#39;, &#39;girtsism&#39;, &#39;gismoism&#39;, &#39;gismsism&#39;, &#39;gistsism&#39;, &#39;gitchism&#39;, &#39;gitesism&#39;, &#39;giustism&#39;, &#39;gived&#39;, &#39;givesism&#39;, &#39;gizmoism&#39;, &#39;glaceism&#39;, &#39;gladsism&#39;, &#39;gladyism&#39;, &#39;glaikism&#39;, &#39;glairism&#39;, &#39;glamsism&#39;, &#39;glansism&#39;, &#39;glaryism&#39;, &#39;glaumism&#39;, &#39;glaurism&#39;, &#39;glazyism&#39;, &#39;gleba&#39;, &#39;glebeism&#39;, &#39;glebyism&#39;, &#39;gledeism&#39;, &#39;gledsism&#39;, &#39;gleed&#39;, &#39;gleekism&#39;, &#39;gleesism&#39;, &#39;gleetism&#39;, &#39;gleisism&#39;, &#39;glensism&#39;, &#39;glentism&#39;, &#39;gleysism&#39;, &#39;glialism&#39;, &#39;gliasism&#39;, &#39;glibsism&#39;, &#39;gliffism&#39;, &#39;gliftism&#39;, &#39;glikeism&#39;, &#39;glimeism&#39;, &#39;glimsism&#39;, &#39;gliskism&#39;, &#39;glitsism&#39;, &#39;glitzism&#39;, &#39;gloamism&#39;, &#39;globiism&#39;, &#39;globsism&#39;, &#39;globyism&#39;, &#39;glodeism&#39;, &#39;gloggism&#39;, &#39;glomsism&#39;, &#39;gloopism&#39;, &#39;glopsism&#39;, &#39;glostism&#39;, &#39;gloutism&#39;, &#39;glowsism&#39;, &#39;glozeism&#39;, &#39;glued&#39;, &#39;gluerism&#39;, &#39;gluesism&#39;, &#39;glueyism&#39;, &#39;glugsism&#39;, &#39;glumeism&#39;, &#39;glumsism&#39;, &#39;gluonism&#39;, &#39;gluteism&#39;, &#39;glutsism&#39;, &#39;gnarlism&#39;, &#39;gnarrism&#39;, &#39;gnarsism&#39;, &#39;gnatsism&#39;, &#39;gnawnism&#39;, &#39;gnawsism&#39;, &#39;gnowsism&#39;, &#39;goadsism&#39;, &#39;goafsism&#39;, &#39;goalsism&#39;, &#39;goaryism&#39;, &#39;goatsism&#39;, &#39;goatyism&#39;, &#39;gobanism&#39;, &#39;gobarism&#39;, &#39;gobbiism&#39;, &#39;gobboism&#39;, &#39;gobbyism&#39;, &#39;gobisism&#39;, &#39;gobosism&#39;, &#39;godetism&#39;, &#39;godsoism&#39;, &#39;goelsism&#39;, &#39;goersism&#39;, &#39;goestism&#39;, &#39;goethism&#39;, &#39;goetyism&#39;, &#39;goferism&#39;, &#39;goffsism&#39;, &#39;gogga&#39;, &#39;gogosism&#39;, &#39;goierism&#39;, &#39;gojisism&#39;, &#39;goldsism&#39;, &#39;goldyism&#39;, &#39;golesism&#39;, &#39;golfsism&#39;, &#39;golpeism&#39;, &#39;golpsism&#39;, &#39;gomboism&#39;, &#39;gomerism&#39;, &#39;gompa&#39;, &#39;gonchism&#39;, &#39;gonefism&#39;, &#39;gongsism&#39;, &#39;gonia&#39;, &#39;gonifism&#39;, &#39;gonksism&#39;, &#39;gonna&#39;, &#39;gonofism&#39;, &#39;gonysism&#39;, &#39;gonzoism&#39;, &#39;goobyism&#39;, &#39;goodsism&#39;, &#39;goofsism&#39;, &#39;googsism&#39;, &#39;gooksism&#39;, &#39;gookyism&#39;, &#39;goold&#39;, &#39;goolsism&#39;, &#39;goolyism&#39;, &#39;goonsism&#39;, &#39;goonyism&#39;, &#39;goopsism&#39;, &#39;goopyism&#39;, &#39;goorsism&#39;, &#39;gooryism&#39;, &#39;goosyism&#39;, &#39;gopakism&#39;, &#39;gopikism&#39;, &#39;goralism&#39;, &#39;gorasism&#39;, &#39;gored&#39;, &#39;goresism&#39;, &#39;gorisism&#39;, &#39;gormsism&#39;, &#39;gormyism&#39;, &#39;gorpsism&#39;, &#39;gorseism&#39;, &#39;gorsyism&#39;, &#39;goshtism&#39;, &#39;gosseism&#39;, &#39;gotchism&#39;, &#39;gothsism&#39;, &#39;gothyism&#39;, &#39;gotta&#39;, &#39;gouchism&#39;, &#39;gouksism&#39;, &#39;goura&#39;, &#39;goutsism&#39;, &#39;goutyism&#39;, &#39;gowanism&#39;, &#39;gowdsism&#39;, &#39;gowfsism&#39;, &#39;gowksism&#39;, &#39;gowlsism&#39;, &#39;gownsism&#39;, &#39;goxesism&#39;, &#39;goyimism&#39;, &#39;goyleism&#39;, &#39;graalism&#39;, &#39;grabsism&#39;, &#39;gradsism&#39;, &#39;graffism&#39;, &#39;graipism&#39;, &#39;grama&#39;, &#39;grameism&#39;, &#39;grampism&#39;, &#39;gramsism&#39;, &#39;grana&#39;, &#39;gransism&#39;, &#39;grapyism&#39;, &#39;gravsism&#39;, &#39;graysism&#39;, &#39;grebeism&#39;, &#39;greboism&#39;, &#39;greceism&#39;, &#39;greekism&#39;, &#39;greesism&#39;, &#39;gregeism&#39;, &#39;gregoism&#39;, &#39;greinism&#39;, &#39;grensism&#39;, &#39;greseism&#39;, &#39;greveism&#39;, &#39;grewsism&#39;, &#39;greysism&#39;, &#39;griceism&#39;, &#39;grideism&#39;, &#39;gridsism&#39;, &#39;griffism&#39;, &#39;griftism&#39;, &#39;grigsism&#39;, &#39;grikeism&#39;, &#39;grinsism&#39;, &#39;griotism&#39;, &#39;gripsism&#39;, &#39;griptism&#39;, &#39;gripyism&#39;, &#39;griseism&#39;, &#39;gristism&#39;, &#39;grisyism&#39;, &#39;grithism&#39;, &#39;gritsism&#39;, &#39;grizeism&#39;, &#39;groatism&#39;, &#39;grodyism&#39;, &#39;grogsism&#39;, &#39;groksism&#39;, &#39;groma&#39;, &#39;groneism&#39;, &#39;groofism&#39;, &#39;groszism&#39;, &#39;grotsism&#39;, &#39;groufism&#39;, &#39;grovyism&#39;, &#39;growsism&#39;, &#39;grrlsism&#39;, &#39;grrrlism&#39;, &#39;grubsism&#39;, &#39;grued&#39;, &#39;gruesism&#39;, &#39;grufeism&#39;, &#39;grumeism&#39;, &#39;grumpism&#39;, &#39;grund&#39;, &#39;gryceism&#39;, &#39;grydeism&#39;, &#39;grykeism&#39;, &#39;grypeism&#39;, &#39;gryptism&#39;, &#39;guacoism&#39;, &#39;guana&#39;, &#39;guanoism&#39;, &#39;guansism&#39;, &#39;guarsism&#39;, &#39;gucksism&#39;, &#39;guckyism&#39;, &#39;gudesism&#39;, &#39;guffsism&#39;, &#39;gugasism&#39;, &#39;guidsism&#39;, &#39;guimpism&#39;, &#39;guiroism&#39;, &#39;gulagism&#39;, &#39;gularism&#39;, &#39;gulasism&#39;, &#39;gulesism&#39;, &#39;guletism&#39;, &#39;gulfsism&#39;, &#39;gulfyism&#39;, &#39;gullsism&#39;, &#39;gulphism&#39;, &#39;gulpsism&#39;, &#39;gulpyism&#39;, &#39;gumma&#39;, &#39;gummiism&#39;, &#39;gumpsism&#39;, &#39;gundyism&#39;, &#39;gungeism&#39;, &#39;gungyism&#39;, &#39;gunksism&#39;, &#39;gunkyism&#39;, &#39;gunnyism&#39;, &#39;guqinism&#39;, &#39;gurdyism&#39;, &#39;gurgeism&#39;, &#39;gurlsism&#39;, &#39;gurlyism&#39;, &#39;gurnsism&#39;, &#39;gurryism&#39;, &#39;gurshism&#39;, &#39;gurusism&#39;, &#39;gushyism&#39;, &#39;gusla&#39;, &#39;gusleism&#39;, &#39;gusliism&#39;, &#39;gussyism&#39;, &#39;gustsism&#39;, &#39;gutsyism&#39;, &#39;gutta&#39;, &#39;guttyism&#39;, &#39;guyed&#39;, &#39;guyleism&#39;, &#39;guyotism&#39;, &#39;guyseism&#39;, &#39;gwineism&#39;, &#39;gyalsism&#39;, &#39;gyansism&#39;, &#39;gybed&#39;, &#39;gybesism&#39;, &#39;gyeld&#39;, &#39;gympsism&#39;, &#39;gynaeism&#39;, &#39;gynieism&#39;, &#39;gynnyism&#39;, &#39;gynosism&#39;, &#39;gyoza&#39;, &#39;gyposism&#39;, &#39;gyppoism&#39;, &#39;gyppyism&#39;, &#39;gyralism&#39;, &#39;gyred&#39;, &#39;gyresism&#39;, &#39;gyronism&#39;, &#39;gyrosism&#39;, &#39;gyrusism&#39;, &#39;gytesism&#39;, &#39;gyved&#39;, &#39;gyvesism&#39;, &#39;haafsism&#39;, &#39;haarsism&#39;, &#39;hableism&#39;, &#39;habusism&#39;, &#39;hacekism&#39;, &#39;hacksism&#39;, &#39;hadalism&#39;, &#39;haded&#39;, &#39;hadesism&#39;, &#39;hadjiism&#39;, &#39;hadstism&#39;, &#39;haemsism&#39;, &#39;haetsism&#39;, &#39;haffsism&#39;, &#39;hafizism&#39;, &#39;haftsism&#39;, &#39;haggsism&#39;, &#39;hahasism&#39;, &#39;haickism&#39;, &#39;haika&#39;, &#39;haiksism&#39;, &#39;haikuism&#39;, &#39;hailsism&#39;, &#39;hailyism&#39;, &#39;hainsism&#39;, &#39;haintism&#39;, &#39;hairsism&#39;, &#39;haithism&#39;, &#39;hajesism&#39;, &#39;hajisism&#39;, &#39;hajjiism&#39;, &#39;hakamism&#39;, &#39;hakasism&#39;, &#39;hakea&#39;, &#39;hakesism&#39;, &#39;hakimism&#39;, &#39;hakusism&#39;, &#39;halalism&#39;, &#39;haled&#39;, &#39;halerism&#39;, &#39;halesism&#39;, &#39;halfa&#39;, &#39;halfsism&#39;, &#39;halid&#39;, &#39;halloism&#39;, &#39;hallsism&#39;, &#39;halma&#39;, &#39;halmsism&#39;, &#39;halonism&#39;, &#39;halosism&#39;, &#39;halseism&#39;, &#39;haltsism&#39;, &#39;halva&#39;, &#39;halwa&#39;, &#39;hamalism&#39;, &#39;hamba&#39;, &#39;hamed&#39;, &#39;hamesism&#39;, &#39;hammyism&#39;, &#39;hamza&#39;, &#39;hanapism&#39;, &#39;hanceism&#39;, &#39;hanchism&#39;, &#39;handsism&#39;, &#39;hangiism&#39;, &#39;hangsism&#39;, &#39;hanksism&#39;, &#39;hankyism&#39;, &#39;hansa&#39;, &#39;hanseism&#39;, &#39;hantsism&#39;, &#39;haoleism&#39;, &#39;haoma&#39;, &#39;hapaxism&#39;, &#39;haplyism&#39;, &#39;happiism&#39;, &#39;hapusism&#39;, &#39;haramism&#39;, &#39;hardsism&#39;, &#39;hared&#39;, &#39;haresism&#39;, &#39;harimism&#39;, &#39;harksism&#39;, &#39;harlsism&#39;, &#39;harmsism&#39;, &#39;harnsism&#39;, &#39;harosism&#39;, &#39;harpsism&#39;, &#39;hartsism&#39;, &#39;hashyism&#39;, &#39;hasksism&#39;, &#39;haspsism&#39;, &#39;hasta&#39;, &#39;hated&#39;, &#39;hatesism&#39;, &#39;hatha&#39;, &#39;haudsism&#39;, &#39;haufsism&#39;, &#39;haughism&#39;, &#39;hauld&#39;, &#39;haulmism&#39;, &#39;haulsism&#39;, &#39;haultism&#39;, &#39;haunsism&#39;, &#39;hauseism&#39;, &#39;haverism&#39;, &#39;havesism&#39;, &#39;hawed&#39;, &#39;hawksism&#39;, &#39;hawmsism&#39;, &#39;hawseism&#39;, &#39;hayed&#39;, &#39;hayerism&#39;, &#39;hayeyism&#39;, &#39;hayleism&#39;, &#39;hazanism&#39;, &#39;hazed&#39;, &#39;hazerism&#39;, &#39;hazesism&#39;, &#39;headsism&#39;, &#39;heald&#39;, &#39;healsism&#39;, &#39;heameism&#39;, &#39;heapsism&#39;, &#39;heapyism&#39;, &#39;heareism&#39;, &#39;hearsism&#39;, &#39;heastism&#39;, &#39;heatsism&#39;, &#39;hebenism&#39;, &#39;hebesism&#39;, &#39;hechtism&#39;, &#39;hecksism&#39;, &#39;hederism&#39;, &#39;hedgyism&#39;, &#39;heedsism&#39;, &#39;heedyism&#39;, &#39;heelsism&#39;, &#39;heezeism&#39;, &#39;hefteism&#39;, &#39;heftsism&#39;, &#39;heidsism&#39;, &#39;heighism&#39;, &#39;heilsism&#39;, &#39;heirsism&#39;, &#39;hejab&#39;, &#39;hejra&#39;, &#39;heled&#39;, &#39;helesism&#39;, &#39;helioism&#39;, &#39;hellsism&#39;, &#39;helmsism&#39;, &#39;helosism&#39;, &#39;helotism&#39;, &#39;helpsism&#39;, &#39;helveism&#39;, &#39;hemalism&#39;, &#39;hemesism&#39;, &#39;hemic&#39;, &#39;heminism&#39;, &#39;hempsism&#39;, &#39;hempyism&#39;, &#39;henchism&#39;, &#39;hendsism&#39;, &#39;hengeism&#39;, &#39;henna&#39;, &#39;hennyism&#39;, &#39;henryism&#39;, &#39;hentsism&#39;, &#39;heparism&#39;, &#39;herbsism&#39;, &#39;herbyism&#39;, &#39;herdsism&#39;, &#39;heresism&#39;, &#39;herlsism&#39;, &#39;herma&#39;, &#39;hermsism&#39;, &#39;hernsism&#39;, &#39;herosism&#39;, &#39;herryism&#39;, &#39;herseism&#39;, &#39;hertzism&#39;, &#39;heryeism&#39;, &#39;hespsism&#39;, &#39;hestsism&#39;, &#39;hetesism&#39;, &#39;hethsism&#39;, &#39;heuchism&#39;, &#39;heughism&#39;, &#39;hevea&#39;, &#39;hewed&#39;, &#39;hewerism&#39;, &#39;hewghism&#39;, &#39;hexad&#39;, &#39;hexed&#39;, &#39;hexerism&#39;, &#39;hexesism&#39;, &#39;hexylism&#39;, &#39;heyed&#39;, &#39;hiantism&#39;, &#39;hicksism&#39;, &#39;hided&#39;, &#39;hiderism&#39;, &#39;hidesism&#39;, &#39;hiemsism&#39;, &#39;highsism&#39;, &#39;hightism&#39;, &#39;hijab&#39;, &#39;hijra&#39;, &#39;hiked&#39;, &#39;hikerism&#39;, &#39;hikesism&#39;, &#39;hikoiism&#39;, &#39;hilarism&#39;, &#39;hilchism&#39;, &#39;hilloism&#39;, &#39;hillsism&#39;, &#39;hiltsism&#39;, &#39;hilumism&#39;, &#39;hilusism&#39;, &#39;himboism&#39;, &#39;hinauism&#39;, &#39;hindsism&#39;, &#39;hingsism&#39;, &#39;hinkyism&#39;, &#39;hinnyism&#39;, &#39;hintsism&#39;, &#39;hioisism&#39;, &#39;hiplyism&#39;, &#39;hired&#39;, &#39;hireeism&#39;, &#39;hirerism&#39;, &#39;hiresism&#39;, &#39;hissyism&#39;, &#39;histsism&#39;, &#39;hitheism&#39;, &#39;hived&#39;, &#39;hiverism&#39;, &#39;hivesism&#39;, &#39;hizenism&#39;, &#39;hoaed&#39;, &#39;hoagyism&#39;, &#39;hoarsism&#39;, &#39;hoaryism&#39;, &#39;hoastism&#39;, &#39;hobosism&#39;, &#39;hocksism&#39;, &#39;hocusism&#39;, &#39;hodad&#39;, &#39;hodja&#39;, &#39;hoersism&#39;, &#39;hoganism&#39;, &#39;hogenism&#39;, &#39;hoggsism&#39;, &#39;hoghsism&#39;, &#39;hohed&#39;, &#39;hoickism&#39;, &#39;hoied&#39;, &#39;hoiksism&#39;, &#39;hoingism&#39;, &#39;hoiseism&#39;, &#39;hokasism&#39;, &#39;hoked&#39;, &#39;hokesism&#39;, &#39;hokeyism&#39;, &#39;hokisism&#39;, &#39;hokkuism&#39;, &#39;hokumism&#39;, &#39;holdsism&#39;, &#39;holed&#39;, &#39;holesism&#39;, &#39;holeyism&#39;, &#39;holksism&#39;, &#39;holla&#39;, &#39;holloism&#39;, &#39;holmeism&#39;, &#39;holmsism&#39;, &#39;holonism&#39;, &#39;holosism&#39;, &#39;holtsism&#39;, &#39;homasism&#39;, &#39;homed&#39;, &#39;homesism&#39;, &#39;homeyism&#39;, &#39;homieism&#39;, &#39;hommeism&#39;, &#39;homosism&#39;, &#39;honanism&#39;, &#39;honda&#39;, &#39;hondsism&#39;, &#39;honed&#39;, &#39;honerism&#39;, &#39;honesism&#39;, &#39;hongiism&#39;, &#39;hongsism&#39;, &#39;honksism&#39;, &#39;honkyism&#39;, &#39;hoochism&#39;, &#39;hoodsism&#39;, &#39;hoodyism&#39;, &#39;hooeyism&#39;, &#39;hoofsism&#39;, &#39;hooka&#39;, &#39;hooksism&#39;, &#39;hookyism&#39;, &#39;hoolyism&#39;, &#39;hoonsism&#39;, &#39;hoopsism&#39;, &#39;hoord&#39;, &#39;hoorsism&#39;, &#39;hooshism&#39;, &#39;hootsism&#39;, &#39;hootyism&#39;, &#39;hooveism&#39;, &#39;hopakism&#39;, &#39;hoped&#39;, &#39;hoperism&#39;, &#39;hopesism&#39;, &#39;hoppyism&#39;, &#39;horahism&#39;, &#39;horalism&#39;, &#39;horasism&#39;, &#39;horisism&#39;, &#39;horksism&#39;, &#39;hormeism&#39;, &#39;hornsism&#39;, &#39;horstism&#39;, &#39;horsyism&#39;, &#39;hosed&#39;, &#39;hoselism&#39;, &#39;hosenism&#39;, &#39;hoserism&#39;, &#39;hosesism&#39;, &#39;hoseyism&#39;, &#39;hosta&#39;, &#39;hostsism&#39;, &#39;hotchism&#39;, &#39;hotenism&#39;, &#39;hottyism&#39;, &#39;houffism&#39;, &#39;houfsism&#39;, &#39;houghism&#39;, &#39;houriism&#39;, &#39;hoursism&#39;, &#39;houtsism&#39;, &#39;hovea&#39;, &#39;hoved&#39;, &#39;hovenism&#39;, &#39;hovesism&#39;, &#39;howbeism&#39;, &#39;howesism&#39;, &#39;howffism&#39;, &#39;howfsism&#39;, &#39;howksism&#39;, &#39;howlsism&#39;, &#39;howreism&#39;, &#39;howsoism&#39;, &#39;hoxed&#39;, &#39;hoxesism&#39;, &#39;hoyasism&#39;, &#39;hoyed&#39;, &#39;hoyleism&#39;, &#39;hubbyism&#39;, &#39;hucksism&#39;, &#39;hudna&#39;, &#39;hudud&#39;, &#39;huersism&#39;, &#39;huffsism&#39;, &#39;huffyism&#39;, &#39;hugerism&#39;, &#39;huggyism&#39;, &#39;huhusism&#39;, &#39;huiasism&#39;, &#39;hulasism&#39;, &#39;hulesism&#39;, &#39;hulksism&#39;, &#39;hulkyism&#39;, &#39;hulloism&#39;, &#39;hullsism&#39;, &#39;hullyism&#39;, &#39;humasism&#39;, &#39;humfsism&#39;, &#39;humic&#39;, &#39;humpsism&#39;, &#39;humpyism&#39;, &#39;hunksism&#39;, &#39;huntsism&#39;, &#39;hurdsism&#39;, &#39;hurlsism&#39;, &#39;hurlyism&#39;, &#39;hurra&#39;, &#39;hurstism&#39;, &#39;hurtsism&#39;, &#39;hushyism&#39;, &#39;husksism&#39;, &#39;husosism&#39;, &#39;hutia&#39;, &#39;huzza&#39;, &#39;huzzyism&#39;, &#39;hwylsism&#39;, &#39;hydra&#39;, &#39;hyensism&#39;, &#39;hyggeism&#39;, &#39;hyingism&#39;, &#39;hykesism&#39;, &#39;hylasism&#39;, &#39;hylegism&#39;, &#39;hylesism&#39;, &#39;hylic&#39;, &#39;hymnsism&#39;, &#39;hyndeism&#39;, &#39;hyoid&#39;, &#39;hyped&#39;, &#39;hypesism&#39;, &#39;hypha&#39;, &#39;hyphyism&#39;, &#39;hyposism&#39;, &#39;hyraxism&#39;, &#39;hysonism&#39;, &#39;hytheism&#39;, &#39;iambiism&#39;, &#39;iambsism&#39;, &#39;ibrikism&#39;, &#39;icersism&#39;, &#39;iched&#39;, &#39;ichesism&#39;, &#39;ichorism&#39;, &#39;icierism&#39;, &#39;ickerism&#39;, &#39;ickleism&#39;, &#39;iconsism&#39;, &#39;ictalism&#39;, &#39;ictic&#39;, &#39;ictusism&#39;, &#39;idantism&#39;, &#39;ideasism&#39;, &#39;ideesism&#39;, &#39;identism&#39;, &#39;idled&#39;, &#39;idlesism&#39;, &#39;idola&#39;, &#39;idolsism&#39;, &#39;idylsism&#39;, &#39;iftarism&#39;, &#39;igapoism&#39;, &#39;igged&#39;, &#39;iglusism&#39;, &#39;ihramism&#39;, &#39;ikansism&#39;, &#39;ikatsism&#39;, &#39;ikonsism&#39;, &#39;ileac&#39;, &#39;ilealism&#39;, &#39;ileumism&#39;, &#39;ileusism&#39;, &#39;iliad&#39;, &#39;ilialism&#39;, &#39;iliumism&#39;, &#39;illerism&#39;, &#39;illthism&#39;, &#39;imagoism&#39;, &#39;imamsism&#39;, &#39;imariism&#39;, &#39;imaumism&#39;, &#39;imbarism&#39;, &#39;imbed&#39;, &#39;imideism&#39;, &#39;imidoism&#39;, &#39;imidsism&#39;, &#39;imineism&#39;, &#39;iminoism&#39;, &#39;immewism&#39;, &#39;immitism&#39;, &#39;immixism&#39;, &#39;imped&#39;, &#39;impisism&#39;, &#39;impotism&#39;, &#39;improism&#39;, &#39;imshiism&#39;, &#39;imshyism&#39;, &#39;inaptism&#39;, &#39;inarmism&#39;, &#39;inbyeism&#39;, &#39;incelism&#39;, &#39;incleism&#39;, &#39;incogism&#39;, &#39;incusism&#39;, &#39;incutism&#39;, &#39;indewism&#39;, &#39;india&#39;, &#39;indieism&#39;, &#39;indolism&#39;, &#39;indowism&#39;, &#39;indriism&#39;, &#39;indueism&#39;, &#39;inermism&#39;, &#39;infixism&#39;, &#39;infosism&#39;, &#39;infra&#39;, &#39;inganism&#39;, &#39;ingleism&#39;, &#39;inionism&#39;, &#39;inked&#39;, &#39;inkerism&#39;, &#39;inkleism&#39;, &#39;inned&#39;, &#39;innitism&#39;, &#39;inorb&#39;, &#39;inrunism&#39;, &#39;insetism&#39;, &#39;inspoism&#39;, &#39;intelism&#39;, &#39;intilism&#39;, &#39;intisism&#39;, &#39;intra&#39;, &#39;inula&#39;, &#39;inureism&#39;, &#39;inurnism&#39;, &#39;inustism&#39;, &#39;invarism&#39;, &#39;inwitism&#39;, &#39;iodic&#39;, &#39;iodid&#39;, &#39;iodinism&#39;, &#39;iotasism&#39;, &#39;ipponism&#39;, &#39;iradeism&#39;, &#39;iridsism&#39;, &#39;iringism&#39;, &#39;irked&#39;, &#39;irokoism&#39;, &#39;ironeism&#39;, &#39;ironsism&#39;, &#39;isbasism&#39;, &#39;ishesism&#39;, &#39;isled&#39;, &#39;islesism&#39;, &#39;isnaeism&#39;, &#39;isseiism&#39;, &#39;istleism&#39;, &#39;itemsism&#39;, &#39;itherism&#39;, &#39;ivied&#39;, &#39;iviesism&#39;, &#39;ixiasism&#39;, &#39;ixnayism&#39;, &#39;ixora&#39;, &#39;ixtleism&#39;, &#39;izard&#39;, &#39;izarsism&#39;, &#39;izzatism&#39;, &#39;jaapsism&#39;, &#39;jabotism&#39;, &#39;jacalism&#39;, &#39;jacksism&#39;, &#39;jackyism&#39;, &#39;jaded&#39;, &#39;jadesism&#39;, &#39;jafasism&#39;, &#39;jaffa&#39;, &#39;jagasism&#39;, &#39;jagerism&#39;, &#39;jaggsism&#39;, &#39;jaggyism&#39;, &#39;jagirism&#39;, &#39;jagra&#39;, &#39;jailsism&#39;, &#39;jakerism&#39;, &#39;jakesism&#39;, &#39;jakeyism&#39;, &#39;jalapism&#39;, &#39;jalopism&#39;, &#39;jambeism&#39;, &#39;jamboism&#39;, &#39;jambsism&#39;, &#39;jambuism&#39;, &#39;jamesism&#39;, &#39;jammyism&#39;, &#39;jamonism&#39;, &#39;janesism&#39;, &#39;jannsism&#39;, &#39;jannyism&#39;, &#39;jantyism&#39;, &#39;japanism&#39;, &#39;japed&#39;, &#39;japerism&#39;, &#39;japesism&#39;, &#39;jarksism&#39;, &#39;jarlsism&#39;, &#39;jarpsism&#39;, &#39;jarta&#39;, &#39;jarulism&#39;, &#39;jaseyism&#39;, &#39;jaspeism&#39;, &#39;jaspsism&#39;, &#39;jatosism&#39;, &#39;jauksism&#39;, &#39;jaupsism&#39;, &#39;javasism&#39;, &#39;javelism&#39;, &#39;jawanism&#39;, &#39;jawed&#39;, &#39;jaxieism&#39;, &#39;jeansism&#39;, &#39;jeatsism&#39;, &#39;jebelism&#39;, &#39;jedisism&#39;, &#39;jeelsism&#39;, &#39;jeelyism&#39;, &#39;jeepsism&#39;, &#39;jeersism&#39;, &#39;jeezeism&#39;, &#39;jefesism&#39;, &#39;jeffsism&#39;, &#39;jehad&#39;, &#39;jehusism&#39;, &#39;jelab&#39;, &#39;jelloism&#39;, &#39;jellsism&#39;, &#39;jembeism&#39;, &#39;jemmyism&#39;, &#39;jennyism&#39;, &#39;jeonsism&#39;, &#39;jerid&#39;, &#39;jerksism&#39;, &#39;jerryism&#39;, &#39;jesseism&#39;, &#39;jestsism&#39;, &#39;jesusism&#39;, &#39;jetesism&#39;, &#39;jetonism&#39;, &#39;jeuneism&#39;, &#39;jewed&#39;, &#39;jewieism&#39;, &#39;jhala&#39;, &#39;jiaosism&#39;, &#39;jibba&#39;, &#39;jibbsism&#39;, &#39;jibed&#39;, &#39;jiberism&#39;, &#39;jibesism&#39;, &#39;jiffsism&#39;, &#39;jiggyism&#39;, &#39;jigotism&#39;, &#39;jihad&#39;, &#39;jillsism&#39;, &#39;jiltsism&#39;, &#39;jimmyism&#39;, &#39;jimpyism&#39;, &#39;jingoism&#39;, &#39;jinksism&#39;, &#39;jinneism&#39;, &#39;jinniism&#39;, &#39;jinnsism&#39;, &#39;jirdsism&#39;, &#39;jirga&#39;, &#39;jirreism&#39;, &#39;jismsism&#39;, &#39;jived&#39;, &#39;jiverism&#39;, &#39;jivesism&#39;, &#39;jiveyism&#39;, &#39;jnana&#39;, &#39;jobed&#39;, &#39;jobesism&#39;, &#39;jockoism&#39;, &#39;jocksism&#39;, &#39;jockyism&#39;, &#39;jocosism&#39;, &#39;jodelism&#39;, &#39;joeysism&#39;, &#39;johnsism&#39;, &#39;joinsism&#39;, &#39;joked&#39;, &#39;jokesism&#39;, &#39;jokeyism&#39;, &#39;jokolism&#39;, &#39;joled&#39;, &#39;jolesism&#39;, &#39;jollsism&#39;, &#39;joltsism&#39;, &#39;joltyism&#39;, &#39;jomonism&#39;, &#39;jomosism&#39;, &#39;jonesism&#39;, &#39;jongsism&#39;, &#39;jontyism&#39;, &#39;jooksism&#39;, &#39;joramism&#39;, &#39;jorumism&#39;, &#39;jotasism&#39;, &#39;jottyism&#39;, &#39;jotunism&#39;, &#39;joualism&#39;, &#39;jougsism&#39;, &#39;jouksism&#39;, &#39;jouleism&#39;, &#39;joursism&#39;, &#39;jowarism&#39;, &#39;jowed&#39;, &#39;jowlsism&#39;, &#39;jowlyism&#39;, &#39;joyed&#39;, &#39;jubasism&#39;, &#39;jubesism&#39;, &#39;jucosism&#39;, &#39;judasism&#39;, &#39;judgyism&#39;, &#39;judosism&#39;, &#39;jugalism&#39;, &#39;jugumism&#39;, &#39;jujusism&#39;, &#39;juked&#39;, &#39;jukesism&#39;, &#39;jukusism&#39;, &#39;julepism&#39;, &#39;jumarism&#39;, &#39;jumbyism&#39;, &#39;jumpsism&#39;, &#39;juncoism&#39;, &#39;junksism&#39;, &#39;junkyism&#39;, &#39;jupesism&#39;, &#39;juponism&#39;, &#39;juralism&#39;, &#39;juratism&#39;, &#39;jurelism&#39;, &#39;juresism&#39;, &#39;justsism&#39;, &#39;jutesism&#39;, &#39;juttyism&#39;, &#39;juvesism&#39;, &#39;juvieism&#39;, &#39;kaama&#39;, &#39;kabab&#39;, &#39;kabarism&#39;, &#39;kabob&#39;, &#39;kacha&#39;, &#39;kacksism&#39;, &#39;kadaiism&#39;, &#39;kadesism&#39;, &#39;kadisism&#39;, &#39;kafirism&#39;, &#39;kagosism&#39;, &#39;kagusism&#39;, &#39;kahalism&#39;, &#39;kaiakism&#39;, &#39;kaidsism&#39;, &#39;kaiesism&#39;, &#39;kaifsism&#39;, &#39;kaika&#39;, &#39;kaiksism&#39;, &#39;kailsism&#39;, &#39;kaimsism&#39;, &#39;kaingism&#39;, &#39;kainsism&#39;, &#39;kakasism&#39;, &#39;kakisism&#39;, &#39;kalamism&#39;, &#39;kalesism&#39;, &#39;kalifism&#39;, &#39;kalisism&#39;, &#39;kalpa&#39;, &#39;kamasism&#39;, &#39;kamesism&#39;, &#39;kamikism&#39;, &#39;kamisism&#39;, &#39;kammeism&#39;, &#39;kanaeism&#39;, &#39;kanasism&#39;, &#39;kandyism&#39;, &#39;kanehism&#39;, &#39;kanesism&#39;, &#39;kanga&#39;, &#39;kangsism&#39;, &#39;kanjiism&#39;, &#39;kantsism&#39;, &#39;kanzuism&#39;, &#39;kaonsism&#39;, &#39;kapasism&#39;, &#39;kaphsism&#39;, &#39;kapokism&#39;, &#39;kapowism&#39;, &#39;kapusism&#39;, &#39;kaputism&#39;, &#39;karasism&#39;, &#39;karatism&#39;, &#39;karksism&#39;, &#39;karnsism&#39;, &#39;karooism&#39;, &#39;karosism&#39;, &#39;karriism&#39;, &#39;karstism&#39;, &#39;karsyism&#39;, &#39;kartsism&#39;, &#39;karzyism&#39;, &#39;kasha&#39;, &#39;kasmeism&#39;, &#39;katalism&#39;, &#39;katasism&#39;, &#39;katisism&#39;, &#39;kattiism&#39;, &#39;kaughism&#39;, &#39;kauriism&#39;, &#39;kauruism&#39;, &#39;kauryism&#39;, &#39;kavalism&#39;, &#39;kavasism&#39;, &#39;kawasism&#39;, &#39;kawauism&#39;, &#39;kawed&#39;, &#39;kayleism&#39;, &#39;kayosism&#39;, &#39;kazisism&#39;, &#39;kazooism&#39;, &#39;kbarsism&#39;, &#39;kebarism&#39;, &#39;kebob&#39;, &#39;kecksism&#39;, &#39;kedgeism&#39;, &#39;kedgyism&#39;, &#39;keechism&#39;, &#39;keefsism&#39;, &#39;keeksism&#39;, &#39;keelsism&#39;, &#39;keema&#39;, &#39;keenoism&#39;, &#39;keensism&#39;, &#39;keepsism&#39;, &#39;keetsism&#39;, &#39;keeveism&#39;, &#39;kefirism&#39;, &#39;kehua&#39;, &#39;keirsism&#39;, &#39;kelepism&#39;, &#39;kelimism&#39;, &#39;kellsism&#39;, &#39;kellyism&#39;, &#39;kelpsism&#39;, &#39;kelpyism&#39;, &#39;keltsism&#39;, &#39;keltyism&#39;, &#39;kemboism&#39;, &#39;kembsism&#39;, &#39;kempsism&#39;, &#39;kemptism&#39;, &#39;kempyism&#39;, &#39;kenafism&#39;, &#39;kenchism&#39;, &#39;kendoism&#39;, &#39;kenosism&#39;, &#39;kenteism&#39;, &#39;kentsism&#39;, &#39;kepisism&#39;, &#39;kerbsism&#39;, &#39;kerelism&#39;, &#39;kerfsism&#39;, &#39;kerkyism&#39;, &#39;kerma&#39;, &#39;kerneism&#39;, &#39;kernsism&#39;, &#39;kerosism&#39;, &#39;kerryism&#39;, &#39;kerveism&#39;, &#39;kesarism&#39;, &#39;kestsism&#39;, &#39;ketasism&#39;, &#39;ketchism&#39;, &#39;ketesism&#39;, &#39;ketolism&#39;, &#39;kevelism&#39;, &#39;kevilism&#39;, &#39;kexesism&#39;, &#39;keyed&#39;, &#39;keyerism&#39;, &#39;khadiism&#39;, &#39;khafsism&#39;, &#39;khansism&#39;, &#39;khaphism&#39;, &#39;khatsism&#39;, &#39;khaya&#39;, &#39;khaziism&#39;, &#39;kheda&#39;, &#39;khethism&#39;, &#39;khetsism&#39;, &#39;khoja&#39;, &#39;khorsism&#39;, &#39;khoumism&#39;, &#39;khudsism&#39;, &#39;kiaatism&#39;, &#39;kiackism&#39;, &#39;kiangism&#39;, &#39;kibbeism&#39;, &#39;kibbiism&#39;, &#39;kibeiism&#39;, &#39;kibesism&#39;, &#39;kibla&#39;, &#39;kicksism&#39;, &#39;kickyism&#39;, &#39;kiddoism&#39;, &#39;kiddyism&#39;, &#39;kidelism&#39;, &#39;kidgeism&#39;, &#39;kiefsism&#39;, &#39;kiersism&#39;, &#39;kieveism&#39;, &#39;kievsism&#39;, &#39;kightism&#39;, &#39;kikesism&#39;, &#39;kikoiism&#39;, &#39;kileyism&#39;, &#39;kilimism&#39;, &#39;killsism&#39;, &#39;kilnsism&#39;, &#39;kilosism&#39;, &#39;kilpsism&#39;, &#39;kiltsism&#39;, &#39;kiltyism&#39;, &#39;kimboism&#39;, &#39;kinasism&#39;, &#39;kinda&#39;, &#39;kindsism&#39;, &#39;kindyism&#39;, &#39;kinesism&#39;, &#39;kingsism&#39;, &#39;kininism&#39;, &#39;kinksism&#39;, &#39;kinosism&#39;, &#39;kioreism&#39;, &#39;kipesism&#39;, &#39;kippa&#39;, &#39;kippsism&#39;, &#39;kirbyism&#39;, &#39;kirksism&#39;, &#39;kirnsism&#39;, &#39;kirriism&#39;, &#39;kisanism&#39;, &#39;kissyism&#39;, &#39;kistsism&#39;, &#39;kited&#39;, &#39;kiterism&#39;, &#39;kitesism&#39;, &#39;kitheism&#39;, &#39;kithsism&#39;, &#39;kitulism&#39;, &#39;kivasism&#39;, &#39;kiwisism&#39;, &#39;klangism&#39;, &#39;klapsism&#39;, &#39;klettism&#39;, &#39;klickism&#39;, &#39;kliegism&#39;, &#39;kliksism&#39;, &#39;klongism&#39;, &#39;kloofism&#39;, &#39;klugeism&#39;, &#39;klutzism&#39;, &#39;knagsism&#39;, &#39;knapsism&#39;, &#39;knarlism&#39;, &#39;knarsism&#39;, &#39;knaurism&#39;, &#39;knaweism&#39;, &#39;kneesism&#39;, &#39;knellism&#39;, &#39;knishism&#39;, &#39;knitsism&#39;, &#39;kniveism&#39;, &#39;knobsism&#39;, &#39;knopsism&#39;, &#39;knospism&#39;, &#39;knotsism&#39;, &#39;knoutism&#39;, &#39;knoweism&#39;, &#39;knowsism&#39;, &#39;knubsism&#39;, &#39;knurlism&#39;, &#39;knurrism&#39;, &#39;knursism&#39;, &#39;knutsism&#39;, &#39;koansism&#39;, &#39;koapsism&#39;, &#39;kobanism&#39;, &#39;kobosism&#39;, &#39;koelsism&#39;, &#39;koffsism&#39;, &#39;kofta&#39;, &#39;kogalism&#39;, &#39;kohasism&#39;, &#39;kohenism&#39;, &#39;kohlsism&#39;, &#39;koineism&#39;, &#39;kojisism&#39;, &#39;kokamism&#39;, &#39;kokasism&#39;, &#39;kokerism&#39;, &#39;kokra&#39;, &#39;kokumism&#39;, &#39;kolasism&#39;, &#39;kolosism&#39;, &#39;kombuism&#39;, &#39;konbuism&#39;, &#39;kondoism&#39;, &#39;konksism&#39;, &#39;kooksism&#39;, &#39;kookyism&#39;, &#39;kooriism&#39;, &#39;kopekism&#39;, &#39;kophsism&#39;, &#39;kopjeism&#39;, &#39;koppa&#39;, &#39;koraiism&#39;, &#39;korasism&#39;, &#39;koratism&#39;, &#39;koresism&#39;, &#39;korma&#39;, &#39;korosism&#39;, &#39;korunism&#39;, &#39;korusism&#39;, &#39;kosesism&#39;, &#39;kotchism&#39;, &#39;kotosism&#39;, &#39;kotowism&#39;, &#39;koura&#39;, &#39;kraalism&#39;, &#39;krabsism&#39;, &#39;kraftism&#39;, &#39;kraisism&#39;, &#39;kraitism&#39;, &#39;krangism&#39;, &#39;kransism&#39;, &#39;kranzism&#39;, &#39;krautism&#39;, &#39;kraysism&#39;, &#39;kreepism&#39;, &#39;krengism&#39;, &#39;kreweism&#39;, &#39;krona&#39;, &#39;kroneism&#39;, &#39;kroonism&#39;, &#39;krubiism&#39;, &#39;krunkism&#39;, &#39;ksarsism&#39;, &#39;kubieism&#39;, &#39;kudosism&#39;, &#39;kudusism&#39;, &#39;kudzuism&#39;, &#39;kufisism&#39;, &#39;kugelism&#39;, &#39;kuiasism&#39;, &#39;kukriism&#39;, &#39;kukusism&#39;, &#39;kulakism&#39;, &#39;kulanism&#39;, &#39;kulasism&#39;, &#39;kulfiism&#39;, &#39;kumisism&#39;, &#39;kumysism&#39;, &#39;kurisism&#39;, &#39;kurreism&#39;, &#39;kurta&#39;, &#39;kurusism&#39;, &#39;kussoism&#39;, &#39;kutasism&#39;, &#39;kutchism&#39;, &#39;kutisism&#39;, &#39;kutusism&#39;, &#39;kuzusism&#39;, &#39;kvassism&#39;, &#39;kvellism&#39;, &#39;kwela&#39;, &#39;kyackism&#39;, &#39;kyaksism&#39;, &#39;kyangism&#39;, &#39;kyarsism&#39;, &#39;kyatsism&#39;, &#39;kybosism&#39;, &#39;kydstism&#39;, &#39;kylesism&#39;, &#39;kylieism&#39;, &#39;kylinism&#39;, &#39;kylixism&#39;, &#39;kyloeism&#39;, &#39;kyndeism&#39;, &#39;kyndsism&#39;, &#39;kypesism&#39;, &#39;kyrieism&#39;, &#39;kytesism&#39;, &#39;kytheism&#39;, &#39;laariism&#39;, &#39;labda&#39;, &#39;labia&#39;, &#39;labisism&#39;, &#39;labra&#39;, &#39;laced&#39;, &#39;lacerism&#39;, &#39;lacesism&#39;, &#39;lacetism&#39;, &#39;laceyism&#39;, &#39;lacksism&#39;, &#39;laddyism&#39;, &#39;laded&#39;, &#39;laderism&#39;, &#39;ladesism&#39;, &#39;laersism&#39;, &#39;laevoism&#39;, &#39;laganism&#39;, &#39;lahalism&#39;, &#39;laharism&#39;, &#39;laichism&#39;, &#39;laicsism&#39;, &#39;laidsism&#39;, &#39;laighism&#39;, &#39;laika&#39;, &#39;laiksism&#39;, &#39;laird&#39;, &#39;lairsism&#39;, &#39;lairyism&#39;, &#39;laithism&#39;, &#39;laityism&#39;, &#39;laked&#39;, &#39;lakerism&#39;, &#39;lakesism&#39;, &#39;lakhsism&#39;, &#39;lakinism&#39;, &#39;laksa&#39;, &#39;laldyism&#39;, &#39;lallsism&#39;, &#39;lamasism&#39;, &#39;lambsism&#39;, &#39;lambyism&#39;, &#39;lamed&#39;, &#39;lamerism&#39;, &#39;lamesism&#39;, &#39;lamia&#39;, &#39;lammyism&#39;, &#39;lampsism&#39;, &#39;lanaiism&#39;, &#39;lanasism&#39;, &#39;lanchism&#39;, &#39;landeism&#39;, &#39;landsism&#39;, &#39;lanesism&#39;, &#39;lanksism&#39;, &#39;lantsism&#39;, &#39;lapinism&#39;, &#39;lapisism&#39;, &#39;lapjeism&#39;, &#39;larchism&#39;, &#39;lardsism&#39;, &#39;lardyism&#39;, &#39;lareeism&#39;, &#39;laresism&#39;, &#39;largoism&#39;, &#39;larisism&#39;, &#39;larksism&#39;, &#39;larkyism&#39;, &#39;larnsism&#39;, &#39;larntism&#39;, &#39;larumism&#39;, &#39;lased&#39;, &#39;laserism&#39;, &#39;lasesism&#39;, &#39;lassiism&#39;, &#39;lassuism&#39;, &#39;lassyism&#39;, &#39;lastsism&#39;, &#39;latahism&#39;, &#39;lated&#39;, &#39;latenism&#39;, &#39;latexism&#39;, &#39;lathiism&#39;, &#39;lathsism&#39;, &#39;lathyism&#39;, &#39;latkeism&#39;, &#39;latusism&#39;, &#39;lauanism&#39;, &#39;lauchism&#39;, &#39;laudsism&#39;, &#39;laufsism&#39;, &#39;laund&#39;, &#39;laura&#39;, &#39;lavalism&#39;, &#39;lavasism&#39;, &#39;laved&#39;, &#39;laverism&#39;, &#39;lavesism&#39;, &#39;lavra&#39;, &#39;lavvyism&#39;, &#39;lawed&#39;, &#39;lawerism&#39;, &#39;lawinism&#39;, &#39;lawksism&#39;, &#39;lawnsism&#39;, &#39;lawnyism&#39;, &#39;laxed&#39;, &#39;laxerism&#39;, &#39;laxesism&#39;, &#39;laxlyism&#39;, &#39;layed&#39;, &#39;layinism&#39;, &#39;layupism&#39;, &#39;lazarism&#39;, &#39;lazed&#39;, &#39;lazesism&#39;, &#39;lazosism&#39;, &#39;lazziism&#39;, &#39;lazzoism&#39;, &#39;leadsism&#39;, &#39;leadyism&#39;, &#39;leafsism&#39;, &#39;leaksism&#39;, &#39;leamsism&#39;, &#39;leansism&#39;, &#39;leanyism&#39;, &#39;leapsism&#39;, &#39;leareism&#39;, &#39;learsism&#39;, &#39;learyism&#39;, &#39;leatsism&#39;, &#39;leavyism&#39;, &#39;leazeism&#39;, &#39;lebenism&#39;, &#39;leccyism&#39;, &#39;ledesism&#39;, &#39;ledgyism&#39;, &#39;ledumism&#39;, &#39;leearism&#39;, &#39;leeksism&#39;, &#39;leepsism&#39;, &#39;leersism&#39;, &#39;leeseism&#39;, &#39;leetsism&#39;, &#39;leezeism&#39;, &#39;lefteism&#39;, &#39;leftsism&#39;, &#39;legerism&#39;, &#39;legesism&#39;, &#39;leggeism&#39;, &#39;leggoism&#39;, &#39;legitism&#39;, &#39;lehrsism&#39;, &#39;lehua&#39;, &#39;leirsism&#39;, &#39;leishism&#39;, &#39;lemanism&#39;, &#39;lemed&#39;, &#39;lemelism&#39;, &#39;lemesism&#39;, &#39;lemma&#39;, &#39;lemmeism&#39;, &#39;lendsism&#39;, &#39;lenesism&#39;, &#39;lengsism&#39;, &#39;lenisism&#39;, &#39;lenosism&#39;, &#39;lenseism&#39;, &#39;lentiism&#39;, &#39;lentoism&#39;, &#39;leoneism&#39;, &#39;lepid&#39;, &#39;lepra&#39;, &#39;lepta&#39;, &#39;lered&#39;, &#39;leresism&#39;, &#39;lerpsism&#39;, &#39;lesboism&#39;, &#39;lesesism&#39;, &#39;lestsism&#39;, &#39;letchism&#39;, &#39;letheism&#39;, &#39;letupism&#39;, &#39;leuchism&#39;, &#39;leucoism&#39;, &#39;leudsism&#39;, &#39;leughism&#39;, &#39;levasism&#39;, &#39;leveeism&#39;, &#39;levesism&#39;, &#39;levinism&#39;, &#39;levisism&#39;, &#39;lewisism&#39;, &#39;lexesism&#39;, &#39;lexisism&#39;, &#39;lezesism&#39;, &#39;lezza&#39;, &#39;lezzyism&#39;, &#39;liana&#39;, &#39;lianeism&#39;, &#39;liangism&#39;, &#39;liard&#39;, &#39;liarsism&#39;, &#39;liartism&#39;, &#39;liberism&#39;, &#39;libra&#39;, &#39;libriism&#39;, &#39;lichiism&#39;, &#39;lichtism&#39;, &#39;licitism&#39;, &#39;licksism&#39;, &#39;lidarism&#39;, &#39;lidosism&#39;, &#39;liefsism&#39;, &#39;liensism&#39;, &#39;liersism&#39;, &#39;lieusism&#39;, &#39;lieveism&#39;, &#39;liferism&#39;, &#39;lifesism&#39;, &#39;liftsism&#39;, &#39;liganism&#39;, &#39;ligerism&#39;, &#39;liggeism&#39;, &#39;ligneism&#39;, &#39;liked&#39;, &#39;likerism&#39;, &#39;likesism&#39;, &#39;likinism&#39;, &#39;lillsism&#39;, &#39;lilosism&#39;, &#39;liltsism&#39;, &#39;limanism&#39;, &#39;limasism&#39;, &#39;limaxism&#39;, &#39;limba&#39;, &#39;limbiism&#39;, &#39;limbsism&#39;, &#39;limbyism&#39;, &#39;limed&#39;, &#39;limenism&#39;, &#39;limesism&#39;, &#39;limeyism&#39;, &#39;limma&#39;, &#39;limnsism&#39;, &#39;limosism&#39;, &#39;limpa&#39;, &#39;limpsism&#39;, &#39;linac&#39;, &#39;linchism&#39;, &#39;lindsism&#39;, &#39;lindyism&#39;, &#39;lined&#39;, &#39;linesism&#39;, &#39;lineyism&#39;, &#39;linga&#39;, &#39;lingsism&#39;, &#39;lingyism&#39;, &#39;lininism&#39;, &#39;linksism&#39;, &#39;linkyism&#39;, &#39;linnsism&#39;, &#39;linnyism&#39;, &#39;linosism&#39;, &#39;lintsism&#39;, &#39;lintyism&#39;, &#39;linumism&#39;, &#39;linuxism&#39;, &#39;lionsism&#39;, &#39;lipasism&#39;, &#39;lipesism&#39;, &#39;lipinism&#39;, &#39;liposism&#39;, &#39;lippyism&#39;, &#39;lirasism&#39;, &#39;lirksism&#39;, &#39;lirotism&#39;, &#39;lisksism&#39;, &#39;lisleism&#39;, &#39;lispsism&#39;, &#39;listsism&#39;, &#39;litaiism&#39;, &#39;litasism&#39;, &#39;lited&#39;, &#39;literism&#39;, &#39;litesism&#39;, &#39;lithoism&#39;, &#39;lithsism&#39;, &#39;litreism&#39;, &#39;lived&#39;, &#39;livenism&#39;, &#39;livesism&#39;, &#39;livorism&#39;, &#39;livreism&#39;, &#39;llanoism&#39;, &#39;loachism&#39;, &#39;loadsism&#39;, &#39;loafsism&#39;, &#39;loamsism&#39;, &#39;loansism&#39;, &#39;loastism&#39;, &#39;loaveism&#39;, &#39;lobarism&#39;, &#39;lobed&#39;, &#39;lobesism&#39;, &#39;lobosism&#39;, &#39;lobusism&#39;, &#39;locheism&#39;, &#39;lochsism&#39;, &#39;locieism&#39;, &#39;locisism&#39;, &#39;locksism&#39;, &#39;locosism&#39;, &#39;locumism&#39;, &#39;lodenism&#39;, &#39;lodesism&#39;, &#39;loessism&#39;, &#39;loftsism&#39;, &#39;loganism&#39;, &#39;logesism&#39;, &#39;loggyism&#39;, &#39;logia&#39;, &#39;logieism&#39;, &#39;logoiism&#39;, &#39;logonism&#39;, &#39;logosism&#39;, &#39;lohanism&#39;, &#39;loidsism&#39;, &#39;loinsism&#39;, &#39;loipeism&#39;, &#39;loirsism&#39;, &#39;lokesism&#39;, &#39;lollsism&#39;, &#39;lollyism&#39;, &#39;lologism&#39;, &#39;lomasism&#39;, &#39;lomed&#39;, &#39;lomesism&#39;, &#39;lonerism&#39;, &#39;longa&#39;, &#39;longeism&#39;, &#39;longsism&#39;, &#39;loobyism&#39;, &#39;looed&#39;, &#39;looeyism&#39;, &#39;loofa&#39;, &#39;loofsism&#39;, &#39;looieism&#39;, &#39;looksism&#39;, &#39;lookyism&#39;, &#39;loomsism&#39;, &#39;loonsism&#39;, &#39;loonyism&#39;, &#39;loopsism&#39;, &#39;loord&#39;, &#39;lootsism&#39;, &#39;loped&#39;, &#39;loperism&#39;, &#39;lopesism&#39;, &#39;loppyism&#39;, &#39;loralism&#39;, &#39;loranism&#39;, &#39;lordsism&#39;, &#39;lordyism&#39;, &#39;lorelism&#39;, &#39;loresism&#39;, &#39;loric&#39;, &#39;lorisism&#39;, &#39;losed&#39;, &#39;loselism&#39;, &#39;losenism&#39;, &#39;losesism&#39;, &#39;lossyism&#39;, &#39;lotahism&#39;, &#39;lotasism&#39;, &#39;lotesism&#39;, &#39;lotic&#39;, &#39;lotosism&#39;, &#39;lotsa&#39;, &#39;lotta&#39;, &#39;lotteism&#39;, &#39;lottoism&#39;, &#39;lotusism&#39;, &#39;loued&#39;, &#39;loughism&#39;, &#39;louieism&#39;, &#39;louisism&#39;, &#39;louma&#39;, &#39;lound&#39;, &#39;lounsism&#39;, &#39;loupeism&#39;, &#39;loupsism&#39;, &#39;loureism&#39;, &#39;loursism&#39;, &#39;louryism&#39;, &#39;loutsism&#39;, &#39;lovatism&#39;, &#39;loved&#39;, &#39;lovesism&#39;, &#39;loveyism&#39;, &#39;lovieism&#39;, &#39;lowanism&#39;, &#39;lowed&#39;, &#39;lowesism&#39;, &#39;lownd&#39;, &#39;lowneism&#39;, &#39;lownsism&#39;, &#39;lowpsism&#39;, &#39;lowryism&#39;, &#39;lowseism&#39;, &#39;lowtsism&#39;, &#39;loxed&#39;, &#39;loxesism&#39;, &#39;lozenism&#39;, &#39;luachism&#39;, &#39;luausism&#39;, &#39;lubed&#39;, &#39;lubesism&#39;, &#39;lubra&#39;, &#39;lucesism&#39;, &#39;lucksism&#39;, &#39;lucreism&#39;, &#39;ludesism&#39;, &#39;ludic&#39;, &#39;ludosism&#39;, &#39;luffa&#39;, &#39;luffsism&#39;, &#39;luged&#39;, &#39;lugerism&#39;, &#39;lugesism&#39;, &#39;lullsism&#39;, &#39;lulusism&#39;, &#39;lumasism&#39;, &#39;lumbiism&#39;, &#39;lummeism&#39;, &#39;lummyism&#39;, &#39;lumpsism&#39;, &#39;lunasism&#39;, &#39;lunesism&#39;, &#39;lunetism&#39;, &#39;lungiism&#39;, &#39;lungsism&#39;, &#39;lunksism&#39;, &#39;luntsism&#39;, &#39;lupinism&#39;, &#39;lured&#39;, &#39;lurerism&#39;, &#39;luresism&#39;, &#39;lurexism&#39;, &#39;lurgiism&#39;, &#39;lurgyism&#39;, &#39;lurksism&#39;, &#39;lurryism&#39;, &#39;lurveism&#39;, &#39;luserism&#39;, &#39;lushyism&#39;, &#39;lusksism&#39;, &#39;lustsism&#39;, &#39;lususism&#39;, &#39;lutea&#39;, &#39;luted&#39;, &#39;luterism&#39;, &#39;lutesism&#39;, &#39;luvvyism&#39;, &#39;luxed&#39;, &#39;luxerism&#39;, &#39;luxesism&#39;, &#39;lweisism&#39;, &#39;lyamsism&#39;, &#39;lyard&#39;, &#39;lyartism&#39;, &#39;lyaseism&#39;, &#39;lycea&#39;, &#39;lyceeism&#39;, &#39;lycra&#39;, &#39;lymesism&#39;, &#39;lynesism&#39;, &#39;lyresism&#39;, &#39;lysed&#39;, &#39;lysesism&#39;, &#39;lysinism&#39;, &#39;lysisism&#39;, &#39;lysolism&#39;, &#39;lyssa&#39;, &#39;lyted&#39;, &#39;lytesism&#39;, &#39;lytheism&#39;, &#39;lytic&#39;, &#39;lytta&#39;, &#39;maaed&#39;, &#39;maareism&#39;, &#39;maarsism&#39;, &#39;mabesism&#39;, &#39;macasism&#39;, &#39;maced&#39;, &#39;macerism&#39;, &#39;macesism&#39;, &#39;macheism&#39;, &#39;machiism&#39;, &#39;machsism&#39;, &#39;macksism&#39;, &#39;macleism&#39;, &#39;maconism&#39;, &#39;madgeism&#39;, &#39;madid&#39;, &#39;madreism&#39;, &#39;maerlism&#39;, &#39;mafic&#39;, &#39;magesism&#39;, &#39;maggsism&#39;, &#39;magotism&#39;, &#39;magusism&#39;, &#39;mahoeism&#39;, &#39;mahua&#39;, &#39;mahwa&#39;, &#39;maidsism&#39;, &#39;maikoism&#39;, &#39;maiksism&#39;, &#39;maileism&#39;, &#39;maillism&#39;, &#39;mailsism&#39;, &#39;maimsism&#39;, &#39;mainsism&#39;, &#39;maireism&#39;, &#39;mairsism&#39;, &#39;maiseism&#39;, &#39;maistism&#39;, &#39;makarism&#39;, &#39;makesism&#39;, &#39;makisism&#39;, &#39;makosism&#39;, &#39;malamism&#39;, &#39;malarism&#39;, &#39;malasism&#39;, &#39;malaxism&#39;, &#39;malesism&#39;, &#39;malic&#39;, &#39;malikism&#39;, &#39;malisism&#39;, &#39;mallsism&#39;, &#39;malmsism&#39;, &#39;malmyism&#39;, &#39;maltsism&#39;, &#39;maltyism&#39;, &#39;malusism&#39;, &#39;malva&#39;, &#39;malwa&#39;, &#39;mamasism&#39;, &#39;mamba&#39;, &#39;mameeism&#39;, &#39;mameyism&#39;, &#39;mamieism&#39;, &#39;manasism&#39;, &#39;manatism&#39;, &#39;mandiism&#39;, &#39;maneb&#39;, &#39;maned&#39;, &#39;manehism&#39;, &#39;manesism&#39;, &#39;manetism&#39;, &#39;mangsism&#39;, &#39;manisism&#39;, &#39;mankyism&#39;, &#39;manna&#39;, &#39;manosism&#39;, &#39;manseism&#39;, &#39;manta&#39;, &#39;mantoism&#39;, &#39;mantyism&#39;, &#39;manulism&#39;, &#39;manusism&#39;, &#39;mapauism&#39;, &#39;maquiism&#39;, &#39;maraeism&#39;, &#39;marahism&#39;, &#39;marasism&#39;, &#39;marcsism&#39;, &#39;mardyism&#39;, &#39;maresism&#39;, &#39;margeism&#39;, &#39;margsism&#39;, &#39;maria&#39;, &#39;marid&#39;, &#39;marka&#39;, &#39;marksism&#39;, &#39;marleism&#39;, &#39;marlsism&#39;, &#39;marlyism&#39;, &#39;marmsism&#39;, &#39;maronism&#39;, &#39;marorism&#39;, &#39;marra&#39;, &#39;marriism&#39;, &#39;marseism&#39;, &#39;martsism&#39;, &#39;marvyism&#39;, &#39;masasism&#39;, &#39;mased&#39;, &#39;maserism&#39;, &#39;masesism&#39;, &#39;mashyism&#39;, &#39;masksism&#39;, &#39;massa&#39;, &#39;massyism&#39;, &#39;mastsism&#39;, &#39;mastyism&#39;, &#39;masusism&#39;, &#39;mataiism&#39;, &#39;mated&#39;, &#39;materism&#39;, &#39;matesism&#39;, &#39;mathsism&#39;, &#39;matinism&#39;, &#39;matloism&#39;, &#39;matteism&#39;, &#39;mattsism&#39;, &#39;matza&#39;, &#39;matzoism&#39;, &#39;maubyism&#39;, &#39;maudsism&#39;, &#39;maulsism&#39;, &#39;maund&#39;, &#39;mauriism&#39;, &#39;mausyism&#39;, &#39;mautsism&#39;, &#39;mauzyism&#39;, &#39;mavenism&#39;, &#39;mavieism&#39;, &#39;mavinism&#39;, &#39;mavisism&#39;, &#39;mawed&#39;, &#39;mawksism&#39;, &#39;mawkyism&#39;, &#39;mawnsism&#39;, &#39;mawrsism&#39;, &#39;maxed&#39;, &#39;maxesism&#39;, &#39;maxisism&#39;, &#39;mayanism&#39;, &#39;mayasism&#39;, &#39;mayed&#39;, &#39;mayosism&#39;, &#39;maystism&#39;, &#39;mazed&#39;, &#39;mazerism&#39;, &#39;mazesism&#39;, &#39;mazeyism&#39;, &#39;mazutism&#39;, &#39;mbira&#39;, &#39;meadsism&#39;, &#39;mealsism&#39;, &#39;meaneism&#39;, &#39;meansism&#39;, &#39;meanyism&#39;, &#39;meareism&#39;, &#39;measeism&#39;, &#39;meathism&#39;, &#39;meatsism&#39;, &#39;mebosism&#39;, &#39;mechsism&#39;, &#39;mecksism&#39;, &#39;mediiism&#39;, &#39;medleism&#39;, &#39;meedsism&#39;, &#39;meersism&#39;, &#39;meetsism&#39;, &#39;meffsism&#39;, &#39;meinsism&#39;, &#39;meintism&#39;, &#39;meinyism&#39;, &#39;meithism&#39;, &#39;mekka&#39;, &#39;melasism&#39;, &#39;melba&#39;, &#39;meldsism&#39;, &#39;melic&#39;, &#39;melikism&#39;, &#39;mellsism&#39;, &#39;meltsism&#39;, &#39;meltyism&#39;, &#39;memesism&#39;, &#39;memosism&#39;, &#39;menad&#39;, &#39;mendsism&#39;, &#39;mened&#39;, &#39;menesism&#39;, &#39;mengeism&#39;, &#39;mengsism&#39;, &#39;mensa&#39;, &#39;menseism&#39;, &#39;menshism&#39;, &#39;menta&#39;, &#39;mentoism&#39;, &#39;menusism&#39;, &#39;meousism&#39;, &#39;meowsism&#39;, &#39;merchism&#39;, &#39;mercsism&#39;, &#39;merdeism&#39;, &#39;mered&#39;, &#39;merelism&#39;, &#39;mererism&#39;, &#39;meresism&#39;, &#39;merilism&#39;, &#39;merisism&#39;, &#39;merksism&#39;, &#39;merleism&#39;, &#39;merlsism&#39;, &#39;merseism&#39;, &#39;mesalism&#39;, &#39;mesasism&#39;, &#39;meselism&#39;, &#39;mesesism&#39;, &#39;meshyism&#39;, &#39;mesic&#39;, &#39;mesneism&#39;, &#39;mesonism&#39;, &#39;messyism&#39;, &#39;mestoism&#39;, &#39;meted&#39;, &#39;metesism&#39;, &#39;methoism&#39;, &#39;methsism&#39;, &#39;metic&#39;, &#39;metifism&#39;, &#39;metisism&#39;, &#39;metolism&#39;, &#39;metreism&#39;, &#39;meuseism&#39;, &#39;meved&#39;, &#39;mevesism&#39;, &#39;mewed&#39;, &#39;mewlsism&#39;, &#39;meyntism&#39;, &#39;mezesism&#39;, &#39;mezzeism&#39;, &#39;mezzoism&#39;, &#39;mhorrism&#39;, &#39;miaouism&#39;, &#39;miaowism&#39;, &#39;miasmism&#39;, &#39;miaulism&#39;, &#39;micasism&#39;, &#39;micheism&#39;, &#39;michtism&#39;, &#39;micksism&#39;, &#39;mickyism&#39;, &#39;micosism&#39;, &#39;micra&#39;, &#39;middyism&#39;, &#39;midgyism&#39;, &#39;midisism&#39;, &#39;miensism&#39;, &#39;mieveism&#39;, &#39;miffsism&#39;, &#39;miffyism&#39;, &#39;miftyism&#39;, &#39;miggsism&#39;, &#39;mihasism&#39;, &#39;mihisism&#39;, &#39;miked&#39;, &#39;mikesism&#39;, &#39;mikra&#39;, &#39;mikva&#39;, &#39;milchism&#39;, &#39;mildsism&#39;, &#39;milerism&#39;, &#39;milesism&#39;, &#39;milfsism&#39;, &#39;milia&#39;, &#39;milkoism&#39;, &#39;milksism&#39;, &#39;milleism&#39;, &#39;millsism&#39;, &#39;milorism&#39;, &#39;milosism&#39;, &#39;milpa&#39;, &#39;miltsism&#39;, &#39;miltyism&#39;, &#39;miltzism&#39;, &#39;mimed&#39;, &#39;mimeoism&#39;, &#39;mimerism&#39;, &#39;mimesism&#39;, &#39;mimsyism&#39;, &#39;minaeism&#39;, &#39;minarism&#39;, &#39;minasism&#39;, &#39;mincyism&#39;, &#39;mindsism&#39;, &#39;mined&#39;, &#39;minesism&#39;, &#39;mingeism&#39;, &#39;mingsism&#39;, &#39;mingyism&#39;, &#39;minisism&#39;, &#39;minkeism&#39;, &#39;minksism&#39;, &#39;minnyism&#39;, &#39;minosism&#39;, &#39;mintsism&#39;, &#39;mired&#39;, &#39;miresism&#39;, &#39;mirexism&#39;, &#39;mirid&#39;, &#39;mirinism&#39;, &#39;mirksism&#39;, &#39;mirkyism&#39;, &#39;mirlyism&#39;, &#39;mirosism&#39;, &#39;mirvsism&#39;, &#39;mirza&#39;, &#39;mischism&#39;, &#39;misdoism&#39;, &#39;misesism&#39;, &#39;misgoism&#39;, &#39;misosism&#39;, &#39;missa&#39;, &#39;mistsism&#39;, &#39;mistyism&#39;, &#39;mitchism&#39;, &#39;miterism&#39;, &#39;mitesism&#39;, &#39;mitisism&#39;, &#39;mitreism&#39;, &#39;mittsism&#39;, &#39;mixed&#39;, &#39;mixenism&#39;, &#39;mixerism&#39;, &#39;mixesism&#39;, &#39;mixteism&#39;, &#39;mixupism&#39;, &#39;mizenism&#39;, &#39;mizzyism&#39;, &#39;mnemeism&#39;, &#39;moansism&#39;, &#39;moatsism&#39;, &#39;mobbyism&#39;, &#39;mobesism&#39;, &#39;mobeyism&#39;, &#39;mobieism&#39;, &#39;mobleism&#39;, &#39;mochiism&#39;, &#39;mochsism&#39;, &#39;mochyism&#39;, &#39;mocksism&#39;, &#39;moderism&#39;, &#39;modesism&#39;, &#39;modgeism&#39;, &#39;modiiism&#39;, &#39;modusism&#39;, &#39;moersism&#39;, &#39;mofosism&#39;, &#39;moggyism&#39;, &#39;mohelism&#39;, &#39;mohosism&#39;, &#39;mohrsism&#39;, &#39;mohua&#39;, &#39;mohurism&#39;, &#39;moileism&#39;, &#39;moilsism&#39;, &#39;moira&#39;, &#39;moireism&#39;, &#39;moitsism&#39;, &#39;mojosism&#39;, &#39;mokesism&#39;, &#39;mokisism&#39;, &#39;mokosism&#39;, &#39;molalism&#39;, &#39;molasism&#39;, &#39;moldsism&#39;, &#39;moled&#39;, &#39;molesism&#39;, &#39;molla&#39;, &#39;mollsism&#39;, &#39;mollyism&#39;, &#39;moltoism&#39;, &#39;moltsism&#39;, &#39;molysism&#39;, &#39;momesism&#39;, &#39;momma&#39;, &#39;mommyism&#39;, &#39;momusism&#39;, &#39;monad&#39;, &#39;monalism&#39;, &#39;monasism&#39;, &#39;mondeism&#39;, &#39;mondoism&#39;, &#39;monerism&#39;, &#39;mongoism&#39;, &#39;mongsism&#39;, &#39;monic&#39;, &#39;monieism&#39;, &#39;monksism&#39;, &#39;monosism&#39;, &#39;monteism&#39;, &#39;montyism&#39;, &#39;moobsism&#39;, &#39;moochism&#39;, &#39;moodsism&#39;, &#39;mooed&#39;, &#39;mooksism&#39;, &#39;moola&#39;, &#39;mooliism&#39;, &#39;moolsism&#39;, &#39;moolyism&#39;, &#39;moongism&#39;, &#39;moonsism&#39;, &#39;moonyism&#39;, &#39;moopsism&#39;, &#39;moorsism&#39;, &#39;mooryism&#39;, &#39;mootsism&#39;, &#39;mooveism&#39;, &#39;moped&#39;, &#39;moperism&#39;, &#39;mopesism&#39;, &#39;mopeyism&#39;, &#39;moppyism&#39;, &#39;mopsyism&#39;, &#39;mopusism&#39;, &#39;moraeism&#39;, &#39;morasism&#39;, &#39;moratism&#39;, &#39;morayism&#39;, &#39;morelism&#39;, &#39;moresism&#39;, &#39;moria&#39;, &#39;morneism&#39;, &#39;mornsism&#39;, &#39;morra&#39;, &#39;morroism&#39;, &#39;morseism&#39;, &#39;mortsism&#39;, &#39;mosed&#39;, &#39;mosesism&#39;, &#39;moseyism&#39;, &#39;mosksism&#39;, &#39;mossoism&#39;, &#39;mosteism&#39;, &#39;mostsism&#39;, &#39;moted&#39;, &#39;motenism&#39;, &#39;motesism&#39;, &#39;motetism&#39;, &#39;moteyism&#39;, &#39;mothsism&#39;, &#39;mothyism&#39;, &#39;motisism&#39;, &#39;motteism&#39;, &#39;mottsism&#39;, &#39;mottyism&#39;, &#39;motusism&#39;, &#39;motza&#39;, &#39;mouchism&#39;, &#39;mouesism&#39;, &#39;mould&#39;, &#39;moulsism&#39;, &#39;moupsism&#39;, &#39;moustism&#39;, &#39;mousyism&#39;, &#39;moved&#39;, &#39;movesism&#39;, &#39;mowasism&#39;, &#39;mowed&#39;, &#39;mowra&#39;, &#39;moxasism&#39;, &#39;moxieism&#39;, &#39;moyasism&#39;, &#39;moyleism&#39;, &#39;moylsism&#39;, &#39;mozed&#39;, &#39;mozesism&#39;, &#39;mozosism&#39;, &#39;mpretism&#39;, &#39;muchoism&#39;, &#39;mucic&#39;, &#39;mucid&#39;, &#39;mucinism&#39;, &#39;mucksism&#39;, &#39;mucorism&#39;, &#39;mucroism&#39;, &#39;mudgeism&#39;, &#39;mudirism&#39;, &#39;mudra&#39;, &#39;muffsism&#39;, &#39;muftiism&#39;, &#39;mugga&#39;, &#39;muggsism&#39;, &#39;muggyism&#39;, &#39;muhlyism&#39;, &#39;muidsism&#39;, &#39;muilsism&#39;, &#39;muirsism&#39;, &#39;muistism&#39;, &#39;mujikism&#39;, &#39;mulctism&#39;, &#39;muled&#39;, &#39;mulesism&#39;, &#39;muleyism&#39;, &#39;mulga&#39;, &#39;mulieism&#39;, &#39;mulla&#39;, &#39;mullsism&#39;, &#39;mulseism&#39;, &#39;mulshism&#39;, &#39;mummsism&#39;, &#39;mumpsism&#39;, &#39;mumsyism&#39;, &#39;mumusism&#39;, &#39;munga&#39;, &#39;mungeism&#39;, &#39;mungoism&#39;, &#39;mungsism&#39;, &#39;munisism&#39;, &#39;muntsism&#39;, &#39;muntuism&#39;, &#39;muonsism&#39;, &#39;murasism&#39;, &#39;mured&#39;, &#39;muresism&#39;, &#39;murexism&#39;, &#39;murid&#39;, &#39;murksism&#39;, &#39;murlsism&#39;, &#39;murlyism&#39;, &#39;murra&#39;, &#39;murreism&#39;, &#39;murriism&#39;, &#39;murrsism&#39;, &#39;murryism&#39;, &#39;murtiism&#39;, &#39;murva&#39;, &#39;musarism&#39;, &#39;musca&#39;, &#39;mused&#39;, &#39;muserism&#39;, &#39;musesism&#39;, &#39;musetism&#39;, &#39;musha&#39;, &#39;musitism&#39;, &#39;musksism&#39;, &#39;musosism&#39;, &#39;musseism&#39;, &#39;mussyism&#39;, &#39;musthism&#39;, &#39;mustsism&#39;, &#39;mutchism&#39;, &#39;muted&#39;, &#39;muterism&#39;, &#39;mutesism&#39;, &#39;mutha&#39;, &#39;mutisism&#39;, &#39;mutonism&#39;, &#39;muttsism&#39;, &#39;muxed&#39;, &#39;muxesism&#39;, &#39;muzakism&#39;, &#39;muzzyism&#39;, &#39;mvuleism&#39;, &#39;myallism&#39;, &#39;mylarism&#39;, &#39;mynahism&#39;, &#39;mynasism&#39;, &#39;myoid&#39;, &#39;myoma&#39;, &#39;myopeism&#39;, &#39;myopsism&#39;, &#39;myopyism&#39;, &#39;mysid&#39;, &#39;mythiism&#39;, &#39;mythsism&#39;, &#39;mythyism&#39;, &#39;myxosism&#39;, &#39;mzeesism&#39;, &#39;naamsism&#39;, &#39;naansism&#39;, &#39;nabesism&#39;, &#39;nabisism&#39;, &#39;nabksism&#39;, &#39;nabla&#39;, &#39;nabob&#39;, &#39;nacheism&#39;, &#39;nachoism&#39;, &#39;nacreism&#39;, &#39;nadasism&#39;, &#39;naeveism&#39;, &#39;naeviism&#39;, &#39;naffsism&#39;, &#39;nagasism&#39;, &#39;naggyism&#39;, &#39;nagorism&#39;, &#39;nahalism&#39;, &#39;naiad&#39;, &#39;naifsism&#39;, &#39;naiksism&#39;, &#39;nailsism&#39;, &#39;naira&#39;, &#39;nairuism&#39;, &#39;naked&#39;, &#39;nakerism&#39;, &#39;nakfa&#39;, &#39;nalasism&#39;, &#39;naled&#39;, &#39;nalla&#39;, &#39;named&#39;, &#39;namerism&#39;, &#39;namesism&#39;, &#39;namma&#39;, &#39;namusism&#39;, &#39;nanasism&#39;, &#39;nanceism&#39;, &#39;nancyism&#39;, &#39;nanduism&#39;, &#39;nanna&#39;, &#39;nanosism&#39;, &#39;nanua&#39;, &#39;napasism&#39;, &#39;naped&#39;, &#39;napesism&#39;, &#39;napooism&#39;, &#39;nappa&#39;, &#39;nappeism&#39;, &#39;nappyism&#39;, &#39;narasism&#39;, &#39;narcoism&#39;, &#39;narcsism&#39;, &#39;nardsism&#39;, &#39;naresism&#39;, &#39;naric&#39;, &#39;narisism&#39;, &#39;narksism&#39;, &#39;narkyism&#39;, &#39;narreism&#39;, &#39;nashiism&#39;, &#39;natchism&#39;, &#39;natesism&#39;, &#39;natisism&#39;, &#39;nattyism&#39;, &#39;nauchism&#39;, &#39;nauntism&#39;, &#39;navarism&#39;, &#39;navesism&#39;, &#39;navewism&#39;, &#39;navvyism&#39;, &#39;nawab&#39;, &#39;nazesism&#39;, &#39;nazirism&#39;, &#39;nazisism&#39;, &#39;nduja&#39;, &#39;neafeism&#39;, &#39;nealsism&#39;, &#39;neapsism&#39;, &#39;nearsism&#39;, &#39;neathism&#39;, &#39;neatsism&#39;, &#39;nebekism&#39;, &#39;nebelism&#39;, &#39;necksism&#39;, &#39;neddyism&#39;, &#39;needsism&#39;, &#39;neeld&#39;, &#39;neeleism&#39;, &#39;neemb&#39;, &#39;neemsism&#39;, &#39;neepsism&#39;, &#39;neeseism&#39;, &#39;neezeism&#39;, &#39;negroism&#39;, &#39;negusism&#39;, &#39;neifsism&#39;, &#39;neistism&#39;, &#39;neiveism&#39;, &#39;nelisism&#39;, &#39;nellyism&#39;, &#39;nemasism&#39;, &#39;nemnsism&#39;, &#39;nemptism&#39;, &#39;nenesism&#39;, &#39;neonsism&#39;, &#39;neperism&#39;, &#39;nepitism&#39;, &#39;neralism&#39;, &#39;nerdsism&#39;, &#39;nerka&#39;, &#39;nerksism&#39;, &#39;nerolism&#39;, &#39;nertsism&#39;, &#39;nertzism&#39;, &#39;nervyism&#39;, &#39;nestsism&#39;, &#39;netesism&#39;, &#39;netopism&#39;, &#39;nettsism&#39;, &#39;nettyism&#39;, &#39;neuksism&#39;, &#39;neumeism&#39;, &#39;neumsism&#39;, &#39;nevelism&#39;, &#39;nevesism&#39;, &#39;nevusism&#39;, &#39;newbsism&#39;, &#39;newed&#39;, &#39;newelism&#39;, &#39;newieism&#39;, &#39;newsyism&#39;, &#39;newtsism&#39;, &#39;nextsism&#39;, &#39;nexusism&#39;, &#39;ngaioism&#39;, &#39;ngana&#39;, &#39;ngatiism&#39;, &#39;ngoma&#39;, &#39;ngweeism&#39;, &#39;nicad&#39;, &#39;nichtism&#39;, &#39;nicksism&#39;, &#39;nicolism&#39;, &#39;nidalism&#39;, &#39;nided&#39;, &#39;nidesism&#39;, &#39;nidorism&#39;, &#39;nidusism&#39;, &#39;niefsism&#39;, &#39;nieveism&#39;, &#39;nifesism&#39;, &#39;niffsism&#39;, &#39;niffyism&#39;, &#39;niftyism&#39;, &#39;nigerism&#39;, &#39;nighsism&#39;, &#39;nihilism&#39;, &#39;nikab&#39;, &#39;nikahism&#39;, &#39;nikauism&#39;, &#39;nillsism&#39;, &#39;nimbiism&#39;, &#39;nimbsism&#39;, &#39;nimpsism&#39;, &#39;ninerism&#39;, &#39;ninesism&#39;, &#39;ninonism&#39;, &#39;nipasism&#39;, &#39;nippyism&#39;, &#39;niqab&#39;, &#39;nirlsism&#39;, &#39;nirlyism&#39;, &#39;niseiism&#39;, &#39;nisseism&#39;, &#39;nisusism&#39;, &#39;niterism&#39;, &#39;nitesism&#39;, &#39;nitid&#39;, &#39;nitonism&#39;, &#39;nitreism&#39;, &#39;nitroism&#39;, &#39;nitryism&#39;, &#39;nittyism&#39;, &#39;nivalism&#39;, &#39;nixed&#39;, &#39;nixerism&#39;, &#39;nixesism&#39;, &#39;nixieism&#39;, &#39;nizamism&#39;, &#39;nkosiism&#39;, &#39;noahsism&#39;, &#39;nobbyism&#39;, &#39;nocksism&#39;, &#39;nodalism&#39;, &#39;noddyism&#39;, &#39;nodesism&#39;, &#39;nodusism&#39;, &#39;noelsism&#39;, &#39;noggsism&#39;, &#39;nohowism&#39;, &#39;noilsism&#39;, &#39;noilyism&#39;, &#39;nointism&#39;, &#39;noirsism&#39;, &#39;nolesism&#39;, &#39;nollsism&#39;, &#39;nolosism&#39;, &#39;nomasism&#39;, &#39;nomenism&#39;, &#39;nomesism&#39;, &#39;nomic&#39;, &#39;nomoiism&#39;, &#39;nomosism&#39;, &#39;nonasism&#39;, &#39;nonceism&#39;, &#39;nonesism&#39;, &#39;nonetism&#39;, &#39;nongsism&#39;, &#39;nonisism&#39;, &#39;nonnyism&#39;, &#39;nonylism&#39;, &#39;noobsism&#39;, &#39;nooitism&#39;, &#39;nooksism&#39;, &#39;nookyism&#39;, &#39;noonsism&#39;, &#39;noopsism&#39;, &#39;nopalism&#39;, &#39;noria&#39;, &#39;norisism&#39;, &#39;norksism&#39;, &#39;norma&#39;, &#39;normsism&#39;, &#39;nosed&#39;, &#39;noserism&#39;, &#39;nosesism&#39;, &#39;notalism&#39;, &#39;noted&#39;, &#39;noterism&#39;, &#39;notesism&#39;, &#39;notumism&#39;, &#39;nould&#39;, &#39;nouleism&#39;, &#39;noulsism&#39;, &#39;nounsism&#39;, &#39;nounyism&#39;, &#39;noupsism&#39;, &#39;novaeism&#39;, &#39;novasism&#39;, &#39;novumism&#39;, &#39;nowayism&#39;, &#39;nowed&#39;, &#39;nowlsism&#39;, &#39;nowtsism&#39;, &#39;nowtyism&#39;, &#39;noxalism&#39;, &#39;noxesism&#39;, &#39;noyauism&#39;, &#39;noyed&#39;, &#39;noyesism&#39;, &#39;nubbyism&#39;, &#39;nubia&#39;, &#39;nucha&#39;, &#39;nuddyism&#39;, &#39;nuderism&#39;, &#39;nudesism&#39;, &#39;nudieism&#39;, &#39;nudzhism&#39;, &#39;nuffsism&#39;, &#39;nugaeism&#39;, &#39;nuked&#39;, &#39;nukesism&#39;, &#39;nulla&#39;, &#39;nullsism&#39;, &#39;numbsism&#39;, &#39;numenism&#39;, &#39;nummyism&#39;, &#39;nunnyism&#39;, &#39;nurdsism&#39;, &#39;nurdyism&#39;, &#39;nurlsism&#39;, &#39;nurrsism&#39;, &#39;nutsoism&#39;, &#39;nutsyism&#39;, &#39;nyaffism&#39;, &#39;nyala&#39;, &#39;nyingism&#39;, &#39;nyssa&#39;, &#39;oaked&#39;, &#39;oakerism&#39;, &#39;oakumism&#39;, &#39;oared&#39;, &#39;oasesism&#39;, &#39;oasisism&#39;, &#39;oastsism&#39;, &#39;oatenism&#39;, &#39;oaterism&#39;, &#39;oathsism&#39;, &#39;oavesism&#39;, &#39;obangism&#39;, &#39;obeahism&#39;, &#39;obeliism&#39;, &#39;obeysism&#39;, &#39;obiasism&#39;, &#39;obied&#39;, &#39;obiitism&#39;, &#39;obitsism&#39;, &#39;objetism&#39;, &#39;oboesism&#39;, &#39;oboleism&#39;, &#39;oboliism&#39;, &#39;obolsism&#39;, &#39;occamism&#39;, &#39;ocherism&#39;, &#39;ochesism&#39;, &#39;ochreism&#39;, &#39;ochryism&#39;, &#39;ockerism&#39;, &#39;ocrea&#39;, &#39;octad&#39;, &#39;octanism&#39;, &#39;octasism&#39;, &#39;octylism&#39;, &#39;oculiism&#39;, &#39;odahsism&#39;, &#39;odalsism&#39;, &#39;odeonism&#39;, &#39;odeumism&#39;, &#39;odismism&#39;, &#39;odistism&#39;, &#39;odiumism&#39;, &#39;odorsism&#39;, &#39;odourism&#39;, &#39;odyleism&#39;, &#39;odylsism&#39;, &#39;ofaysism&#39;, &#39;offed&#39;, &#39;offieism&#39;, &#39;oflagism&#39;, &#39;ofterism&#39;, &#39;ogamsism&#39;, &#39;ogeed&#39;, &#39;ogeesism&#39;, &#39;ogginism&#39;, &#39;oghamism&#39;, &#39;ogiveism&#39;, &#39;ogled&#39;, &#39;oglerism&#39;, &#39;oglesism&#39;, &#39;ogmic&#39;, &#39;ogresism&#39;, &#39;ohiasism&#39;, &#39;ohingism&#39;, &#39;ohmic&#39;, &#39;ohoneism&#39;, &#39;oidia&#39;, &#39;oiled&#39;, &#39;oilerism&#39;, &#39;oinksism&#39;, &#39;ointsism&#39;, &#39;ojimeism&#39;, &#39;okapiism&#39;, &#39;okaysism&#39;, &#39;okehsism&#39;, &#39;okrasism&#39;, &#39;oktasism&#39;, &#39;oldieism&#39;, &#39;oleic&#39;, &#39;oleinism&#39;, &#39;olentism&#39;, &#39;oleosism&#39;, &#39;oleumism&#39;, &#39;oliosism&#39;, &#39;ollasism&#39;, &#39;ollavism&#39;, &#39;ollerism&#39;, &#39;ollieism&#39;, &#39;ologyism&#39;, &#39;olpaeism&#39;, &#39;olpesism&#39;, &#39;omasa&#39;, &#39;omberism&#39;, &#39;ombusism&#39;, &#39;omensism&#39;, &#39;omersism&#39;, &#39;omitsism&#39;, &#39;omlahism&#39;, &#39;omovsism&#39;, &#39;omrahism&#39;, &#39;oncerism&#39;, &#39;oncesism&#39;, &#39;oncetism&#39;, &#39;oncusism&#39;, &#39;onelyism&#39;, &#39;onersism&#39;, &#39;oneryism&#39;, &#39;oniumism&#39;, &#39;onkusism&#39;, &#39;onlayism&#39;, &#39;onned&#39;, &#39;ontic&#39;, &#39;oobitism&#39;, &#39;oohed&#39;, &#39;oomphism&#39;, &#39;oontsism&#39;, &#39;ooped&#39;, &#39;oorieism&#39;, &#39;oosesism&#39;, &#39;ootid&#39;, &#39;oozed&#39;, &#39;oozesism&#39;, &#39;opahsism&#39;, &#39;opalsism&#39;, &#39;opensism&#39;, &#39;opepeism&#39;, &#39;opingism&#39;, &#39;opposism&#39;, &#39;opsinism&#39;, &#39;opted&#39;, &#39;opterism&#39;, &#39;orachism&#39;, &#39;oracyism&#39;, &#39;oralsism&#39;, &#39;orangism&#39;, &#39;orantism&#39;, &#39;orateism&#39;, &#39;orbed&#39;, &#39;orcasism&#39;, &#39;orcinism&#39;, &#39;ordosism&#39;, &#39;oread&#39;, &#39;orfesism&#39;, &#39;orgia&#39;, &#39;orgic&#39;, &#39;orgueism&#39;, &#39;oribiism&#39;, &#39;orielism&#39;, &#39;orixa&#39;, &#39;orlesism&#39;, &#39;orlonism&#39;, &#39;orlopism&#39;, &#39;ormerism&#39;, &#39;ornisism&#39;, &#39;orpinism&#39;, &#39;orrisism&#39;, &#39;orthoism&#39;, &#39;orvalism&#39;, &#39;orzosism&#39;, &#39;oscarism&#39;, &#39;oshac&#39;, &#39;osierism&#39;, &#39;osmic&#39;, &#39;osmolism&#39;, &#39;ossia&#39;, &#39;ostia&#39;, &#39;otakuism&#39;, &#39;otaryism&#39;, &#39;ottarism&#39;, &#39;ottosism&#39;, &#39;oubitism&#39;, &#39;ouchtism&#39;, &#39;ouensism&#39;, &#39;ouija&#39;, &#39;oulksism&#39;, &#39;oumasism&#39;, &#39;oundyism&#39;, &#39;oupasism&#39;, &#39;ouped&#39;, &#39;oupheism&#39;, &#39;ouphsism&#39;, &#39;ourieism&#39;, &#39;ouselism&#39;, &#39;oustsism&#39;, &#39;outbyism&#39;, &#39;outed&#39;, &#39;outreism&#39;, &#39;outroism&#39;, &#39;outta&#39;, &#39;ouzelism&#39;, &#39;ouzosism&#39;, &#39;ovalsism&#39;, &#39;ovelsism&#39;, &#39;ovensism&#39;, &#39;oversism&#39;, &#39;ovistism&#39;, &#39;ovoliism&#39;, &#39;ovoloism&#39;, &#39;ovuleism&#39;, &#39;owcheism&#39;, &#39;owiesism&#39;, &#39;owled&#39;, &#39;owlerism&#39;, &#39;owletism&#39;, &#39;owned&#39;, &#39;owresism&#39;, &#39;owrieism&#39;, &#39;owsenism&#39;, &#39;oxbowism&#39;, &#39;oxersism&#39;, &#39;oxeyeism&#39;, &#39;oxidsism&#39;, &#39;oxiesism&#39;, &#39;oximeism&#39;, &#39;oximsism&#39;, &#39;oxlipism&#39;, &#39;oxterism&#39;, &#39;oyersism&#39;, &#39;ozekiism&#39;, &#39;ozzieism&#39;, &#39;paalsism&#39;, &#39;paansism&#39;, &#39;pacasism&#39;, &#39;paced&#39;, &#39;pacerism&#39;, &#39;pacesism&#39;, &#39;paceyism&#39;, &#39;pacha&#39;, &#39;packsism&#39;, &#39;pacosism&#39;, &#39;pacta&#39;, &#39;pactsism&#39;, &#39;padisism&#39;, &#39;padleism&#39;, &#39;padma&#39;, &#39;padreism&#39;, &#39;padriism&#39;, &#39;paeanism&#39;, &#39;paedoism&#39;, &#39;paeonism&#39;, &#39;paged&#39;, &#39;pagerism&#39;, &#39;pagesism&#39;, &#39;pagleism&#39;, &#39;pagod&#39;, &#39;pagriism&#39;, &#39;paiksism&#39;, &#39;pailsism&#39;, &#39;painsism&#39;, &#39;paireism&#39;, &#39;pairsism&#39;, &#39;paisa&#39;, &#39;paiseism&#39;, &#39;pakka&#39;, &#39;palasism&#39;, &#39;palayism&#39;, &#39;palea&#39;, &#39;paled&#39;, &#39;palesism&#39;, &#39;paletism&#39;, &#39;palisism&#39;, &#39;palkiism&#39;, &#39;palla&#39;, &#39;pallsism&#39;, &#39;pallyism&#39;, &#39;palmsism&#39;, &#39;palmyism&#39;, &#39;palpiism&#39;, &#39;palpsism&#39;, &#39;palsa&#39;, &#39;pampa&#39;, &#39;panaxism&#39;, &#39;panceism&#39;, &#39;panda&#39;, &#39;pandsism&#39;, &#39;pandyism&#39;, &#39;paned&#39;, &#39;panesism&#39;, &#39;panga&#39;, &#39;pangsism&#39;, &#39;panimism&#39;, &#39;pankoism&#39;, &#39;panneism&#39;, &#39;panniism&#39;, &#39;pantoism&#39;, &#39;pantsism&#39;, &#39;pantyism&#39;, &#39;paoliism&#39;, &#39;paoloism&#39;, &#39;papasism&#39;, &#39;papawism&#39;, &#39;papesism&#39;, &#39;pappiism&#39;, &#39;pappyism&#39;, &#39;paraeism&#39;, &#39;parasism&#39;, &#39;parchism&#39;, &#39;pardiism&#39;, &#39;pardsism&#39;, &#39;pardyism&#39;, &#39;pared&#39;, &#39;parenism&#39;, &#39;pareoism&#39;, &#39;paresism&#39;, &#39;pareuism&#39;, &#39;parevism&#39;, &#39;pargeism&#39;, &#39;pargoism&#39;, &#39;parisism&#39;, &#39;parkiism&#39;, &#39;parksism&#39;, &#39;parkyism&#39;, &#39;parleism&#39;, &#39;parlyism&#39;, &#39;parma&#39;, &#39;parolism&#39;, &#39;parpsism&#39;, &#39;parra&#39;, &#39;parrsism&#39;, &#39;partiism&#39;, &#39;partsism&#39;, &#39;parveism&#39;, &#39;parvoism&#39;, &#39;paseoism&#39;, &#39;pasesism&#39;, &#39;pasha&#39;, &#39;pashmism&#39;, &#39;paska&#39;, &#39;paspyism&#39;, &#39;passeism&#39;, &#39;pastsism&#39;, &#39;pated&#39;, &#39;patenism&#39;, &#39;paterism&#39;, &#39;patesism&#39;, &#39;pathsism&#39;, &#39;patinism&#39;, &#39;patka&#39;, &#39;patlyism&#39;, &#39;patteism&#39;, &#39;patusism&#39;, &#39;pauasism&#39;, &#39;paulsism&#39;, &#39;pavanism&#39;, &#39;paved&#39;, &#39;pavenism&#39;, &#39;paverism&#39;, &#39;pavesism&#39;, &#39;pavid&#39;, &#39;pavinism&#39;, &#39;pavisism&#39;, &#39;pawasism&#39;, &#39;pawawism&#39;, &#39;pawed&#39;, &#39;pawerism&#39;, &#39;pawksism&#39;, &#39;pawkyism&#39;, &#39;pawlsism&#39;, &#39;pawnsism&#39;, &#39;paxesism&#39;, &#39;payed&#39;, &#39;payorism&#39;, &#39;paysd&#39;, &#39;peageism&#39;, &#39;peagsism&#39;, &#39;peaksism&#39;, &#39;peakyism&#39;, &#39;pealsism&#39;, &#39;peansism&#39;, &#39;peareism&#39;, &#39;pearsism&#39;, &#39;peartism&#39;, &#39;peaseism&#39;, &#39;peatsism&#39;, &#39;peatyism&#39;, &#39;peavyism&#39;, &#39;peazeism&#39;, &#39;pebasism&#39;, &#39;pechsism&#39;, &#39;peckeism&#39;, &#39;pecksism&#39;, &#39;peckyism&#39;, &#39;pedesism&#39;, &#39;pedisism&#39;, &#39;pedroism&#39;, &#39;peeceism&#39;, &#39;peeksism&#39;, &#39;peelsism&#39;, &#39;peensism&#39;, &#39;peeoyism&#39;, &#39;peepeism&#39;, &#39;peepsism&#39;, &#39;peersism&#39;, &#39;peeryism&#39;, &#39;peeveism&#39;, &#39;peggyism&#39;, &#39;peghsism&#39;, &#39;peinsism&#39;, &#39;peiseism&#39;, &#39;peizeism&#39;, &#39;pekanism&#39;, &#39;pekesism&#39;, &#39;pekinism&#39;, &#39;pekoeism&#39;, &#39;pelasism&#39;, &#39;pelauism&#39;, &#39;pelesism&#39;, &#39;pelfsism&#39;, &#39;pellsism&#39;, &#39;pelma&#39;, &#39;pelonism&#39;, &#39;pelta&#39;, &#39;peltsism&#39;, &#39;pendsism&#39;, &#39;penduism&#39;, &#39;pened&#39;, &#39;penesism&#39;, &#39;pengoism&#39;, &#39;penieism&#39;, &#39;penisism&#39;, &#39;penksism&#39;, &#39;penna&#39;, &#39;penniism&#39;, &#39;pentsism&#39;, &#39;peonsism&#39;, &#39;peonyism&#39;, &#39;pepla&#39;, &#39;peposism&#39;, &#39;peppyism&#39;, &#39;pepsiism&#39;, &#39;peraiism&#39;, &#39;perceism&#39;, &#39;percsism&#39;, &#39;perduism&#39;, &#39;perdyism&#39;, &#39;perea&#39;, &#39;peresism&#39;, &#39;perisism&#39;, &#39;perksism&#39;, &#39;permsism&#39;, &#39;pernsism&#39;, &#39;perogism&#39;, &#39;perpsism&#39;, &#39;perryism&#39;, &#39;perseism&#39;, &#39;perstism&#39;, &#39;pertsism&#39;, &#39;perveism&#39;, &#39;pervoism&#39;, &#39;pervsism&#39;, &#39;pervyism&#39;, &#39;pesosism&#39;, &#39;pestsism&#39;, &#39;pestyism&#39;, &#39;petarism&#39;, &#39;peterism&#39;, &#39;petitism&#39;, &#39;petreism&#39;, &#39;petriism&#39;, &#39;pettiism&#39;, &#39;pettoism&#39;, &#39;peweeism&#39;, &#39;pewitism&#39;, &#39;peyseism&#39;, &#39;phageism&#39;, &#39;phangism&#39;, &#39;phareism&#39;, &#39;pharmism&#39;, &#39;pheerism&#39;, &#39;pheneism&#39;, &#39;pheonism&#39;, &#39;pheseism&#39;, &#39;phialism&#39;, &#39;phishism&#39;, &#39;phizzism&#39;, &#39;phloxism&#39;, &#39;phoca&#39;, &#39;phonoism&#39;, &#39;phonsism&#39;, &#39;photsism&#39;, &#39;phphtism&#39;, &#39;phutsism&#39;, &#39;phyla&#39;, &#39;phyleism&#39;, &#39;pianiism&#39;, &#39;piansism&#39;, &#39;pibalism&#39;, &#39;picalism&#39;, &#39;picasism&#39;, &#39;piccyism&#39;, &#39;picksism&#39;, &#39;picotism&#39;, &#39;picra&#39;, &#39;piculism&#39;, &#39;piend&#39;, &#39;piersism&#39;, &#39;piertism&#39;, &#39;pieta&#39;, &#39;pietsism&#39;, &#39;piezoism&#39;, &#39;pightism&#39;, &#39;pigmyism&#39;, &#39;piingism&#39;, &#39;pikasism&#39;, &#39;pikauism&#39;, &#39;piked&#39;, &#39;pikerism&#39;, &#39;pikesism&#39;, &#39;pikeyism&#39;, &#39;pikisism&#39;, &#39;pikulism&#39;, &#39;pilaeism&#39;, &#39;pilafism&#39;, &#39;pilaoism&#39;, &#39;pilarism&#39;, &#39;pilauism&#39;, &#39;pilawism&#39;, &#39;pilchism&#39;, &#39;pilea&#39;, &#39;piled&#39;, &#39;pileiism&#39;, &#39;pilerism&#39;, &#39;pilesism&#39;, &#39;pilisism&#39;, &#39;pillsism&#39;, &#39;pilowism&#39;, &#39;pilumism&#39;, &#39;pilusism&#39;, &#39;pimasism&#39;, &#39;pimpsism&#39;, &#39;pinasism&#39;, &#39;pined&#39;, &#39;pinesism&#39;, &#39;pingoism&#39;, &#39;pingsism&#39;, &#39;pinkoism&#39;, &#39;pinksism&#39;, &#39;pinna&#39;, &#39;pinnyism&#39;, &#39;pinonism&#39;, &#39;pinotism&#39;, &#39;pinta&#39;, &#39;pintsism&#39;, &#39;pinupism&#39;, &#39;pionsism&#39;, &#39;pionyism&#39;, &#39;piousism&#39;, &#39;pioyeism&#39;, &#39;pioysism&#39;, &#39;pipalism&#39;, &#39;pipasism&#39;, &#39;piped&#39;, &#39;pipesism&#39;, &#39;pipetism&#39;, &#39;pipisism&#39;, &#39;pipitism&#39;, &#39;pippyism&#39;, &#39;pipulism&#39;, &#39;piraiism&#39;, &#39;pirlsism&#39;, &#39;pirnsism&#39;, &#39;pirogism&#39;, &#39;piscoism&#39;, &#39;pisesism&#39;, &#39;piskyism&#39;, &#39;pisosism&#39;, &#39;pissyism&#39;, &#39;pisteism&#39;, &#39;pitasism&#39;, &#39;pithsism&#39;, &#39;pitonism&#39;, &#39;pitotism&#39;, &#39;pitta&#39;, &#39;piumsism&#39;, &#39;pixesism&#39;, &#39;pized&#39;, &#39;pizesism&#39;, &#39;plaasism&#39;, &#39;plackism&#39;, &#39;plageism&#39;, &#39;plansism&#39;, &#39;plapsism&#39;, &#39;plashism&#39;, &#39;plasmism&#39;, &#39;plastism&#39;, &#39;platsism&#39;, &#39;plattism&#39;, &#39;platyism&#39;, &#39;playa&#39;, &#39;playsism&#39;, &#39;pleasism&#39;, &#39;plebeism&#39;, &#39;plebsism&#39;, &#39;plena&#39;, &#39;pleonism&#39;, &#39;pleshism&#39;, &#39;plewsism&#39;, &#39;plica&#39;, &#39;pliesism&#39;, &#39;plimsism&#39;, &#39;plingism&#39;, &#39;plinkism&#39;, &#39;ploatism&#39;, &#39;plodsism&#39;, &#39;plongism&#39;, &#39;plonkism&#39;, &#39;plookism&#39;, &#39;plopsism&#39;, &#39;plotsism&#39;, &#39;plotzism&#39;, &#39;ploukism&#39;, &#39;plowsism&#39;, &#39;ployeism&#39;, &#39;ploysism&#39;, &#39;pluesism&#39;, &#39;pluffism&#39;, &#39;plugsism&#39;, &#39;plumsism&#39;, &#39;plumyism&#39;, &#39;pluotism&#39;, &#39;plutoism&#39;, &#39;plyerism&#39;, &#39;poachism&#39;, &#39;poaka&#39;, &#39;poakeism&#39;, &#39;poboyism&#39;, &#39;pocksism&#39;, &#39;pockyism&#39;, &#39;podalism&#39;, &#39;poddyism&#39;, &#39;podexism&#39;, &#39;podgeism&#39;, &#39;podgyism&#39;, &#39;podia&#39;, &#39;poemsism&#39;, &#39;poepsism&#39;, &#39;poetsism&#39;, &#39;pogeyism&#39;, &#39;poggeism&#39;, &#39;pogosism&#39;, &#39;pohed&#39;, &#39;poiluism&#39;, &#39;poind&#39;, &#39;pokalism&#39;, &#39;poked&#39;, &#39;pokesism&#39;, &#39;pokeyism&#39;, &#39;pokieism&#39;, &#39;poled&#39;, &#39;polerism&#39;, &#39;polesism&#39;, &#39;poleyism&#39;, &#39;polioism&#39;, &#39;polisism&#39;, &#39;poljeism&#39;, &#39;polksism&#39;, &#39;pollsism&#39;, &#39;pollyism&#39;, &#39;polosism&#39;, &#39;poltsism&#39;, &#39;polysism&#39;, &#39;pombeism&#39;, &#39;pomesism&#39;, &#39;pommyism&#39;, &#39;pomosism&#39;, &#39;pompsism&#39;, &#39;ponceism&#39;, &#39;poncyism&#39;, &#39;pondsism&#39;, &#39;ponesism&#39;, &#39;poneyism&#39;, &#39;ponga&#39;, &#39;pongoism&#39;, &#39;pongsism&#39;, &#39;pongyism&#39;, &#39;ponksism&#39;, &#39;pontsism&#39;, &#39;pontyism&#39;, &#39;ponzuism&#39;, &#39;poodsism&#39;, &#39;pooed&#39;, &#39;poofsism&#39;, &#39;poofyism&#39;, &#39;poohsism&#39;, &#39;pooja&#39;, &#39;pooka&#39;, &#39;pooksism&#39;, &#39;poolsism&#39;, &#39;poonsism&#39;, &#39;poopsism&#39;, &#39;poopyism&#39;, &#39;pooriism&#39;, &#39;poortism&#39;, &#39;pootsism&#39;, &#39;pooveism&#39;, &#39;poovyism&#39;, &#39;popesism&#39;, &#39;poppa&#39;, &#39;popsyism&#39;, &#39;poraeism&#39;, &#39;poralism&#39;, &#39;pored&#39;, &#39;porerism&#39;, &#39;poresism&#39;, &#39;porgeism&#39;, &#39;porgyism&#39;, &#39;porinism&#39;, &#39;porksism&#39;, &#39;porkyism&#39;, &#39;pornoism&#39;, &#39;pornsism&#39;, &#39;pornyism&#39;, &#39;porta&#39;, &#39;portsism&#39;, &#39;portyism&#39;, &#39;posed&#39;, &#39;posesism&#39;, &#39;poseyism&#39;, &#39;poshoism&#39;, &#39;postsism&#39;, &#39;potaeism&#39;, &#39;potchism&#39;, &#39;poted&#39;, &#39;potesism&#39;, &#39;potinism&#39;, &#39;potooism&#39;, &#39;potsyism&#39;, &#39;pottoism&#39;, &#39;pottsism&#39;, &#39;pottyism&#39;, &#39;pouffism&#39;, &#39;poufsism&#39;, &#39;poukeism&#39;, &#39;pouksism&#39;, &#39;pouleism&#39;, &#39;poulpism&#39;, &#39;poultism&#39;, &#39;poupeism&#39;, &#39;pouptism&#39;, &#39;poursism&#39;, &#39;poutsism&#39;, &#39;powanism&#39;, &#39;powinism&#39;, &#39;pownd&#39;, &#39;pownsism&#39;, &#39;pownyism&#39;, &#39;powreism&#39;, &#39;poxed&#39;, &#39;poxesism&#39;, &#39;poyntism&#39;, &#39;poyouism&#39;, &#39;poyseism&#39;, &#39;pozzyism&#39;, &#39;praamism&#39;, &#39;pradsism&#39;, &#39;prahuism&#39;, &#39;pramsism&#39;, &#39;prana&#39;, &#39;prangism&#39;, &#39;praosism&#39;, &#39;praseism&#39;, &#39;prateism&#39;, &#39;pratsism&#39;, &#39;prattism&#39;, &#39;pratyism&#39;, &#39;prausism&#39;, &#39;praysism&#39;, &#39;predyism&#39;, &#39;preed&#39;, &#39;preesism&#39;, &#39;preifism&#39;, &#39;premsism&#39;, &#39;premyism&#39;, &#39;prentism&#39;, &#39;preonism&#39;, &#39;preopism&#39;, &#39;prepsism&#39;, &#39;presa&#39;, &#39;preseism&#39;, &#39;prestism&#39;, &#39;preveism&#39;, &#39;prexyism&#39;, &#39;preysism&#39;, &#39;prialism&#39;, &#39;pricyism&#39;, &#39;priefism&#39;, &#39;prierism&#39;, &#39;priesism&#39;, &#39;prigsism&#39;, &#39;prillism&#39;, &#39;prima&#39;, &#39;primiism&#39;, &#39;primpism&#39;, &#39;primsism&#39;, &#39;primyism&#39;, &#39;prinkism&#39;, &#39;prionism&#39;, &#39;priseism&#39;, &#39;prissism&#39;, &#39;proasism&#39;, &#39;probsism&#39;, &#39;prodsism&#39;, &#39;proemism&#39;, &#39;profsism&#39;, &#39;progsism&#39;, &#39;proinism&#39;, &#39;prokeism&#39;, &#39;proleism&#39;, &#39;prollism&#39;, &#39;promoism&#39;, &#39;promsism&#39;, &#39;pronkism&#39;, &#39;propsism&#39;, &#39;proreism&#39;, &#39;prosoism&#39;, &#39;prossism&#39;, &#39;prostism&#39;, &#39;prosyism&#39;, &#39;protoism&#39;, &#39;proulism&#39;, &#39;prowsism&#39;, &#39;proynism&#39;, &#39;pruntism&#39;, &#39;pruta&#39;, &#39;pryerism&#39;, &#39;pryseism&#39;, &#39;pseud&#39;, &#39;pshawism&#39;, &#39;psionism&#39;, &#39;psoaeism&#39;, &#39;psoaiism&#39;, &#39;psoasism&#39;, &#39;psora&#39;, &#39;psychism&#39;, &#39;psyopism&#39;, &#39;pubcoism&#39;, &#39;pubesism&#39;, &#39;pubisism&#39;, &#39;pucanism&#39;, &#39;pucerism&#39;, &#39;pucesism&#39;, &#39;pucka&#39;, &#39;pucksism&#39;, &#39;puddyism&#39;, &#39;pudgeism&#39;, &#39;pudic&#39;, &#39;pudorism&#39;, &#39;pudsyism&#39;, &#39;pudusism&#39;, &#39;puersism&#39;, &#39;puffa&#39;, &#39;puffsism&#39;, &#39;puggyism&#39;, &#39;pugilism&#39;, &#39;puhasism&#39;, &#39;pujahism&#39;, &#39;pujasism&#39;, &#39;pukasism&#39;, &#39;puked&#39;, &#39;pukerism&#39;, &#39;pukesism&#39;, &#39;pukeyism&#39;, &#39;pukka&#39;, &#39;pukusism&#39;, &#39;pulaoism&#39;, &#39;pulasism&#39;, &#39;puled&#39;, &#39;pulerism&#39;, &#39;pulesism&#39;, &#39;pulikism&#39;, &#39;pulisism&#39;, &#39;pulka&#39;, &#39;pulksism&#39;, &#39;pulliism&#39;, &#39;pullsism&#39;, &#39;pullyism&#39;, &#39;pulmoism&#39;, &#39;pulpsism&#39;, &#39;pulusism&#39;, &#39;pumasism&#39;, &#39;pumieism&#39;, &#39;pumpsism&#39;, &#39;punasism&#39;, &#39;punceism&#39;, &#39;punga&#39;, &#39;pungsism&#39;, &#39;punjiism&#39;, &#39;punka&#39;, &#39;punksism&#39;, &#39;punkyism&#39;, &#39;punnyism&#39;, &#39;puntoism&#39;, &#39;puntsism&#39;, &#39;puntyism&#39;, &#39;pupaeism&#39;, &#39;pupasism&#39;, &#39;pupusism&#39;, &#39;purda&#39;, &#39;pured&#39;, &#39;puresism&#39;, &#39;purinism&#39;, &#39;purisism&#39;, &#39;purlsism&#39;, &#39;purpyism&#39;, &#39;purrsism&#39;, &#39;pursyism&#39;, &#39;purtyism&#39;, &#39;pusesism&#39;, &#39;pusleism&#39;, &#39;pussyism&#39;, &#39;putid&#39;, &#39;putonism&#39;, &#39;puttiism&#39;, &#39;puttoism&#39;, &#39;puttsism&#39;, &#39;puzelism&#39;, &#39;pwned&#39;, &#39;pyatsism&#39;, &#39;pyetsism&#39;, &#39;pygalism&#39;, &#39;pyinsism&#39;, &#39;pylonism&#39;, &#39;pyned&#39;, &#39;pynesism&#39;, &#39;pyoid&#39;, &#39;pyotsism&#39;, &#39;pyralism&#39;, &#39;pyranism&#39;, &#39;pyresism&#39;, &#39;pyrexism&#39;, &#39;pyric&#39;, &#39;pyrosism&#39;, &#39;pyxed&#39;, &#39;pyxesism&#39;, &#39;pyxieism&#39;, &#39;pyxisism&#39;, &#39;pzazzism&#39;, &#39;qadisism&#39;, &#39;qaidsism&#39;, &#39;qajaqism&#39;, &#39;qanatism&#39;, &#39;qapikism&#39;, &#39;qibla&#39;, &#39;qophsism&#39;, &#39;qorma&#39;, &#39;quadsism&#39;, &#39;quaffism&#39;, &#39;quagsism&#39;, &#39;quairism&#39;, &#39;quaisism&#39;, &#39;quakyism&#39;, &#39;qualeism&#39;, &#39;quantism&#39;, &#39;quareism&#39;, &#39;quassism&#39;, &#39;quateism&#39;, &#39;quatsism&#39;, &#39;quayd&#39;, &#39;quaysism&#39;, &#39;qubitism&#39;, &#39;queanism&#39;, &#39;quemeism&#39;, &#39;quena&#39;, &#39;quernism&#39;, &#39;queynism&#39;, &#39;queysism&#39;, &#39;quichism&#39;, &#39;quidsism&#39;, &#39;quiffism&#39;, &#39;quimsism&#39;, &#39;quina&#39;, &#39;quineism&#39;, &#39;quinoism&#39;, &#39;quinsism&#39;, &#39;quintism&#39;, &#39;quipoism&#39;, &#39;quipsism&#39;, &#39;quipuism&#39;, &#39;quireism&#39;, &#39;quirtism&#39;, &#39;quistism&#39;, &#39;quitsism&#39;, &#39;quoad&#39;, &#39;quodsism&#39;, &#39;quoifism&#39;, &#39;quoinism&#39;, &#39;quoitism&#39;, &#39;quollism&#39;, &#39;quonkism&#39;, &#39;quopsism&#39;, &#39;qurshism&#39;, &#39;quyteism&#39;, &#39;rabatism&#39;, &#39;rabic&#39;, &#39;rabisism&#39;, &#39;raced&#39;, &#39;racesism&#39;, &#39;racheism&#39;, &#39;racksism&#39;, &#39;raconism&#39;, &#39;radgeism&#39;, &#39;radixism&#39;, &#39;radonism&#39;, &#39;raffsism&#39;, &#39;raftsism&#39;, &#39;ragasism&#39;, &#39;ragdeism&#39;, &#39;raged&#39;, &#39;rageeism&#39;, &#39;ragerism&#39;, &#39;ragesism&#39;, &#39;ragga&#39;, &#39;raggsism&#39;, &#39;raggyism&#39;, &#39;ragisism&#39;, &#39;ragusism&#39;, &#39;rahed&#39;, &#39;rahuiism&#39;, &#39;raiasism&#39;, &#39;raidsism&#39;, &#39;raiksism&#39;, &#39;raileism&#39;, &#39;railsism&#39;, &#39;raineism&#39;, &#39;rainsism&#39;, &#39;raird&#39;, &#39;raita&#39;, &#39;raitsism&#39;, &#39;rajasism&#39;, &#39;rajesism&#39;, &#39;raked&#39;, &#39;rakeeism&#39;, &#39;rakerism&#39;, &#39;rakesism&#39;, &#39;rakia&#39;, &#39;rakisism&#39;, &#39;rakusism&#39;, &#39;ralesism&#39;, &#39;ramalism&#39;, &#39;rameeism&#39;, &#39;rametism&#39;, &#39;ramieism&#39;, &#39;raminism&#39;, &#39;ramisism&#39;, &#39;rammyism&#39;, &#39;rampsism&#39;, &#39;ramusism&#39;, &#39;ranasism&#39;, &#39;ranceism&#39;, &#39;randsism&#39;, &#39;raneeism&#39;, &#39;ranga&#39;, &#39;rangiism&#39;, &#39;rangsism&#39;, &#39;rangyism&#39;, &#39;ranid&#39;, &#39;ranisism&#39;, &#39;rankeism&#39;, &#39;ranksism&#39;, &#39;rantsism&#39;, &#39;raped&#39;, &#39;raperism&#39;, &#39;rapesism&#39;, &#39;rapheism&#39;, &#39;rappeism&#39;, &#39;rared&#39;, &#39;rareeism&#39;, &#39;raresism&#39;, &#39;rarksism&#39;, &#39;rased&#39;, &#39;raserism&#39;, &#39;rasesism&#39;, &#39;raspsism&#39;, &#39;rasseism&#39;, &#39;rasta&#39;, &#39;ratalism&#39;, &#39;ratanism&#39;, &#39;ratasism&#39;, &#39;ratchism&#39;, &#39;rated&#39;, &#39;ratelism&#39;, &#39;raterism&#39;, &#39;ratesism&#39;, &#39;ratha&#39;, &#39;ratheism&#39;, &#39;rathsism&#39;, &#39;ratooism&#39;, &#39;ratosism&#39;, &#39;ratusism&#39;, &#39;raunsism&#39;, &#39;raupoism&#39;, &#39;raved&#39;, &#39;ravelism&#39;, &#39;raverism&#39;, &#39;ravesism&#39;, &#39;raveyism&#39;, &#39;ravinism&#39;, &#39;rawerism&#39;, &#39;rawinism&#39;, &#39;rawlyism&#39;, &#39;rawnsism&#39;, &#39;raxed&#39;, &#39;raxesism&#39;, &#39;rayahism&#39;, &#39;rayasism&#39;, &#39;rayed&#39;, &#39;rayleism&#39;, &#39;rayneism&#39;, &#39;razed&#39;, &#39;razeeism&#39;, &#39;razerism&#39;, &#39;razesism&#39;, &#39;razooism&#39;, &#39;readd&#39;, &#39;readsism&#39;, &#39;reaisism&#39;, &#39;reaksism&#39;, &#39;realoism&#39;, &#39;realsism&#39;, &#39;reameism&#39;, &#39;reamsism&#39;, &#39;reamyism&#39;, &#39;reansism&#39;, &#39;reapsism&#39;, &#39;rearsism&#39;, &#39;reastism&#39;, &#39;reata&#39;, &#39;reateism&#39;, &#39;reaveism&#39;, &#39;rebbeism&#39;, &#39;rebec&#39;, &#39;rebid&#39;, &#39;rebitism&#39;, &#39;rebopism&#39;, &#39;rebuyism&#39;, &#39;recalism&#39;, &#39;recceism&#39;, &#39;reccoism&#39;, &#39;reccyism&#39;, &#39;recitism&#39;, &#39;recksism&#39;, &#39;reconism&#39;, &#39;recta&#39;, &#39;rectiism&#39;, &#39;rectoism&#39;, &#39;redanism&#39;, &#39;reddsism&#39;, &#39;reddyism&#39;, &#39;reded&#39;, &#39;redesism&#39;, &#39;redia&#39;, &#39;redid&#39;, &#39;redipism&#39;, &#39;redlyism&#39;, &#39;redonism&#39;, &#39;redosism&#39;, &#39;redoxism&#39;, &#39;redryism&#39;, &#39;redub&#39;, &#39;reduxism&#39;, &#39;redyeism&#39;, &#39;reechism&#39;, &#39;reedeism&#39;, &#39;reedsism&#39;, &#39;reefsism&#39;, &#39;reefyism&#39;, &#39;reeksism&#39;, &#39;reekyism&#39;, &#39;reelsism&#39;, &#39;reensism&#39;, &#39;reestism&#39;, &#39;reeveism&#39;, &#39;refed&#39;, &#39;refelism&#39;, &#39;reffoism&#39;, &#39;refisism&#39;, &#39;refixism&#39;, &#39;reflyism&#39;, &#39;refryism&#39;, &#39;regarism&#39;, &#39;regesism&#39;, &#39;reggoism&#39;, &#39;regieism&#39;, &#39;regma&#39;, &#39;regna&#39;, &#39;regosism&#39;, &#39;regurism&#39;, &#39;rehemism&#39;, &#39;reifsism&#39;, &#39;reifyism&#39;, &#39;reikiism&#39;, &#39;reiksism&#39;, &#39;reinkism&#39;, &#39;reinsism&#39;, &#39;reird&#39;, &#39;reistism&#39;, &#39;reiveism&#39;, &#39;rejigism&#39;, &#39;rejonism&#39;, &#39;reked&#39;, &#39;rekesism&#39;, &#39;rekeyism&#39;, &#39;reletism&#39;, &#39;relieism&#39;, &#39;relitism&#39;, &#39;relloism&#39;, &#39;remanism&#39;, &#39;remapism&#39;, &#39;remenism&#39;, &#39;remetism&#39;, &#39;remexism&#39;, &#39;remixism&#39;, &#39;renayism&#39;, &#39;rendsism&#39;, &#39;reneyism&#39;, &#39;renga&#39;, &#39;renigism&#39;, &#39;reninism&#39;, &#39;renneism&#39;, &#39;renosism&#39;, &#39;renteism&#39;, &#39;rentsism&#39;, &#39;reoilism&#39;, &#39;reorgism&#39;, &#39;repegism&#39;, &#39;repinism&#39;, &#39;repla&#39;, &#39;reposism&#39;, &#39;repotism&#39;, &#39;reppsism&#39;, &#39;reproism&#39;, &#39;reranism&#39;, &#39;rerigism&#39;, &#39;resatism&#39;, &#39;resawism&#39;, &#39;resayism&#39;, &#39;reseeism&#39;, &#39;resesism&#39;, &#39;resewism&#39;, &#39;resid&#39;, &#39;resitism&#39;, &#39;resod&#39;, &#39;resowism&#39;, &#39;restoism&#39;, &#39;restsism&#39;, &#39;restyism&#39;, &#39;resusism&#39;, &#39;retagism&#39;, &#39;retaxism&#39;, &#39;retemism&#39;, &#39;retia&#39;, &#39;retieism&#39;, &#39;retoxism&#39;, &#39;revetism&#39;, &#39;revieism&#39;, &#39;rewanism&#39;, &#39;rewaxism&#39;, &#39;rewed&#39;, &#39;rewetism&#39;, &#39;rewinism&#39;, &#39;rewonism&#39;, &#39;rewthism&#39;, &#39;rexesism&#39;, &#39;rezesism&#39;, &#39;rheasism&#39;, &#39;rhemeism&#39;, &#39;rheumism&#39;, &#39;rhiesism&#39;, &#39;rhimeism&#39;, &#39;rhineism&#39;, &#39;rhodyism&#39;, &#39;rhomb&#39;, &#39;rhoneism&#39;, &#39;rhumb&#39;, &#39;rhyneism&#39;, &#39;rhyta&#39;, &#39;riadsism&#39;, &#39;rialsism&#39;, &#39;riantism&#39;, &#39;riata&#39;, &#39;ribasism&#39;, &#39;ribbyism&#39;, &#39;ribesism&#39;, &#39;riced&#39;, &#39;ricerism&#39;, &#39;ricesism&#39;, &#39;riceyism&#39;, &#39;richtism&#39;, &#39;ricinism&#39;, &#39;ricksism&#39;, &#39;ridesism&#39;, &#39;ridgyism&#39;, &#39;ridic&#39;, &#39;rielsism&#39;, &#39;riemsism&#39;, &#39;rieveism&#39;, &#39;riferism&#39;, &#39;riffsism&#39;, &#39;rifteism&#39;, &#39;riftsism&#39;, &#39;riftyism&#39;, &#39;riggsism&#39;, &#39;rigolism&#39;, &#39;riled&#39;, &#39;rilesism&#39;, &#39;rileyism&#39;, &#39;rilleism&#39;, &#39;rillsism&#39;, &#39;rimaeism&#39;, &#39;rimed&#39;, &#39;rimerism&#39;, &#39;rimesism&#39;, &#39;rimusism&#39;, &#39;rindsism&#39;, &#39;rindyism&#39;, &#39;rinesism&#39;, &#39;ringsism&#39;, &#39;rinksism&#39;, &#39;rioja&#39;, &#39;riotsism&#39;, &#39;riped&#39;, &#39;ripesism&#39;, &#39;rippsism&#39;, &#39;risesism&#39;, &#39;rishiism&#39;, &#39;risksism&#39;, &#39;rispsism&#39;, &#39;risusism&#39;, &#39;ritesism&#39;, &#39;rittsism&#39;, &#39;ritzyism&#39;, &#39;rivasism&#39;, &#39;rived&#39;, &#39;rivelism&#39;, &#39;rivenism&#39;, &#39;rivesism&#39;, &#39;riyalism&#39;, &#39;rizasism&#39;, &#39;roadsism&#39;, &#39;roamsism&#39;, &#39;roansism&#39;, &#39;roarsism&#39;, &#39;roaryism&#39;, &#39;roateism&#39;, &#39;robed&#39;, &#39;robesism&#39;, &#39;robleism&#39;, &#39;rocksism&#39;, &#39;roded&#39;, &#39;rodesism&#39;, &#39;roguyism&#39;, &#39;rohesism&#39;, &#39;roidsism&#39;, &#39;roilsism&#39;, &#39;roilyism&#39;, &#39;roinsism&#39;, &#39;roistism&#39;, &#39;rojakism&#39;, &#39;rojisism&#39;, &#39;roked&#39;, &#39;rokerism&#39;, &#39;rokesism&#39;, &#39;rolagism&#39;, &#39;rolesism&#39;, &#39;rolfsism&#39;, &#39;rollsism&#39;, &#39;romalism&#39;, &#39;romanism&#39;, &#39;romeoism&#39;, &#39;rompsism&#39;, &#39;rondeism&#39;, &#39;rondoism&#39;, &#39;roneoism&#39;, &#39;ronesism&#39;, &#39;roninism&#39;, &#39;ronneism&#39;, &#39;ronteism&#39;, &#39;rontsism&#39;, &#39;roodsism&#39;, &#39;roofsism&#39;, &#39;roofyism&#39;, &#39;rooksism&#39;, &#39;rookyism&#39;, &#39;roomsism&#39;, &#39;roonsism&#39;, &#39;roopsism&#39;, &#39;roopyism&#39;, &#39;roosa&#39;, &#39;rooseism&#39;, &#39;rootsism&#39;, &#39;rootyism&#39;, &#39;roped&#39;, &#39;roperism&#39;, &#39;ropesism&#39;, &#39;ropeyism&#39;, &#39;roqueism&#39;, &#39;roralism&#39;, &#39;roresism&#39;, &#39;roric&#39;, &#39;rorid&#39;, &#39;rorieism&#39;, &#39;rortsism&#39;, &#39;rortyism&#39;, &#39;rosed&#39;, &#39;rosesism&#39;, &#39;rosetism&#39;, &#39;roshiism&#39;, &#39;rosinism&#39;, &#39;rositism&#39;, &#39;rostiism&#39;, &#39;rostsism&#39;, &#39;rotalism&#39;, &#39;rotanism&#39;, &#39;rotasism&#39;, &#39;rotchism&#39;, &#39;roted&#39;, &#39;rotesism&#39;, &#39;rotisism&#39;, &#39;rotlsism&#39;, &#39;rotonism&#39;, &#39;rotosism&#39;, &#39;rotteism&#39;, &#39;rouenism&#39;, &#39;rouesism&#39;, &#39;rouleism&#39;, &#39;roulsism&#39;, &#39;roumsism&#39;, &#39;roupsism&#39;, &#39;roupyism&#39;, &#39;roustism&#39;, &#39;routhism&#39;, &#39;routsism&#39;, &#39;roved&#39;, &#39;rovenism&#39;, &#39;rovesism&#39;, &#39;rowanism&#39;, &#39;rowed&#39;, &#39;rowelism&#39;, &#39;rowenism&#39;, &#39;rowieism&#39;, &#39;rowmeism&#39;, &#39;rownd&#39;, &#39;rowthism&#39;, &#39;rowtsism&#39;, &#39;royneism&#39;, &#39;roystism&#39;, &#39;rozetism&#39;, &#39;rozitism&#39;, &#39;ruana&#39;, &#39;rubaiism&#39;, &#39;rubbyism&#39;, &#39;rubelism&#39;, &#39;rubesism&#39;, &#39;rubinism&#39;, &#39;rubleism&#39;, &#39;rubliism&#39;, &#39;rubusism&#39;, &#39;rucheism&#39;, &#39;rucksism&#39;, &#39;rudasism&#39;, &#39;ruddsism&#39;, &#39;rudesism&#39;, &#39;rudieism&#39;, &#39;rudisism&#39;, &#39;rueda&#39;, &#39;ruersism&#39;, &#39;ruffeism&#39;, &#39;ruffsism&#39;, &#39;rugaeism&#39;, &#39;rugalism&#39;, &#39;ruggyism&#39;, &#39;ruingism&#39;, &#39;ruinsism&#39;, &#39;rukhsism&#39;, &#39;ruled&#39;, &#39;rulesism&#39;, &#39;rumalism&#39;, &#39;rumboism&#39;, &#39;rumenism&#39;, &#39;rumesism&#39;, &#39;rumlyism&#39;, &#39;rummyism&#39;, &#39;rumpoism&#39;, &#39;rumpsism&#39;, &#39;rumpyism&#39;, &#39;runchism&#39;, &#39;rundsism&#39;, &#39;runed&#39;, &#39;runesism&#39;, &#39;rungsism&#39;, &#39;runic&#39;, &#39;runnyism&#39;, &#39;runtsism&#39;, &#39;runtyism&#39;, &#39;rupia&#39;, &#39;rurpsism&#39;, &#39;rurusism&#39;, &#39;rusasism&#39;, &#39;rusesism&#39;, &#39;rushyism&#39;, &#39;rusksism&#39;, &#39;rusma&#39;, &#39;russeism&#39;, &#39;rustsism&#39;, &#39;ruthsism&#39;, &#39;rutinism&#39;, &#39;ruttyism&#39;, &#39;ryalsism&#39;, &#39;rybatism&#39;, &#39;ryked&#39;, &#39;rykesism&#39;, &#39;rymmeism&#39;, &#39;ryndsism&#39;, &#39;ryotsism&#39;, &#39;ryperism&#39;, &#39;saagsism&#39;, &#39;sabalism&#39;, &#39;sabed&#39;, &#39;saberism&#39;, &#39;sabesism&#39;, &#39;sabha&#39;, &#39;sabinism&#39;, &#39;sabirism&#39;, &#39;sableism&#39;, &#39;sabotism&#39;, &#39;sabra&#39;, &#39;sabreism&#39;, &#39;sacksism&#39;, &#39;sacra&#39;, &#39;saddoism&#39;, &#39;sadesism&#39;, &#39;sadheism&#39;, &#39;sadhuism&#39;, &#39;sadisism&#39;, &#39;sadosism&#39;, &#39;sadza&#39;, &#39;safed&#39;, &#39;safesism&#39;, &#39;sagasism&#39;, &#39;sagerism&#39;, &#39;sagesism&#39;, &#39;saggyism&#39;, &#39;sagosism&#39;, &#39;sagumism&#39;, &#39;saheb&#39;, &#39;sahib&#39;, &#39;saiceism&#39;, &#39;saickism&#39;, &#39;saicsism&#39;, &#39;saidsism&#39;, &#39;saiga&#39;, &#39;sailsism&#39;, &#39;saimsism&#39;, &#39;saineism&#39;, &#39;sainsism&#39;, &#39;sairsism&#39;, &#39;saistism&#39;, &#39;saithism&#39;, &#39;sajouism&#39;, &#39;sakaiism&#39;, &#39;sakerism&#39;, &#39;sakesism&#39;, &#39;sakia&#39;, &#39;sakisism&#39;, &#39;saktiism&#39;, &#39;salalism&#39;, &#39;salatism&#39;, &#39;salepism&#39;, &#39;salesism&#39;, &#39;saletism&#39;, &#39;salic&#39;, &#39;salixism&#39;, &#39;salleism&#39;, &#39;salmiism&#39;, &#39;salolism&#39;, &#39;salopism&#39;, &#39;salpa&#39;, &#39;salpsism&#39;, &#39;salseism&#39;, &#39;saltoism&#39;, &#39;saltsism&#39;, &#39;salueism&#39;, &#39;salutism&#39;, &#39;samanism&#39;, &#39;samasism&#39;, &#39;samba&#39;, &#39;samboism&#39;, &#39;samekism&#39;, &#39;samelism&#39;, &#39;samenism&#39;, &#39;samesism&#39;, &#39;sameyism&#39;, &#39;samfuism&#39;, &#39;sammyism&#39;, &#39;sampiism&#39;, &#39;sampsism&#39;, &#39;sandsism&#39;, &#39;saned&#39;, &#39;sanesism&#39;, &#39;sanga&#39;, &#39;sanghism&#39;, &#39;sangoism&#39;, &#39;sangsism&#39;, &#39;sankoism&#39;, &#39;sansa&#39;, &#39;santoism&#39;, &#39;santsism&#39;, &#39;saola&#39;, &#39;sapanism&#39;, &#39;sapid&#39;, &#39;saporism&#39;, &#39;saranism&#39;, &#39;sardsism&#39;, &#39;sared&#39;, &#39;sareeism&#39;, &#39;sargeism&#39;, &#39;sargoism&#39;, &#39;sarinism&#39;, &#39;sarisism&#39;, &#39;sarksism&#39;, &#39;sarkyism&#39;, &#39;sarod&#39;, &#39;sarosism&#39;, &#39;sarusism&#39;, &#39;saserism&#39;, &#39;sasinism&#39;, &#39;sasseism&#39;, &#39;sataiism&#39;, &#39;satayism&#39;, &#39;sated&#39;, &#39;satemism&#39;, &#39;satesism&#39;, &#39;satisism&#39;, &#39;sauba&#39;, &#39;sauchism&#39;, &#39;saughism&#39;, &#39;saulsism&#39;, &#39;saultism&#39;, &#39;sauntism&#39;, &#39;sauryism&#39;, &#39;sautsism&#39;, &#39;saved&#39;, &#39;saverism&#39;, &#39;savesism&#39;, &#39;saveyism&#39;, &#39;savinism&#39;, &#39;sawahism&#39;, &#39;sawed&#39;, &#39;sawerism&#39;, &#39;saxesism&#39;, &#39;sayed&#39;, &#39;sayerism&#39;, &#39;sayid&#39;, &#39;sayneism&#39;, &#39;sayonism&#39;, &#39;saystism&#39;, &#39;sazesism&#39;, &#39;scabsism&#39;, &#39;scadsism&#39;, &#39;scaffism&#39;, &#39;scagsism&#39;, &#39;scailism&#39;, &#39;scala&#39;, &#39;scallism&#39;, &#39;scamsism&#39;, &#39;scand&#39;, &#39;scansism&#39;, &#39;scapa&#39;, &#39;scapeism&#39;, &#39;scapiism&#39;, &#39;scarpism&#39;, &#39;scarsism&#39;, &#39;scartism&#39;, &#39;scathism&#39;, &#39;scatsism&#39;, &#39;scattism&#39;, &#39;scaud&#39;, &#39;scaupism&#39;, &#39;scaurism&#39;, &#39;scawsism&#39;, &#39;sceatism&#39;, &#39;scena&#39;, &#39;scend&#39;, &#39;schavism&#39;, &#39;schmoism&#39;, &#39;schulism&#39;, &#39;schwa&#39;, &#39;sclimism&#39;, &#39;scodyism&#39;, &#39;scogsism&#39;, &#39;scoogism&#39;, &#39;scootism&#39;, &#39;scopa&#39;, &#39;scopsism&#39;, &#39;scotsism&#39;, &#39;scougism&#39;, &#39;scoupism&#39;, &#39;scowpism&#39;, &#39;scowsism&#39;, &#39;scrab&#39;, &#39;scraeism&#39;, &#39;scragism&#39;, &#39;scranism&#39;, &#39;scratism&#39;, &#39;scrawism&#39;, &#39;scrayism&#39;, &#39;scrimism&#39;, &#39;scripism&#39;, &#39;scrob&#39;, &#39;scrod&#39;, &#39;scrogism&#39;, &#39;scrowism&#39;, &#39;scudiism&#39;, &#39;scudoism&#39;, &#39;scudsism&#39;, &#39;scuffism&#39;, &#39;scuftism&#39;, &#39;scugsism&#39;, &#39;sculkism&#39;, &#39;scullism&#39;, &#39;sculpism&#39;, &#39;sculsism&#39;, &#39;scumsism&#39;, &#39;scupsism&#39;, &#39;scurfism&#39;, &#39;scursism&#39;, &#39;scuseism&#39;, &#39;scuta&#39;, &#39;scuteism&#39;, &#39;scutsism&#39;, &#39;scuzzism&#39;, &#39;scyesism&#39;, &#39;sdaynism&#39;, &#39;sdeinism&#39;, &#39;sealsism&#39;, &#39;seameism&#39;, &#39;seamsism&#39;, &#39;seamyism&#39;, &#39;seansism&#39;, &#39;seareism&#39;, &#39;searsism&#39;, &#39;seaseism&#39;, &#39;seatsism&#39;, &#39;seazeism&#39;, &#39;sebumism&#39;, &#39;seccoism&#39;, &#39;sechsism&#39;, &#39;sectsism&#39;, &#39;sederism&#39;, &#39;sedesism&#39;, &#39;sedgeism&#39;, &#39;sedgyism&#39;, &#39;sedumism&#39;, &#39;seedsism&#39;, &#39;seeksism&#39;, &#39;seeld&#39;, &#39;seelsism&#39;, &#39;seelyism&#39;, &#39;seemsism&#39;, &#39;seepsism&#39;, &#39;seepyism&#39;, &#39;seersism&#39;, &#39;seferism&#39;, &#39;segarism&#39;, &#39;segniism&#39;, &#39;segnoism&#39;, &#39;segolism&#39;, &#39;segosism&#39;, &#39;sehriism&#39;, &#39;seifsism&#39;, &#39;seilsism&#39;, &#39;seineism&#39;, &#39;seirsism&#39;, &#39;seiseism&#39;, &#39;seismism&#39;, &#39;seityism&#39;, &#39;seiza&#39;, &#39;sekosism&#39;, &#39;sektsism&#39;, &#39;selahism&#39;, &#39;selesism&#39;, &#39;selfsism&#39;, &#39;sella&#39;, &#39;selleism&#39;, &#39;sellsism&#39;, &#39;selva&#39;, &#39;semeeism&#39;, &#39;semesism&#39;, &#39;semieism&#39;, &#39;semisism&#39;, &#39;senasism&#39;, &#39;sendsism&#39;, &#39;senesism&#39;, &#39;sengiism&#39;, &#39;senna&#39;, &#39;senorism&#39;, &#39;sensa&#39;, &#39;sensiism&#39;, &#39;senteism&#39;, &#39;sentiism&#39;, &#39;sentsism&#39;, &#39;senvyism&#39;, &#39;senza&#39;, &#39;sepad&#39;, &#39;sepalism&#39;, &#39;sepic&#39;, &#39;sepoyism&#39;, &#39;septa&#39;, &#39;septsism&#39;, &#39;serac&#39;, &#39;seraiism&#39;, &#39;seralism&#39;, &#39;sered&#39;, &#39;sererism&#39;, &#39;seresism&#39;, &#39;serfsism&#39;, &#39;sergeism&#39;, &#39;seric&#39;, &#39;serinism&#39;, &#39;serksism&#39;, &#39;seronism&#39;, &#39;serowism&#39;, &#39;serra&#39;, &#39;serreism&#39;, &#39;serrsism&#39;, &#39;serryism&#39;, &#39;servoism&#39;, &#39;seseyism&#39;, &#39;sessa&#39;, &#39;setaeism&#39;, &#39;setalism&#39;, &#39;setonism&#39;, &#39;settsism&#39;, &#39;sewanism&#39;, &#39;sewarism&#39;, &#39;sewed&#39;, &#39;sewelism&#39;, &#39;sewenism&#39;, &#39;sewinism&#39;, &#39;sexed&#39;, &#39;sexerism&#39;, &#39;sexesism&#39;, &#39;sextoism&#39;, &#39;sextsism&#39;, &#39;seyenism&#39;, &#39;shadsism&#39;, &#39;shagsism&#39;, &#39;shahsism&#39;, &#39;shakoism&#39;, &#39;shaktism&#39;, &#39;shalmism&#39;, &#39;shalyism&#39;, &#39;shama&#39;, &#39;shamsism&#39;, &#39;shand&#39;, &#39;shansism&#39;, &#39;shapsism&#39;, &#39;sharnism&#39;, &#39;shashism&#39;, &#39;shaulism&#39;, &#39;shawmism&#39;, &#39;shawnism&#39;, &#39;shawsism&#39;, &#39;shaya&#39;, &#39;shaysism&#39;, &#39;shchiism&#39;, &#39;sheafism&#39;, &#39;shealism&#39;, &#39;sheasism&#39;, &#39;shedsism&#39;, &#39;sheelism&#39;, &#39;shend&#39;, &#39;shentism&#39;, &#39;sheolism&#39;, &#39;sherd&#39;, &#39;shereism&#39;, &#39;sheroism&#39;, &#39;shetsism&#39;, &#39;sheva&#39;, &#39;shewnism&#39;, &#39;shewsism&#39;, &#39;shiaiism&#39;, &#39;shielism&#39;, &#39;shierism&#39;, &#39;shiesism&#39;, &#39;shillism&#39;, &#39;shilyism&#39;, &#39;shimsism&#39;, &#39;shinsism&#39;, &#39;shipsism&#39;, &#39;shirrism&#39;, &#39;shirsism&#39;, &#39;shishism&#39;, &#39;shisoism&#39;, &#39;shistism&#39;, &#39;shiteism&#39;, &#39;shitsism&#39;, &#39;shiurism&#39;, &#39;shiva&#39;, &#39;shiveism&#39;, &#39;shivsism&#39;, &#39;shlepism&#39;, &#39;shlub&#39;, &#39;shmekism&#39;, &#39;shmoeism&#39;, &#39;shoatism&#39;, &#39;shoed&#39;, &#39;shoerism&#39;, &#39;shoesism&#39;, &#39;shogiism&#39;, &#39;shogsism&#39;, &#39;shojiism&#39;, &#39;shojoism&#39;, &#39;shola&#39;, &#39;shoolism&#39;, &#39;shoonism&#39;, &#39;shoosism&#39;, &#39;shopeism&#39;, &#39;shopsism&#39;, &#39;shorlism&#39;, &#39;shoteism&#39;, &#39;shotsism&#39;, &#39;shottism&#39;, &#39;showd&#39;, &#39;showsism&#39;, &#39;shoyuism&#39;, &#39;shred&#39;, &#39;shrisism&#39;, &#39;shrowism&#39;, &#39;shtikism&#39;, &#39;shtumism&#39;, &#39;shtupism&#39;, &#39;shuleism&#39;, &#39;shulnism&#39;, &#39;shulsism&#39;, &#39;shunsism&#39;, &#39;shura&#39;, &#39;shuteism&#39;, &#39;shutsism&#39;, &#39;shwasism&#39;, &#39;shyerism&#39;, &#39;sialsism&#39;, &#39;sibbsism&#39;, &#39;sibylism&#39;, &#39;sicesism&#39;, &#39;sichtism&#39;, &#39;sickoism&#39;, &#39;sicksism&#39;, &#39;sickyism&#39;, &#39;sidasism&#39;, &#39;sided&#39;, &#39;siderism&#39;, &#39;sidesism&#39;, &#39;sidha&#39;, &#39;sidheism&#39;, &#39;sidleism&#39;, &#39;sield&#39;, &#39;siensism&#39;, &#39;sientism&#39;, &#39;siethism&#39;, &#39;sieurism&#39;, &#39;siftsism&#39;, &#39;sighsism&#39;, &#39;sigilism&#39;, &#39;sigla&#39;, &#39;signa&#39;, &#39;signsism&#39;, &#39;sijosism&#39;, &#39;sikasism&#39;, &#39;sikerism&#39;, &#39;sikesism&#39;, &#39;sildsism&#39;, &#39;siled&#39;, &#39;silenism&#39;, &#39;silerism&#39;, &#39;silesism&#39;, &#39;silexism&#39;, &#39;silksism&#39;, &#39;sillsism&#39;, &#39;silosism&#39;, &#39;siltsism&#39;, &#39;siltyism&#39;, &#39;silva&#39;, &#39;simarism&#39;, &#39;simasism&#39;, &#39;simba&#39;, &#39;simisism&#39;, &#39;simpsism&#39;, &#39;simulism&#39;, &#39;sindsism&#39;, &#39;sined&#39;, &#39;sinesism&#39;, &#39;singsism&#39;, &#39;sinhsism&#39;, &#39;sinksism&#39;, &#39;sinkyism&#39;, &#39;sinusism&#39;, &#39;siped&#39;, &#39;sipesism&#39;, &#39;sippyism&#39;, &#39;sired&#39;, &#39;sireeism&#39;, &#39;siresism&#39;, &#39;sirihism&#39;, &#39;sirisism&#39;, &#39;siroc&#39;, &#39;sirra&#39;, &#39;sirupism&#39;, &#39;sisalism&#39;, &#39;sisesism&#39;, &#39;sista&#39;, &#39;sistsism&#39;, &#39;sitarism&#39;, &#39;sited&#39;, &#39;sitesism&#39;, &#39;sitheism&#39;, &#39;sitka&#39;, &#39;situpism&#39;, &#39;situsism&#39;, &#39;siverism&#39;, &#39;sixerism&#39;, &#39;sixesism&#39;, &#39;sixmoism&#39;, &#39;sixteism&#39;, &#39;sizarism&#39;, &#39;sized&#39;, &#39;sizelism&#39;, &#39;sizerism&#39;, &#39;sizesism&#39;, &#39;skagsism&#39;, &#39;skailism&#39;, &#39;skald&#39;, &#39;skankism&#39;, &#39;skartism&#39;, &#39;skatsism&#39;, &#39;skattism&#39;, &#39;skawsism&#39;, &#39;skeanism&#39;, &#39;skearism&#39;, &#39;skedsism&#39;, &#39;skeed&#39;, &#39;skeefism&#39;, &#39;skeenism&#39;, &#39;skeerism&#39;, &#39;skeesism&#39;, &#39;skeetism&#39;, &#39;skeggism&#39;, &#39;skegsism&#39;, &#39;skeinism&#39;, &#39;skelfism&#39;, &#39;skellism&#39;, &#39;skelmism&#39;, &#39;skelpism&#39;, &#39;skeneism&#39;, &#39;skensism&#39;, &#39;skeosism&#39;, &#39;skepsism&#39;, &#39;skersism&#39;, &#39;sketsism&#39;, &#39;skewsism&#39;, &#39;skidsism&#39;, &#39;skied&#39;, &#39;skiesism&#39;, &#39;skieyism&#39;, &#39;skimoism&#39;, &#39;skimsism&#39;, &#39;skinkism&#39;, &#39;skinsism&#39;, &#39;skintism&#39;, &#39;skiosism&#39;, &#39;skipsism&#39;, &#39;skirlism&#39;, &#39;skirrism&#39;, &#39;skiteism&#39;, &#39;skitsism&#39;, &#39;skiveism&#39;, &#39;skivyism&#39;, &#39;sklimism&#39;, &#39;skoalism&#39;, &#39;skodyism&#39;, &#39;skoffism&#39;, &#39;skogsism&#39;, &#39;skolsism&#39;, &#39;skoolism&#39;, &#39;skortism&#39;, &#39;skoshism&#39;, &#39;skranism&#39;, &#39;skrikism&#39;, &#39;skuasism&#39;, &#39;skugsism&#39;, &#39;skyed&#39;, &#39;skyerism&#39;, &#39;skyeyism&#39;, &#39;skyfsism&#39;, &#39;skyreism&#39;, &#39;skyrsism&#39;, &#39;skyteism&#39;, &#39;slabsism&#39;, &#39;sladeism&#39;, &#39;slaesism&#39;, &#39;slagsism&#39;, &#39;slaid&#39;, &#39;slakeism&#39;, &#39;slamsism&#39;, &#39;slaneism&#39;, &#39;slankism&#39;, &#39;slapsism&#39;, &#39;slartism&#39;, &#39;slatsism&#39;, &#39;slatyism&#39;, &#39;slawsism&#39;, &#39;slaysism&#39;, &#39;slebsism&#39;, &#39;sledsism&#39;, &#39;sleerism&#39;, &#39;slewsism&#39;, &#39;sleysism&#39;, &#39;slierism&#39;, &#39;slilyism&#39;, &#39;slimsism&#39;, &#39;slipeism&#39;, &#39;slipsism&#39;, &#39;sliptism&#39;, &#39;slishism&#39;, &#39;slitsism&#39;, &#39;sliveism&#39;, &#39;sloanism&#39;, &#39;slobsism&#39;, &#39;sloesism&#39;, &#39;slogsism&#39;, &#39;sloid&#39;, &#39;slojd&#39;, &#39;slomoism&#39;, &#39;sloomism&#39;, &#39;slootism&#39;, &#39;slopsism&#39;, &#39;slopyism&#39;, &#39;slormism&#39;, &#39;slotsism&#39;, &#39;sloveism&#39;, &#39;slowsism&#39;, &#39;sloyd&#39;, &#39;slubb&#39;, &#39;slubsism&#39;, &#39;slued&#39;, &#39;sluesism&#39;, &#39;sluffism&#39;, &#39;slugsism&#39;, &#39;sluitism&#39;, &#39;slumsism&#39;, &#39;slurb&#39;, &#39;slursism&#39;, &#39;sluseism&#39;, &#39;slutsism&#39;, &#39;slyerism&#39;, &#39;slypeism&#39;, &#39;smaakism&#39;, &#39;smaikism&#39;, &#39;smalmism&#39;, &#39;smaltism&#39;, &#39;smarmism&#39;, &#39;smazeism&#39;, &#39;smeekism&#39;, &#39;smeesism&#39;, &#39;smeikism&#39;, &#39;smekeism&#39;, &#39;smerkism&#39;, &#39;smewsism&#39;, &#39;smirrism&#39;, &#39;smirsism&#39;, &#39;smitsism&#39;, &#39;smogsism&#39;, &#39;smokoism&#39;, &#39;smoltism&#39;, &#39;smoorism&#39;, &#39;smootism&#39;, &#39;smoreism&#39;, &#39;smorgism&#39;, &#39;smoutism&#39;, &#39;smowtism&#39;, &#39;smugsism&#39;, &#39;smursism&#39;, &#39;smushism&#39;, &#39;smutsism&#39;, &#39;snabsism&#39;, &#39;snafuism&#39;, &#39;snagsism&#39;, &#39;snapsism&#39;, &#39;snarfism&#39;, &#39;snarkism&#39;, &#39;snarsism&#39;, &#39;snaryism&#39;, &#39;snashism&#39;, &#39;snathism&#39;, &#39;snawsism&#39;, &#39;snead&#39;, &#39;sneapism&#39;, &#39;snebsism&#39;, &#39;sneckism&#39;, &#39;snedsism&#39;, &#39;sneed&#39;, &#39;sneesism&#39;, &#39;snellism&#39;, &#39;snibsism&#39;, &#39;snickism&#39;, &#39;sniesism&#39;, &#39;sniftism&#39;, &#39;snigsism&#39;, &#39;snipsism&#39;, &#39;snipyism&#39;, &#39;snirtism&#39;, &#39;snitsism&#39;, &#39;snobsism&#39;, &#39;snodsism&#39;, &#39;snoekism&#39;, &#39;snoepism&#39;, &#39;snogsism&#39;, &#39;snokeism&#39;, &#39;snood&#39;, &#39;snookism&#39;, &#39;snoolism&#39;, &#39;snootism&#39;, &#39;snotsism&#39;, &#39;snowkism&#39;, &#39;snowsism&#39;, &#39;snubsism&#39;, &#39;snugsism&#39;, &#39;snushism&#39;, &#39;snyesism&#39;, &#39;soaksism&#39;, &#39;soapsism&#39;, &#39;soareism&#39;, &#39;soarsism&#39;, &#39;soaveism&#39;, &#39;sobasism&#39;, &#39;socasism&#39;, &#39;socesism&#39;, &#39;sockoism&#39;, &#39;socksism&#39;, &#39;socleism&#39;, &#39;sodasism&#39;, &#39;soddyism&#39;, &#39;sodic&#39;, &#39;sodomism&#39;, &#39;sofarism&#39;, &#39;sofasism&#39;, &#39;softa&#39;, &#39;softsism&#39;, &#39;softyism&#39;, &#39;sogerism&#39;, &#39;sohurism&#39;, &#39;soilsism&#39;, &#39;soilyism&#39;, &#39;sojasism&#39;, &#39;sojusism&#39;, &#39;sokahism&#39;, &#39;sokenism&#39;, &#39;sokesism&#39;, &#39;sokolism&#39;, &#39;solahism&#39;, &#39;solanism&#39;, &#39;solasism&#39;, &#39;soldeism&#39;, &#39;soldiism&#39;, &#39;soldoism&#39;, &#39;soldsism&#39;, &#39;soled&#39;, &#39;soleiism&#39;, &#39;solerism&#39;, &#39;solesism&#39;, &#39;solonism&#39;, &#39;solosism&#39;, &#39;solumism&#39;, &#39;solusism&#39;, &#39;somanism&#39;, &#39;somasism&#39;, &#39;sonceism&#39;, &#39;sondeism&#39;, &#39;sonesism&#39;, &#39;songsism&#39;, &#39;sonlyism&#39;, &#39;sonneism&#39;, &#39;sonnyism&#39;, &#39;sonseism&#39;, &#39;sonsyism&#39;, &#39;sooeyism&#39;, &#39;sooksism&#39;, &#39;sookyism&#39;, &#39;sooleism&#39;, &#39;soolsism&#39;, &#39;soomsism&#39;, &#39;soopsism&#39;, &#39;sooteism&#39;, &#39;sootsism&#39;, &#39;sophsism&#39;, &#39;sophyism&#39;, &#39;soporism&#39;, &#39;soppyism&#39;, &#39;sopra&#39;, &#39;soralism&#39;, &#39;sorasism&#39;, &#39;sorboism&#39;, &#39;sorbsism&#39;, &#39;sorda&#39;, &#39;sordoism&#39;, &#39;sordsism&#39;, &#39;sored&#39;, &#39;soreeism&#39;, &#39;sorelism&#39;, &#39;sorerism&#39;, &#39;soresism&#39;, &#39;sorexism&#39;, &#39;sorgoism&#39;, &#39;sornsism&#39;, &#39;sorra&#39;, &#39;sorta&#39;, &#39;sortsism&#39;, &#39;sorusism&#39;, &#39;sothsism&#39;, &#39;sotolism&#39;, &#39;souceism&#39;, &#39;souctism&#39;, &#39;soughism&#39;, &#39;souksism&#39;, &#39;soulsism&#39;, &#39;soumsism&#39;, &#39;soupsism&#39;, &#39;soupyism&#39;, &#39;soursism&#39;, &#39;souseism&#39;, &#39;soutsism&#39;, &#39;sowarism&#39;, &#39;sowceism&#39;, &#39;sowed&#39;, &#39;sowffism&#39;, &#39;sowfsism&#39;, &#39;sowleism&#39;, &#39;sowlsism&#39;, &#39;sowmsism&#39;, &#39;sownd&#39;, &#39;sowneism&#39;, &#39;sowpsism&#39;, &#39;sowseism&#39;, &#39;sowthism&#39;, &#39;soyasism&#39;, &#39;soyleism&#39;, &#39;soyuzism&#39;, &#39;sozinism&#39;, &#39;spacyism&#39;, &#39;spadoism&#39;, &#39;spaed&#39;, &#39;spaerism&#39;, &#39;spaesism&#39;, &#39;spagsism&#39;, &#39;spahiism&#39;, &#39;spailism&#39;, &#39;spainism&#39;, &#39;spaitism&#39;, &#39;spakeism&#39;, &#39;spald&#39;, &#39;spaleism&#39;, &#39;spallism&#39;, &#39;spaltism&#39;, &#39;spamsism&#39;, &#39;spaneism&#39;, &#39;spangism&#39;, &#39;spansism&#39;, &#39;spard&#39;, &#39;sparsism&#39;, &#39;spartism&#39;, &#39;spateism&#39;, &#39;spatsism&#39;, &#39;spaulism&#39;, &#39;spawlism&#39;, &#39;spawsism&#39;, &#39;spayd&#39;, &#39;spaysism&#39;, &#39;spaza&#39;, &#39;spazzism&#39;, &#39;spealism&#39;, &#39;speanism&#39;, &#39;speatism&#39;, &#39;specsism&#39;, &#39;spectism&#39;, &#39;speelism&#39;, &#39;speerism&#39;, &#39;speilism&#39;, &#39;speirism&#39;, &#39;speksism&#39;, &#39;speld&#39;, &#39;spelkism&#39;, &#39;speosism&#39;, &#39;spetsism&#39;, &#39;speugism&#39;, &#39;spewsism&#39;, &#39;spewyism&#39;, &#39;spialism&#39;, &#39;spica&#39;, &#39;spickism&#39;, &#39;spicsism&#39;, &#39;spideism&#39;, &#39;spierism&#39;, &#39;spiesism&#39;, &#39;spiffism&#39;, &#39;spifsism&#39;, &#39;spiksism&#39;, &#39;spileism&#39;, &#39;spimsism&#39;, &#39;spina&#39;, &#39;spinkism&#39;, &#39;spinsism&#39;, &#39;spirtism&#39;, &#39;spiryism&#39;, &#39;spitsism&#39;, &#39;spitzism&#39;, &#39;spivsism&#39;, &#39;splayism&#39;, &#39;splogism&#39;, &#39;spodeism&#39;, &#39;spodsism&#39;, &#39;spoomism&#39;, &#39;spoorism&#39;, &#39;spootism&#39;, &#39;sporkism&#39;, &#39;sposhism&#39;, &#39;spotsism&#39;, &#39;sprad&#39;, &#39;spragism&#39;, &#39;spratism&#39;, &#39;spred&#39;, &#39;sprewism&#39;, &#39;spritism&#39;, &#39;sprod&#39;, &#39;sprogism&#39;, &#39;sprueism&#39;, &#39;sprugism&#39;, &#39;spudsism&#39;, &#39;spued&#39;, &#39;spuerism&#39;, &#39;spuesism&#39;, &#39;spugsism&#39;, &#39;spuleism&#39;, &#39;spumeism&#39;, &#39;spumyism&#39;, &#39;spursism&#39;, &#39;sputa&#39;, &#39;spyalism&#39;, &#39;spyreism&#39;, &#39;squab&#39;, &#39;squawism&#39;, &#39;squegism&#39;, &#39;squid&#39;, &#39;squitism&#39;, &#39;squizism&#39;, &#39;stabsism&#39;, &#39;stadeism&#39;, &#39;stagsism&#39;, &#39;stagyism&#39;, &#39;staigism&#39;, &#39;staneism&#39;, &#39;stangism&#39;, &#39;staphism&#39;, &#39;stapsism&#39;, &#39;starnism&#39;, &#39;starrism&#39;, &#39;starsism&#39;, &#39;statsism&#39;, &#39;staunism&#39;, &#39;stawsism&#39;, &#39;staysism&#39;, &#39;steanism&#39;, &#39;stearism&#39;, &#39;stedd&#39;, &#39;stedeism&#39;, &#39;stedsism&#39;, &#39;steekism&#39;, &#39;steemism&#39;, &#39;steenism&#39;, &#39;steilism&#39;, &#39;stela&#39;, &#39;steleism&#39;, &#39;stellism&#39;, &#39;stemeism&#39;, &#39;stemsism&#39;, &#39;stend&#39;, &#39;stenoism&#39;, &#39;stensism&#39;, &#39;stentism&#39;, &#39;stepsism&#39;, &#39;steptism&#39;, &#39;stereism&#39;, &#39;stetsism&#39;, &#39;stewsism&#39;, &#39;stewyism&#39;, &#39;steysism&#39;, &#39;stichism&#39;, &#39;stied&#39;, &#39;stiesism&#39;, &#39;stilb&#39;, &#39;stileism&#39;, &#39;stimeism&#39;, &#39;stimsism&#39;, &#39;stimyism&#39;, &#39;stipa&#39;, &#39;stipeism&#39;, &#39;stireism&#39;, &#39;stirkism&#39;, &#39;stirpism&#39;, &#39;stirsism&#39;, &#39;stiveism&#39;, &#39;stivyism&#39;, &#39;stoaeism&#39;, &#39;stoaiism&#39;, &#39;stoasism&#39;, &#39;stoatism&#39;, &#39;stobsism&#39;, &#39;stoepism&#39;, &#39;stogyism&#39;, &#39;stoitism&#39;, &#39;stolnism&#39;, &#39;stoma&#39;, &#39;stond&#39;, &#39;stongism&#39;, &#39;stonkism&#39;, &#39;stonnism&#39;, &#39;stookism&#39;, &#39;stoorism&#39;, &#39;stopeism&#39;, &#39;stopsism&#39;, &#39;stoptism&#39;, &#39;stossism&#39;, &#39;stotsism&#39;, &#39;stottism&#39;, &#39;stounism&#39;, &#39;stoupism&#39;, &#39;stourism&#39;, &#39;stownism&#39;, &#39;stowpism&#39;, &#39;stowsism&#39;, &#39;strad&#39;, &#39;straeism&#39;, &#39;stragism&#39;, &#39;strakism&#39;, &#39;strepism&#39;, &#39;strewism&#39;, &#39;stria&#39;, &#39;strigism&#39;, &#39;strimism&#39;, &#39;stropism&#39;, &#39;strowism&#39;, &#39;stroyism&#39;, &#39;strumism&#39;, &#39;stubsism&#39;, &#39;studeism&#39;, &#39;studsism&#39;, &#39;stullism&#39;, &#39;stulmism&#39;, &#39;stummism&#39;, &#39;stumsism&#39;, &#39;stunsism&#39;, &#39;stupa&#39;, &#39;stupeism&#39;, &#39;stureism&#39;, &#39;sturtism&#39;, &#39;styed&#39;, &#39;styesism&#39;, &#39;styliism&#39;, &#39;styloism&#39;, &#39;stymeism&#39;, &#39;stymyism&#39;, &#39;styreism&#39;, &#39;styteism&#39;, &#39;subahism&#39;, &#39;subasism&#39;, &#39;subbyism&#39;, &#39;suberism&#39;, &#39;subha&#39;, &#39;succiism&#39;, &#39;sucksism&#39;, &#39;suckyism&#39;, &#39;sucreism&#39;, &#39;suddsism&#39;, &#39;sudorism&#39;, &#39;sudsyism&#39;, &#39;suedeism&#39;, &#39;suentism&#39;, &#39;suersism&#39;, &#39;sueteism&#39;, &#39;suetsism&#39;, &#39;suetyism&#39;, &#39;suganism&#39;, &#39;sughsism&#39;, &#39;sugosism&#39;, &#39;suhurism&#39;, &#39;suidsism&#39;, &#39;suintism&#39;, &#39;suitsism&#39;, &#39;sujeeism&#39;, &#39;sukhsism&#39;, &#39;sukukism&#39;, &#39;sulciism&#39;, &#39;sulfa&#39;, &#39;sulfoism&#39;, &#39;sulksism&#39;, &#39;sulphism&#39;, &#39;sulusism&#39;, &#39;sumisism&#39;, &#39;summa&#39;, &#39;sumosism&#39;, &#39;sumphism&#39;, &#39;sumpsism&#39;, &#39;sunisism&#39;, &#39;sunksism&#39;, &#39;sunna&#39;, &#39;sunnsism&#39;, &#39;sunupism&#39;, &#39;supesism&#39;, &#39;supra&#39;, &#39;surahism&#39;, &#39;suralism&#39;, &#39;surasism&#39;, &#39;suratism&#39;, &#39;surdsism&#39;, &#39;sured&#39;, &#39;suresism&#39;, &#39;surfsism&#39;, &#39;surfyism&#39;, &#39;surgyism&#39;, &#39;surra&#39;, &#39;sused&#39;, &#39;susesism&#39;, &#39;sususism&#39;, &#39;sutorism&#39;, &#39;sutra&#39;, &#39;sutta&#39;, &#39;swabsism&#39;, &#39;swackism&#39;, &#39;swadsism&#39;, &#39;swageism&#39;, &#39;swagsism&#39;, &#39;swailism&#39;, &#39;swainism&#39;, &#39;swaleism&#39;, &#39;swalyism&#39;, &#39;swamyism&#39;, &#39;swangism&#39;, &#39;swankism&#39;, &#39;swansism&#39;, &#39;swapsism&#39;, &#39;swaptism&#39;, &#39;sward&#39;, &#39;swareism&#39;, &#39;swarfism&#39;, &#39;swartism&#39;, &#39;swatsism&#39;, &#39;swaylism&#39;, &#39;swaysism&#39;, &#39;swealism&#39;, &#39;swedeism&#39;, &#39;sweed&#39;, &#39;sweelism&#39;, &#39;sweerism&#39;, &#39;sweesism&#39;, &#39;sweirism&#39;, &#39;sweltism&#39;, &#39;swerfism&#39;, &#39;sweysism&#39;, &#39;swiesism&#39;, &#39;swigsism&#39;, &#39;swileism&#39;, &#39;swimsism&#39;, &#39;swinkism&#39;, &#39;swipeism&#39;, &#39;swireism&#39;, &#39;swissism&#39;, &#39;swithism&#39;, &#39;switsism&#39;, &#39;swiveism&#39;, &#39;swizzism&#39;, &#39;swobsism&#39;, &#39;swoleism&#39;, &#39;swolnism&#39;, &#39;swopsism&#39;, &#39;swoptism&#39;, &#39;swotsism&#39;, &#39;swounism&#39;, &#39;sybbeism&#39;, &#39;sybilism&#39;, &#39;syboeism&#39;, &#39;sybowism&#39;, &#39;syceeism&#39;, &#39;sycesism&#39;, &#39;syconism&#39;, &#39;syensism&#39;, &#39;sykerism&#39;, &#39;sykesism&#39;, &#39;sylisism&#39;, &#39;sylphism&#39;, &#39;sylva&#39;, &#39;symarism&#39;, &#39;synchism&#39;, &#39;syncsism&#39;, &#39;syndsism&#39;, &#39;syned&#39;, &#39;synesism&#39;, &#39;synthism&#39;, &#39;syped&#39;, &#39;sypesism&#39;, &#39;syphsism&#39;, &#39;syrahism&#39;, &#39;syrenism&#39;, &#39;sysopism&#39;, &#39;sytheism&#39;, &#39;syverism&#39;, &#39;taalsism&#39;, &#39;taata&#39;, &#39;taberism&#39;, &#39;tabesism&#39;, &#39;tabid&#39;, &#39;tabisism&#39;, &#39;tabla&#39;, &#39;taborism&#39;, &#39;tabunism&#39;, &#39;tabusism&#39;, &#39;tacanism&#39;, &#39;tacesism&#39;, &#39;tacetism&#39;, &#39;tacheism&#39;, &#39;tachoism&#39;, &#39;tachsism&#39;, &#39;tacksism&#39;, &#39;tacosism&#39;, &#39;tactsism&#39;, &#39;taelsism&#39;, &#39;tafia&#39;, &#39;taggyism&#39;, &#39;tagma&#39;, &#39;tahasism&#39;, &#39;tahrsism&#39;, &#39;taiga&#39;, &#39;taigsism&#39;, &#39;taikoism&#39;, &#39;tailsism&#39;, &#39;tainsism&#39;, &#39;taira&#39;, &#39;taishism&#39;, &#39;taitsism&#39;, &#39;tajesism&#39;, &#39;takasism&#39;, &#39;takesism&#39;, &#39;takhiism&#39;, &#39;takinism&#39;, &#39;takisism&#39;, &#39;takkyism&#39;, &#39;talakism&#39;, &#39;talaqism&#39;, &#39;talarism&#39;, &#39;talasism&#39;, &#39;talcsism&#39;, &#39;talcyism&#39;, &#39;talea&#39;, &#39;talerism&#39;, &#39;talesism&#39;, &#39;talksism&#39;, &#39;talkyism&#39;, &#39;tallsism&#39;, &#39;talma&#39;, &#39;talpa&#39;, &#39;talukism&#39;, &#39;talusism&#39;, &#39;tamalism&#39;, &#39;tamed&#39;, &#39;tamesism&#39;, &#39;taminism&#39;, &#39;tamisism&#39;, &#39;tammyism&#39;, &#39;tampsism&#39;, &#39;tanasism&#39;, &#39;tanga&#39;, &#39;tangiism&#39;, &#39;tangsism&#39;, &#39;tanhsism&#39;, &#39;tanka&#39;, &#39;tanksism&#39;, &#39;tankyism&#39;, &#39;tanna&#39;, &#39;tansyism&#39;, &#39;tantiism&#39;, &#39;tantoism&#39;, &#39;tantyism&#39;, &#39;tapasism&#39;, &#39;taped&#39;, &#39;tapenism&#39;, &#39;tapesism&#39;, &#39;tapetism&#39;, &#39;tapisism&#39;, &#39;tappa&#39;, &#39;tapusism&#39;, &#39;tarasism&#39;, &#39;tardoism&#39;, &#39;tared&#39;, &#39;taresism&#39;, &#39;targa&#39;, &#39;targeism&#39;, &#39;tarnsism&#39;, &#39;taroc&#39;, &#39;tarokism&#39;, &#39;tarosism&#39;, &#39;tarpsism&#39;, &#39;tarreism&#39;, &#39;tarryism&#39;, &#39;tarsiism&#39;, &#39;tartsism&#39;, &#39;tartyism&#39;, &#39;tasarism&#39;, &#39;tased&#39;, &#39;taserism&#39;, &#39;tasesism&#39;, &#39;tasksism&#39;, &#39;tassa&#39;, &#39;tasseism&#39;, &#39;tassoism&#39;, &#39;tatarism&#39;, &#39;taterism&#39;, &#39;tatesism&#39;, &#39;tathsism&#39;, &#39;tatieism&#39;, &#39;tatouism&#39;, &#39;tattsism&#39;, &#39;tatusism&#39;, &#39;taubeism&#39;, &#39;tauld&#39;, &#39;tauonism&#39;, &#39;taupeism&#39;, &#39;tautsism&#39;, &#39;tavahism&#39;, &#39;tavasism&#39;, &#39;taverism&#39;, &#39;tawaiism&#39;, &#39;tawasism&#39;, &#39;tawed&#39;, &#39;tawerism&#39;, &#39;tawieism&#39;, &#39;tawseism&#39;, &#39;tawtsism&#39;, &#39;taxed&#39;, &#39;taxerism&#39;, &#39;taxesism&#39;, &#39;taxisism&#39;, &#39;taxolism&#39;, &#39;taxonism&#39;, &#39;taxorism&#39;, &#39;taxusism&#39;, &#39;tayra&#39;, &#39;tazza&#39;, &#39;tazzeism&#39;, &#39;teadeism&#39;, &#39;teadsism&#39;, &#39;teaed&#39;, &#39;teaksism&#39;, &#39;tealsism&#39;, &#39;teamsism&#39;, &#39;tearsism&#39;, &#39;teatsism&#39;, &#39;teazeism&#39;, &#39;techsism&#39;, &#39;techyism&#39;, &#39;tecta&#39;, &#39;teelsism&#39;, &#39;teemsism&#39;, &#39;teend&#39;, &#39;teeneism&#39;, &#39;teensism&#39;, &#39;teenyism&#39;, &#39;teersism&#39;, &#39;teffsism&#39;, &#39;teggsism&#39;, &#39;tegua&#39;, &#39;tegusism&#39;, &#39;tehrsism&#39;, &#39;teiid&#39;, &#39;teilsism&#39;, &#39;teind&#39;, &#39;teinsism&#39;, &#39;telaeism&#39;, &#39;telcoism&#39;, &#39;telesism&#39;, &#39;telexism&#39;, &#39;telia&#39;, &#39;telic&#39;, &#39;tellsism&#39;, &#39;tellyism&#39;, &#39;teloiism&#39;, &#39;telosism&#39;, &#39;temed&#39;, &#39;temesism&#39;, &#39;tempiism&#39;, &#39;tempsism&#39;, &#39;temptism&#39;, &#39;temseism&#39;, &#39;tenchism&#39;, &#39;tendsism&#39;, &#39;tenduism&#39;, &#39;tenesism&#39;, &#39;tengeism&#39;, &#39;tenia&#39;, &#39;tenneism&#39;, &#39;tennoism&#39;, &#39;tennyism&#39;, &#39;tenonism&#39;, &#39;tentsism&#39;, &#39;tentyism&#39;, &#39;tenueism&#39;, &#39;tepalism&#39;, &#39;tepasism&#39;, &#39;tepoyism&#39;, &#39;teraiism&#39;, &#39;terasism&#39;, &#39;terceism&#39;, &#39;terekism&#39;, &#39;teresism&#39;, &#39;terfeism&#39;, &#39;terfsism&#39;, &#39;terga&#39;, &#39;termsism&#39;, &#39;terneism&#39;, &#39;ternsism&#39;, &#39;terryism&#39;, &#39;tertsism&#39;, &#39;tesla&#39;, &#39;testa&#39;, &#39;testeism&#39;, &#39;testsism&#39;, &#39;tetesism&#39;, &#39;tethsism&#39;, &#39;tetra&#39;, &#39;tetriism&#39;, &#39;teuchism&#39;, &#39;teughism&#39;, &#39;tewed&#39;, &#39;tewelism&#39;, &#39;tewitism&#39;, &#39;texasism&#39;, &#39;texesism&#39;, &#39;textsism&#39;, &#39;thackism&#39;, &#39;thagiism&#39;, &#39;thaimism&#39;, &#39;thaleism&#39;, &#39;thaliism&#39;, &#39;thana&#39;, &#39;thaneism&#39;, &#39;thangism&#39;, &#39;thansism&#39;, &#39;thanxism&#39;, &#39;tharmism&#39;, &#39;tharsism&#39;, &#39;thawsism&#39;, &#39;thawyism&#39;, &#39;thebeism&#39;, &#39;theca&#39;, &#39;theed&#39;, &#39;theekism&#39;, &#39;theesism&#39;, &#39;thegnism&#39;, &#39;theic&#39;, &#39;theinism&#39;, &#39;thelfism&#39;, &#39;thema&#39;, &#39;thensism&#39;, &#39;theowism&#39;, &#39;thermism&#39;, &#39;thespism&#39;, &#39;theteism&#39;, &#39;thewsism&#39;, &#39;thewyism&#39;, &#39;thigsism&#39;, &#39;thilkism&#39;, &#39;thillism&#39;, &#39;thineism&#39;, &#39;thinsism&#39;, &#39;thiolism&#39;, &#39;thirlism&#39;, &#39;thoftism&#39;, &#39;tholeism&#39;, &#39;tholiism&#39;, &#39;thoroism&#39;, &#39;thorpism&#39;, &#39;thousism&#39;, &#39;thowlism&#39;, &#39;thraeism&#39;, &#39;thrawism&#39;, &#39;thrid&#39;, &#39;thripism&#39;, &#39;throeism&#39;, &#39;thudsism&#39;, &#39;thugsism&#39;, &#39;thuja&#39;, &#39;thunkism&#39;, &#39;thurlism&#39;, &#39;thuya&#39;, &#39;thymiism&#39;, &#39;thymyism&#39;, &#39;tiansism&#39;, &#39;tiarsism&#39;, &#39;ticalism&#39;, &#39;ticca&#39;, &#39;ticed&#39;, &#39;ticesism&#39;, &#39;tichyism&#39;, &#39;ticksism&#39;, &#39;tickyism&#39;, &#39;tiddyism&#39;, &#39;tided&#39;, &#39;tidesism&#39;, &#39;tiersism&#39;, &#39;tiffsism&#39;, &#39;tifosism&#39;, &#39;tiftsism&#39;, &#39;tigesism&#39;, &#39;tigonism&#39;, &#39;tikasism&#39;, &#39;tikesism&#39;, &#39;tikisism&#39;, &#39;tikka&#39;, &#39;tilakism&#39;, &#39;tiled&#39;, &#39;tilerism&#39;, &#39;tilesism&#39;, &#39;tillsism&#39;, &#39;tillyism&#39;, &#39;tilthism&#39;, &#39;tiltsism&#39;, &#39;timboism&#39;, &#39;timed&#39;, &#39;timesism&#39;, &#39;timonism&#39;, &#39;timpsism&#39;, &#39;tinasism&#39;, &#39;tinctism&#39;, &#39;tindsism&#39;, &#39;tinea&#39;, &#39;tined&#39;, &#39;tinesism&#39;, &#39;tingeism&#39;, &#39;tingsism&#39;, &#39;tinksism&#39;, &#39;tinnyism&#39;, &#39;tintsism&#39;, &#39;tintyism&#39;, &#39;tipisism&#39;, &#39;tippyism&#39;, &#39;tired&#39;, &#39;tiresism&#39;, &#39;tirlsism&#39;, &#39;tirosism&#39;, &#39;tirrsism&#39;, &#39;titchism&#39;, &#39;titerism&#39;, &#39;titisism&#39;, &#39;titreism&#39;, &#39;tittyism&#39;, &#39;titupism&#39;, &#39;tiyinism&#39;, &#39;tiynsism&#39;, &#39;tizesism&#39;, &#39;tizzyism&#39;, &#39;toadsism&#39;, &#39;toadyism&#39;, &#39;toazeism&#39;, &#39;tocksism&#39;, &#39;tockyism&#39;, &#39;tocosism&#39;, &#39;toddeism&#39;, &#39;toeasism&#39;, &#39;toffsism&#39;, &#39;toffyism&#39;, &#39;toftsism&#39;, &#39;tofusism&#39;, &#39;togaeism&#39;, &#39;togasism&#39;, &#39;toged&#39;, &#39;togesism&#39;, &#39;togueism&#39;, &#39;tohosism&#39;, &#39;toileism&#39;, &#39;toilsism&#39;, &#39;toingism&#39;, &#39;toiseism&#39;, &#39;toitsism&#39;, &#39;tokayism&#39;, &#39;toked&#39;, &#39;tokerism&#39;, &#39;tokesism&#39;, &#39;tokosism&#39;, &#39;tolanism&#39;, &#39;tolarism&#39;, &#39;tolasism&#39;, &#39;toled&#39;, &#39;tolesism&#39;, &#39;tollsism&#39;, &#39;tollyism&#39;, &#39;toltsism&#39;, &#39;tolusism&#39;, &#39;tolylism&#39;, &#39;tomanism&#39;, &#39;tombsism&#39;, &#39;tomesism&#39;, &#39;tomia&#39;, &#39;tommyism&#39;, &#39;tomosism&#39;, &#39;tondiism&#39;, &#39;tondoism&#39;, &#39;toned&#39;, &#39;tonerism&#39;, &#39;tonesism&#39;, &#39;toneyism&#39;, &#39;tongsism&#39;, &#39;tonka&#39;, &#39;tonksism&#39;, &#39;tonneism&#39;, &#39;tonusism&#39;, &#39;toolsism&#39;, &#39;toomsism&#39;, &#39;toonsism&#39;, &#39;tootsism&#39;, &#39;toped&#39;, &#39;topeeism&#39;, &#39;topekism&#39;, &#39;toperism&#39;, &#39;topesism&#39;, &#39;topheism&#39;, &#39;tophiism&#39;, &#39;tophsism&#39;, &#39;topisism&#39;, &#39;topoiism&#39;, &#39;toposism&#39;, &#39;toppyism&#39;, &#39;toqueism&#39;, &#39;torahism&#39;, &#39;toranism&#39;, &#39;torasism&#39;, &#39;torcsism&#39;, &#39;toresism&#39;, &#39;toric&#39;, &#39;toriiism&#39;, &#39;torosism&#39;, &#39;torotism&#39;, &#39;torrsism&#39;, &#39;torseism&#39;, &#39;torsiism&#39;, &#39;torskism&#39;, &#39;torta&#39;, &#39;torteism&#39;, &#39;tortsism&#39;, &#39;tosasism&#39;, &#39;tosed&#39;, &#39;tosesism&#39;, &#39;toshyism&#39;, &#39;tossyism&#39;, &#39;toted&#39;, &#39;toterism&#39;, &#39;totesism&#39;, &#39;tottyism&#39;, &#39;touksism&#39;, &#39;tounsism&#39;, &#39;toursism&#39;, &#39;touseism&#39;, &#39;tousyism&#39;, &#39;toutsism&#39;, &#39;touzeism&#39;, &#39;touzyism&#39;, &#39;towed&#39;, &#39;towieism&#39;, &#39;townsism&#39;, &#39;townyism&#39;, &#39;towseism&#39;, &#39;towsyism&#39;, &#39;towtsism&#39;, &#39;towzeism&#39;, &#39;towzyism&#39;, &#39;toyed&#39;, &#39;toyerism&#39;, &#39;toyonism&#39;, &#39;toyosism&#39;, &#39;tozed&#39;, &#39;tozesism&#39;, &#39;tozieism&#39;, &#39;trabsism&#39;, &#39;tradsism&#39;, &#39;tragiism&#39;, &#39;traikism&#39;, &#39;tramsism&#39;, &#39;trankism&#39;, &#39;tranqism&#39;, &#39;transism&#39;, &#39;trantism&#39;, &#39;trapeism&#39;, &#39;trapsism&#39;, &#39;traptism&#39;, &#39;trassism&#39;, &#39;tratsism&#39;, &#39;trattism&#39;, &#39;traveism&#39;, &#39;trayfism&#39;, &#39;traysism&#39;, &#39;treckism&#39;, &#39;treed&#39;, &#39;treenism&#39;, &#39;treesism&#39;, &#39;trefa&#39;, &#39;treifism&#39;, &#39;treksism&#39;, &#39;trema&#39;, &#39;tremsism&#39;, &#39;tressism&#39;, &#39;trestism&#39;, &#39;tretsism&#39;, &#39;trewsism&#39;, &#39;treyfism&#39;, &#39;treysism&#39;, &#39;triac&#39;, &#39;trideism&#39;, &#39;trierism&#39;, &#39;triesism&#39;, &#39;triffism&#39;, &#39;trigoism&#39;, &#39;trigsism&#39;, &#39;trikeism&#39;, &#39;trild&#39;, &#39;trillism&#39;, &#39;trimsism&#39;, &#39;trineism&#39;, &#39;trinsism&#39;, &#39;triolism&#39;, &#39;triorism&#39;, &#39;triosism&#39;, &#39;tripsism&#39;, &#39;tripyism&#39;, &#39;tristism&#39;, &#39;troad&#39;, &#39;troakism&#39;, &#39;troatism&#39;, &#39;trockism&#39;, &#39;trodeism&#39;, &#39;trodsism&#39;, &#39;trogsism&#39;, &#39;troisism&#39;, &#39;trokeism&#39;, &#39;trompism&#39;, &#39;trona&#39;, &#39;tronc&#39;, &#39;troneism&#39;, &#39;tronkism&#39;, &#39;tronsism&#39;, &#39;troozism&#39;, &#39;trothism&#39;, &#39;trotsism&#39;, &#39;trowsism&#39;, &#39;troysism&#39;, &#39;trued&#39;, &#39;truesism&#39;, &#39;trugoism&#39;, &#39;trugsism&#39;, &#39;trullism&#39;, &#39;tryerism&#39;, &#39;trykeism&#39;, &#39;tryma&#39;, &#39;trypsism&#39;, &#39;tsadeism&#39;, &#39;tsadiism&#39;, &#39;tsarsism&#39;, &#39;tsked&#39;, &#39;tsuba&#39;, &#39;tsuboism&#39;, &#39;tuansism&#39;, &#39;tuartism&#39;, &#39;tuathism&#39;, &#39;tubaeism&#39;, &#39;tubarism&#39;, &#39;tubasism&#39;, &#39;tubbyism&#39;, &#39;tubed&#39;, &#39;tubesism&#39;, &#39;tucksism&#39;, &#39;tufasism&#39;, &#39;tuffeism&#39;, &#39;tuffsism&#39;, &#39;tuftsism&#39;, &#39;tuftyism&#39;, &#39;tugra&#39;, &#39;tuileism&#39;, &#39;tuina&#39;, &#39;tuismism&#39;, &#39;tuktuism&#39;, &#39;tulesism&#39;, &#39;tulpa&#39;, &#39;tulsiism&#39;, &#39;tumid&#39;, &#39;tummyism&#39;, &#39;tumpsism&#39;, &#39;tumpyism&#39;, &#39;tunasism&#39;, &#39;tundsism&#39;, &#39;tuned&#39;, &#39;tunerism&#39;, &#39;tunesism&#39;, &#39;tungsism&#39;, &#39;tunnyism&#39;, &#39;tupekism&#39;, &#39;tupikism&#39;, &#39;tupleism&#39;, &#39;tuqueism&#39;, &#39;turdsism&#39;, &#39;turfsism&#39;, &#39;turfyism&#39;, &#39;turksism&#39;, &#39;turmeism&#39;, &#39;turmsism&#39;, &#39;turnsism&#39;, &#39;turntism&#39;, &#39;turpsism&#39;, &#39;turrsism&#39;, &#39;tushyism&#39;, &#39;tusksism&#39;, &#39;tuskyism&#39;, &#39;tuteeism&#39;, &#39;tuttiism&#39;, &#39;tuttyism&#39;, &#39;tutusism&#39;, &#39;tuxesism&#39;, &#39;tuyerism&#39;, &#39;twaesism&#39;, &#39;twainism&#39;, &#39;twalsism&#39;, &#39;twankism&#39;, &#39;twatsism&#39;, &#39;twaysism&#39;, &#39;tweelism&#39;, &#39;tweenism&#39;, &#39;tweepism&#39;, &#39;tweerism&#39;, &#39;twerkism&#39;, &#39;twerpism&#39;, &#39;twierism&#39;, &#39;twigsism&#39;, &#39;twillism&#39;, &#39;twiltism&#39;, &#39;twinkism&#39;, &#39;twinsism&#39;, &#39;twinyism&#39;, &#39;twireism&#39;, &#39;twirpism&#39;, &#39;twiteism&#39;, &#39;twitsism&#39;, &#39;twoerism&#39;, &#39;twyerism&#39;, &#39;tyeesism&#39;, &#39;tyersism&#39;, &#39;tyiynism&#39;, &#39;tykesism&#39;, &#39;tylerism&#39;, &#39;tympsism&#39;, &#39;tyndeism&#39;, &#39;tyned&#39;, &#39;tynesism&#39;, &#39;typalism&#39;, &#39;typed&#39;, &#39;typesism&#39;, &#39;typeyism&#39;, &#39;typic&#39;, &#39;typosism&#39;, &#39;typpsism&#39;, &#39;typtoism&#39;, &#39;tyranism&#39;, &#39;tyred&#39;, &#39;tyresism&#39;, &#39;tyrosism&#39;, &#39;tytheism&#39;, &#39;tzarsism&#39;, &#39;udalsism&#39;, &#39;udonsism&#39;, &#39;ugaliism&#39;, &#39;ugged&#39;, &#39;uhlanism&#39;, &#39;uhuruism&#39;, &#39;ukaseism&#39;, &#39;ulama&#39;, &#39;ulansism&#39;, &#39;ulema&#39;, &#39;ulminism&#39;, &#39;ulnad&#39;, &#39;ulnaeism&#39;, &#39;ulnarism&#39;, &#39;ulnasism&#39;, &#39;ulpanism&#39;, &#39;ulvasism&#39;, &#39;ulyieism&#39;, &#39;ulzieism&#39;, &#39;umamiism&#39;, &#39;umbelism&#39;, &#39;umberism&#39;, &#39;umbleism&#39;, &#39;umbosism&#39;, &#39;umbreism&#39;, &#39;umiac&#39;, &#39;umiakism&#39;, &#39;umiaqism&#39;, &#39;ummahism&#39;, &#39;ummasism&#39;, &#39;ummed&#39;, &#39;umped&#39;, &#39;umphsism&#39;, &#39;umpieism&#39;, &#39;umptyism&#39;, &#39;umrahism&#39;, &#39;umrasism&#39;, &#39;unaisism&#39;, &#39;unaptism&#39;, &#39;unarmism&#39;, &#39;unaryism&#39;, &#39;unausism&#39;, &#39;unbagism&#39;, &#39;unbanism&#39;, &#39;unbarism&#39;, &#39;unbed&#39;, &#39;unbid&#39;, &#39;unboxism&#39;, &#39;uncapism&#39;, &#39;uncesism&#39;, &#39;uncia&#39;, &#39;uncosism&#39;, &#39;uncoyism&#39;, &#39;uncusism&#39;, &#39;undamism&#39;, &#39;undeeism&#39;, &#39;undosism&#39;, &#39;undugism&#39;, &#39;unethism&#39;, &#39;unfixism&#39;, &#39;ungagism&#39;, &#39;ungetism&#39;, &#39;ungod&#39;, &#39;ungotism&#39;, &#39;ungumism&#39;, &#39;unhatism&#39;, &#39;unhipism&#39;, &#39;unica&#39;, &#39;unitsism&#39;, &#39;unjamism&#39;, &#39;unked&#39;, &#39;unketism&#39;, &#39;unkid&#39;, &#39;unlawism&#39;, &#39;unlayism&#39;, &#39;unled&#39;, &#39;unletism&#39;, &#39;unlid&#39;, &#39;unmanism&#39;, &#39;unmewism&#39;, &#39;unmixism&#39;, &#39;unpayism&#39;, &#39;unpegism&#39;, &#39;unpenism&#39;, &#39;unpinism&#39;, &#39;unred&#39;, &#39;unrid&#39;, &#39;unrigism&#39;, &#39;unripism&#39;, &#39;unsawism&#39;, &#39;unsayism&#39;, &#39;unseeism&#39;, &#39;unsewism&#39;, &#39;unsexism&#39;, &#39;unsod&#39;, &#39;untaxism&#39;, &#39;untinism&#39;, &#39;unwetism&#39;, &#39;unwitism&#39;, &#39;unwonism&#39;, &#39;upbowism&#39;, &#39;upbyeism&#39;, &#39;updosism&#39;, &#39;updryism&#39;, &#39;upend&#39;, &#39;upjetism&#39;, &#39;uplayism&#39;, &#39;upled&#39;, &#39;uplitism&#39;, &#39;upped&#39;, &#39;upranism&#39;, &#39;uprunism&#39;, &#39;upseeism&#39;, &#39;upseyism&#39;, &#39;uptakism&#39;, &#39;upterism&#39;, &#39;uptieism&#39;, &#39;uraeiism&#39;, &#39;uraliism&#39;, &#39;uraosism&#39;, &#39;urareism&#39;, &#39;urariism&#39;, &#39;uraseism&#39;, &#39;urateism&#39;, &#39;urbexism&#39;, &#39;urbia&#39;, &#39;urdeeism&#39;, &#39;urealism&#39;, &#39;ureasism&#39;, &#39;uredoism&#39;, &#39;ureic&#39;, &#39;urena&#39;, &#39;urentism&#39;, &#39;urged&#39;, &#39;urgerism&#39;, &#39;urgesism&#39;, &#39;urialism&#39;, &#39;uriteism&#39;, &#39;urmanism&#39;, &#39;urnalism&#39;, &#39;urned&#39;, &#39;urped&#39;, &#39;ursaeism&#39;, &#39;ursid&#39;, &#39;ursonism&#39;, &#39;urubuism&#39;, &#39;urvasism&#39;, &#39;usersism&#39;, &#39;usnea&#39;, &#39;usqueism&#39;, &#39;usureism&#39;, &#39;usuryism&#39;, &#39;uteriism&#39;, &#39;uvealism&#39;, &#39;uveasism&#39;, &#39;uvula&#39;, &#39;vacua&#39;, &#39;vaded&#39;, &#39;vadesism&#39;, &#39;vagalism&#39;, &#39;vagusism&#39;, &#39;vailsism&#39;, &#39;vaireism&#39;, &#39;vairsism&#39;, &#39;vairyism&#39;, &#39;vakasism&#39;, &#39;vakilism&#39;, &#39;valesism&#39;, &#39;valisism&#39;, &#39;valseism&#39;, &#39;vampsism&#39;, &#39;vampyism&#39;, &#39;vanda&#39;, &#39;vaned&#39;, &#39;vanesism&#39;, &#39;vangsism&#39;, &#39;vantsism&#39;, &#39;vaped&#39;, &#39;vaperism&#39;, &#39;vapesism&#39;, &#39;varanism&#39;, &#39;varasism&#39;, &#39;vardyism&#39;, &#39;varec&#39;, &#39;varesism&#39;, &#39;varia&#39;, &#39;varixism&#39;, &#39;varna&#39;, &#39;varusism&#39;, &#39;varveism&#39;, &#39;vasalism&#39;, &#39;vasesism&#39;, &#39;vastsism&#39;, &#39;vastyism&#39;, &#39;vatic&#39;, &#39;vatusism&#39;, &#39;vauchism&#39;, &#39;vauteism&#39;, &#39;vautsism&#39;, &#39;vawteism&#39;, &#39;vaxesism&#39;, &#39;vealeism&#39;, &#39;vealsism&#39;, &#39;vealyism&#39;, &#39;veena&#39;, &#39;veepsism&#39;, &#39;veersism&#39;, &#39;veeryism&#39;, &#39;vegasism&#39;, &#39;vegesism&#39;, &#39;vegieism&#39;, &#39;vegosism&#39;, &#39;vehmeism&#39;, &#39;veilsism&#39;, &#39;veilyism&#39;, &#39;veinsism&#39;, &#39;veinyism&#39;, &#39;velarism&#39;, &#39;veldsism&#39;, &#39;veldtism&#39;, &#39;velesism&#39;, &#39;vellsism&#39;, &#39;velumism&#39;, &#39;venaeism&#39;, &#39;venalism&#39;, &#39;vendsism&#39;, &#39;venduism&#39;, &#39;veneyism&#39;, &#39;vengeism&#39;, &#39;veninism&#39;, &#39;ventsism&#39;, &#39;venusism&#39;, &#39;verbsism&#39;, &#39;verra&#39;, &#39;verryism&#39;, &#39;verstism&#39;, &#39;vertsism&#39;, &#39;vertuism&#39;, &#39;vespa&#39;, &#39;vesta&#39;, &#39;vestsism&#39;, &#39;vetchism&#39;, &#39;vexed&#39;, &#39;vexerism&#39;, &#39;vexesism&#39;, &#39;vexilism&#39;, &#39;vezirism&#39;, &#39;vialsism&#39;, &#39;viand&#39;, &#39;vibesism&#39;, &#39;vibexism&#39;, &#39;vibeyism&#39;, &#39;viced&#39;, &#39;vicesism&#39;, &#39;vichyism&#39;, &#39;viersism&#39;, &#39;viewsism&#39;, &#39;viewyism&#39;, &#39;vifda&#39;, &#39;viffsism&#39;, &#39;vigasism&#39;, &#39;vigia&#39;, &#39;vildeism&#39;, &#39;vilerism&#39;, &#39;villiism&#39;, &#39;villsism&#39;, &#39;vimenism&#39;, &#39;vinalism&#39;, &#39;vinasism&#39;, &#39;vinca&#39;, &#39;vined&#39;, &#39;vinerism&#39;, &#39;vinesism&#39;, &#39;vinewism&#39;, &#39;vinic&#39;, &#39;vinosism&#39;, &#39;vintsism&#39;, &#39;viold&#39;, &#39;violsism&#39;, &#39;vired&#39;, &#39;vireoism&#39;, &#39;viresism&#39;, &#39;virga&#39;, &#39;virgeism&#39;, &#39;virid&#39;, &#39;virlsism&#39;, &#39;virtuism&#39;, &#39;visasism&#39;, &#39;vised&#39;, &#39;visesism&#39;, &#39;visieism&#39;, &#39;visneism&#39;, &#39;visonism&#39;, &#39;vistoism&#39;, &#39;vitaeism&#39;, &#39;vitasism&#39;, &#39;vitexism&#39;, &#39;vitroism&#39;, &#39;vitta&#39;, &#39;vivasism&#39;, &#39;vivatism&#39;, &#39;vivda&#39;, &#39;viverism&#39;, &#39;vivesism&#39;, &#39;vizirism&#39;, &#39;vizorism&#39;, &#39;vleisism&#39;, &#39;vliesism&#39;, &#39;vlogsism&#39;, &#39;voarsism&#39;, &#39;vocab&#39;, &#39;vocesism&#39;, &#39;voddyism&#39;, &#39;vodouism&#39;, &#39;vodunism&#39;, &#39;voema&#39;, &#39;vogieism&#39;, &#39;voidsism&#39;, &#39;voileism&#39;, &#39;voipsism&#39;, &#39;volaeism&#39;, &#39;volarism&#39;, &#39;voled&#39;, &#39;volesism&#39;, &#39;voletism&#39;, &#39;volksism&#39;, &#39;volta&#39;, &#39;volteism&#39;, &#39;voltiism&#39;, &#39;voltsism&#39;, &#39;volva&#39;, &#39;volveism&#39;, &#39;vomerism&#39;, &#39;voted&#39;, &#39;votesism&#39;, &#39;vougeism&#39;, &#39;vouluism&#39;, &#39;vowed&#39;, &#39;vowerism&#39;, &#39;voxelism&#39;, &#39;vozhd&#39;, &#39;vraic&#39;, &#39;vrilsism&#39;, &#39;vroomism&#39;, &#39;vrousism&#39;, &#39;vrouwism&#39;, &#39;vrowsism&#39;, &#39;vuggsism&#39;, &#39;vuggyism&#39;, &#39;vughsism&#39;, &#39;vughyism&#39;, &#39;vulgoism&#39;, &#39;vulnsism&#39;, &#39;vulva&#39;, &#39;vuttyism&#39;, &#39;waacsism&#39;, &#39;wackeism&#39;, &#39;wackoism&#39;, &#39;wacksism&#39;, &#39;waddsism&#39;, &#39;waddyism&#39;, &#39;waded&#39;, &#39;waderism&#39;, &#39;wadesism&#39;, &#39;wadgeism&#39;, &#39;wadisism&#39;, &#39;wadtsism&#39;, &#39;waffsism&#39;, &#39;waftsism&#39;, &#39;waged&#39;, &#39;wagesism&#39;, &#39;wagga&#39;, &#39;wagyuism&#39;, &#39;wahooism&#39;, &#39;waideism&#39;, &#39;waifsism&#39;, &#39;waiftism&#39;, &#39;wailsism&#39;, &#39;wainsism&#39;, &#39;wairsism&#39;, &#39;waiteism&#39;, &#39;waitsism&#39;, &#39;wakasism&#39;, &#39;waked&#39;, &#39;wakenism&#39;, &#39;wakerism&#39;, &#39;wakesism&#39;, &#39;wakfsism&#39;, &#39;waldoism&#39;, &#39;waldsism&#39;, &#39;waled&#39;, &#39;walerism&#39;, &#39;walesism&#39;, &#39;walieism&#39;, &#39;walisism&#39;, &#39;walksism&#39;, &#39;walla&#39;, &#39;wallsism&#39;, &#39;wallyism&#39;, &#39;waltyism&#39;, &#39;wamed&#39;, &#39;wamesism&#39;, &#39;wamusism&#39;, &#39;wandsism&#39;, &#39;waned&#39;, &#39;wanesism&#39;, &#39;waneyism&#39;, &#39;wangsism&#39;, &#39;wanksism&#39;, &#39;wankyism&#39;, &#39;wanleism&#39;, &#39;wanlyism&#39;, &#39;wanna&#39;, &#39;wantsism&#39;, &#39;wantyism&#39;, &#39;wanzeism&#39;, &#39;waqfsism&#39;, &#39;warbsism&#39;, &#39;warbyism&#39;, &#39;wardsism&#39;, &#39;wared&#39;, &#39;waresism&#39;, &#39;warezism&#39;, &#39;warksism&#39;, &#39;warmsism&#39;, &#39;warnsism&#39;, &#39;warpsism&#39;, &#39;warreism&#39;, &#39;warstism&#39;, &#39;wartsism&#39;, &#39;wasesism&#39;, &#39;washyism&#39;, &#39;wasmsism&#39;, &#39;waspsism&#39;, &#39;waspyism&#39;, &#39;wastsism&#39;, &#39;watapism&#39;, &#39;wattsism&#39;, &#39;wauffism&#39;, &#39;waughism&#39;, &#39;wauksism&#39;, &#39;waulkism&#39;, &#39;waulsism&#39;, &#39;waursism&#39;, &#39;waved&#39;, &#39;wavesism&#39;, &#39;waveyism&#39;, &#39;wawasism&#39;, &#39;wawesism&#39;, &#39;wawlsism&#39;, &#39;waxed&#39;, &#39;waxerism&#39;, &#39;waxesism&#39;, &#39;wayed&#39;, &#39;wazirism&#39;, &#39;wazooism&#39;, &#39;weald&#39;, &#39;wealsism&#39;, &#39;weamb&#39;, &#39;weansism&#39;, &#39;wearsism&#39;, &#39;webbyism&#39;, &#39;weberism&#39;, &#39;wechtism&#39;, &#39;wedelism&#39;, &#39;wedgyism&#39;, &#39;weedsism&#39;, &#39;weekeism&#39;, &#39;weeksism&#39;, &#39;weelsism&#39;, &#39;weemsism&#39;, &#39;weensism&#39;, &#39;weenyism&#39;, &#39;weepsism&#39;, &#39;weepyism&#39;, &#39;weestism&#39;, &#39;weeteism&#39;, &#39;weetsism&#39;, &#39;wefteism&#39;, &#39;weftsism&#39;, &#39;weidsism&#39;, &#39;weilsism&#39;, &#39;weirsism&#39;, &#39;weiseism&#39;, &#39;weizeism&#39;, &#39;wekasism&#39;, &#39;weldsism&#39;, &#39;welkeism&#39;, &#39;welksism&#39;, &#39;welktism&#39;, &#39;wellsism&#39;, &#39;wellyism&#39;, &#39;weltsism&#39;, &#39;wembsism&#39;, &#39;wendsism&#39;, &#39;wengeism&#39;, &#39;wennyism&#39;, &#39;wentsism&#39;, &#39;werosism&#39;, &#39;wershism&#39;, &#39;westsism&#39;, &#39;wetasism&#39;, &#39;wetlyism&#39;, &#39;wexed&#39;, &#39;wexesism&#39;, &#39;whamoism&#39;, &#39;whamsism&#39;, &#39;whangism&#39;, &#39;whapsism&#39;, &#39;whareism&#39;, &#39;whata&#39;, &#39;whatsism&#39;, &#39;whaupism&#39;, &#39;whaurism&#39;, &#39;whealism&#39;, &#39;whearism&#39;, &#39;wheenism&#39;, &#39;wheepism&#39;, &#39;wheftism&#39;, &#39;whelkism&#39;, &#39;whelmism&#39;, &#39;whensism&#39;, &#39;whetsism&#39;, &#39;whewsism&#39;, &#39;wheysism&#39;, &#39;whidsism&#39;, &#39;whiftism&#39;, &#39;whigsism&#39;, &#39;whilkism&#39;, &#39;whimsism&#39;, &#39;whinsism&#39;, &#39;whiosism&#39;, &#39;whipsism&#39;, &#39;whiptism&#39;, &#39;whirrism&#39;, &#39;whirsism&#39;, &#39;whishism&#39;, &#39;whissism&#39;, &#39;whistism&#39;, &#39;whitsism&#39;, &#39;whityism&#39;, &#39;whizzism&#39;, &#39;whompism&#39;, &#39;whoofism&#39;, &#39;whootism&#39;, &#39;whopsism&#39;, &#39;whoreism&#39;, &#39;whorlism&#39;, &#39;whortism&#39;, &#39;whosoism&#39;, &#39;whowsism&#39;, &#39;whumpism&#39;, &#39;whupsism&#39;, &#39;whyda&#39;, &#39;wicca&#39;, &#39;wicksism&#39;, &#39;wickyism&#39;, &#39;widdyism&#39;, &#39;widesism&#39;, &#39;wielsism&#39;, &#39;wifed&#39;, &#39;wifesism&#39;, &#39;wifeyism&#39;, &#39;wifieism&#39;, &#39;wiftyism&#39;, &#39;wiganism&#39;, &#39;wigga&#39;, &#39;wiggyism&#39;, &#39;wikisism&#39;, &#39;wilcoism&#39;, &#39;wildsism&#39;, &#39;wiled&#39;, &#39;wilesism&#39;, &#39;wilga&#39;, &#39;wilisism&#39;, &#39;wilja&#39;, &#39;willsism&#39;, &#39;wiltsism&#39;, &#39;wimpsism&#39;, &#39;windsism&#39;, &#39;wined&#39;, &#39;winesism&#39;, &#39;wineyism&#39;, &#39;wingeism&#39;, &#39;wingsism&#39;, &#39;wingyism&#39;, &#39;winksism&#39;, &#39;winna&#39;, &#39;winnsism&#39;, &#39;winosism&#39;, &#39;winzeism&#39;, &#39;wiped&#39;, &#39;wiperism&#39;, &#39;wipesism&#39;, &#39;wired&#39;, &#39;wirerism&#39;, &#39;wiresism&#39;, &#39;wirra&#39;, &#39;wised&#39;, &#39;wisesism&#39;, &#39;wisha&#39;, &#39;wishtism&#39;, &#39;wispsism&#39;, &#39;wistsism&#39;, &#39;witanism&#39;, &#39;wited&#39;, &#39;witesism&#39;, &#39;witheism&#39;, &#39;withsism&#39;, &#39;withyism&#39;, &#39;wived&#39;, &#39;wiverism&#39;, &#39;wivesism&#39;, &#39;wizenism&#39;, &#39;wizesism&#39;, &#39;woadsism&#39;, &#39;woald&#39;, &#39;wocksism&#39;, &#39;wodgeism&#39;, &#39;wofulism&#39;, &#39;wojusism&#39;, &#39;wokerism&#39;, &#39;wokka&#39;, &#39;woldsism&#39;, &#39;wolfsism&#39;, &#39;wollyism&#39;, &#39;wolveism&#39;, &#39;wombsism&#39;, &#39;wombyism&#39;, &#39;womynism&#39;, &#39;wonga&#39;, &#39;wongiism&#39;, &#39;wonksism&#39;, &#39;wonkyism&#39;, &#39;wontsism&#39;, &#39;woodsism&#39;, &#39;wooed&#39;, &#39;woofsism&#39;, &#39;woofyism&#39;, &#39;woold&#39;, &#39;woolsism&#39;, &#39;woonsism&#39;, &#39;woopsism&#39;, &#39;woopyism&#39;, &#39;wooseism&#39;, &#39;wooshism&#39;, &#39;wootzism&#39;, &#39;wordsism&#39;, &#39;worksism&#39;, &#39;wormsism&#39;, &#39;wormyism&#39;, &#39;wortsism&#39;, &#39;wowed&#39;, &#39;woweeism&#39;, &#39;woxenism&#39;, &#39;wrangism&#39;, &#39;wrapsism&#39;, &#39;wraptism&#39;, &#39;wrastism&#39;, &#39;wrateism&#39;, &#39;wrawlism&#39;, &#39;wrensism&#39;, &#39;wrickism&#39;, &#39;wried&#39;, &#39;wrierism&#39;, &#39;wriesism&#39;, &#39;writsism&#39;, &#39;wrokeism&#39;, &#39;wrootism&#39;, &#39;wrothism&#39;, &#39;wryerism&#39;, &#39;wuddyism&#39;, &#39;wudusism&#39;, &#39;wullsism&#39;, &#39;wurstism&#39;, &#39;wusesism&#39;, &#39;wushuism&#39;, &#39;wussyism&#39;, &#39;wuxia&#39;, &#39;wyled&#39;, &#39;wylesism&#39;, &#39;wyndsism&#39;, &#39;wynnsism&#39;, &#39;wyted&#39;, &#39;wytesism&#39;, &#39;xebec&#39;, &#39;xenia&#39;, &#39;xenic&#39;, &#39;xenonism&#39;, &#39;xeric&#39;, &#39;xeroxism&#39;, &#39;xerusism&#39;, &#39;xoana&#39;, &#39;xraysism&#39;, &#39;xylanism&#39;, &#39;xylemism&#39;, &#39;xylic&#39;, &#39;xylolism&#39;, &#39;xylylism&#39;, &#39;xystiism&#39;, &#39;xystsism&#39;, &#39;yaarsism&#39;, &#39;yabasism&#39;, &#39;yabba&#39;, &#39;yabbyism&#39;, &#39;yacca&#39;, &#39;yacka&#39;, &#39;yacksism&#39;, &#39;yaffsism&#39;, &#39;yagerism&#39;, &#39;yagesism&#39;, &#39;yagisism&#39;, &#39;yahooism&#39;, &#39;yaird&#39;, &#39;yakka&#39;, &#39;yakowism&#39;, &#39;yalesism&#39;, &#39;yamenism&#39;, &#39;yampyism&#39;, &#39;yamunism&#39;, &#39;yangsism&#39;, &#39;yanksism&#39;, &#39;yapokism&#39;, &#39;yaponism&#39;, &#39;yappsism&#39;, &#39;yappyism&#39;, &#39;yarakism&#39;, &#39;yarcoism&#39;, &#39;yardsism&#39;, &#39;yarerism&#39;, &#39;yarfa&#39;, &#39;yarksism&#39;, &#39;yarnsism&#39;, &#39;yarrsism&#39;, &#39;yarta&#39;, &#39;yartoism&#39;, &#39;yatesism&#39;, &#39;yaudsism&#39;, &#39;yauld&#39;, &#39;yaupsism&#39;, &#39;yawed&#39;, &#39;yaweyism&#39;, &#39;yawlsism&#39;, &#39;yawnsism&#39;, &#39;yawnyism&#39;, &#39;yawpsism&#39;, &#39;yboreism&#39;, &#39;yclad&#39;, &#39;ycled&#39;, &#39;ycond&#39;, &#39;ydrad&#39;, &#39;ydred&#39;, &#39;yeadsism&#39;, &#39;yeahsism&#39;, &#39;yealmism&#39;, &#39;yeansism&#39;, &#39;yeard&#39;, &#39;yearsism&#39;, &#39;yecchism&#39;, &#39;yechsism&#39;, &#39;yechyism&#39;, &#39;yedesism&#39;, &#39;yeedsism&#39;, &#39;yeeshism&#39;, &#39;yeggsism&#39;, &#39;yelksism&#39;, &#39;yellsism&#39;, &#39;yelmsism&#39;, &#39;yelpsism&#39;, &#39;yeltsism&#39;, &#39;yenta&#39;, &#39;yenteism&#39;, &#39;yerba&#39;, &#39;yerdsism&#39;, &#39;yerksism&#39;, &#39;yesesism&#39;, &#39;yesksism&#39;, &#39;yestsism&#39;, &#39;yestyism&#39;, &#39;yetisism&#39;, &#39;yettsism&#39;, &#39;yeuksism&#39;, &#39;yeukyism&#39;, &#39;yevenism&#39;, &#39;yevesism&#39;, &#39;yewenism&#39;, &#39;yexed&#39;, &#39;yexesism&#39;, &#39;yfereism&#39;, &#39;yiked&#39;, &#39;yikesism&#39;, &#39;yillsism&#39;, &#39;yinceism&#39;, &#39;yipesism&#39;, &#39;yippyism&#39;, &#39;yirdsism&#39;, &#39;yirksism&#39;, &#39;yirrsism&#39;, &#39;yirthism&#39;, &#39;yitesism&#39;, &#39;yitieism&#39;, &#39;ylemsism&#39;, &#39;ylikeism&#39;, &#39;ylkesism&#39;, &#39;ymoltism&#39;, &#39;ympesism&#39;, &#39;yobboism&#39;, &#39;yobbyism&#39;, &#39;yocksism&#39;, &#39;yodelism&#39;, &#39;yodhsism&#39;, &#39;yodleism&#39;, &#39;yogasism&#39;, &#39;yogeeism&#39;, &#39;yoghsism&#39;, &#39;yogic&#39;, &#39;yoginism&#39;, &#39;yogisism&#39;, &#39;yoickism&#39;, &#39;yojanism&#39;, &#39;yoked&#39;, &#39;yokelism&#39;, &#39;yokerism&#39;, &#39;yokesism&#39;, &#39;yokulism&#39;, &#39;yolksism&#39;, &#39;yolkyism&#39;, &#39;yomimism&#39;, &#39;yompsism&#39;, &#39;yonic&#39;, &#39;yonisism&#39;, &#39;yonksism&#39;, &#39;yoofsism&#39;, &#39;yoopsism&#39;, &#39;yoresism&#39;, &#39;yorksism&#39;, &#39;yorpsism&#39;, &#39;youksism&#39;, &#39;yournism&#39;, &#39;yoursism&#39;, &#39;yourtism&#39;, &#39;youseism&#39;, &#39;yowed&#39;, &#39;yowesism&#39;, &#39;yowieism&#39;, &#39;yowlsism&#39;, &#39;yowza&#39;, &#39;yraptism&#39;, &#39;yrentism&#39;, &#39;yrivd&#39;, &#39;yrnehism&#39;, &#39;ysameism&#39;, &#39;ytostism&#39;, &#39;yuansism&#39;, &#39;yucasism&#39;, &#39;yucca&#39;, &#39;yucchism&#39;, &#39;yuckoism&#39;, &#39;yucksism&#39;, &#39;yuckyism&#39;, &#39;yuftsism&#39;, &#39;yugasism&#39;, &#39;yuked&#39;, &#39;yukesism&#39;, &#39;yukkyism&#39;, &#39;yukosism&#39;, &#39;yulanism&#39;, &#39;yulesism&#39;, &#39;yummoism&#39;, &#39;yummyism&#39;, &#39;yumpsism&#39;, &#39;yuponism&#39;, &#39;yuppyism&#39;, &#39;yurta&#39;, &#39;yurtsism&#39;, &#39;yuzusism&#39;, &#39;zabra&#39;, &#39;zacksism&#39;, &#39;zaida&#39;, &#39;zaidyism&#39;, &#39;zaireism&#39;, &#39;zakatism&#39;, &#39;zamanism&#39;, &#39;zamboism&#39;, &#39;zamia&#39;, &#39;zanja&#39;, &#39;zanteism&#39;, &#39;zanza&#39;, &#39;zanzeism&#39;, &#39;zappyism&#39;, &#39;zarfsism&#39;, &#39;zarisism&#39;, &#39;zatisism&#39;, &#39;zaxesism&#39;, &#39;zayinism&#39;, &#39;zazenism&#39;, &#39;zealsism&#39;, &#39;zebec&#39;, &#39;zebub&#39;, &#39;zebusism&#39;, &#39;zedasism&#39;, &#39;zeinsism&#39;, &#39;zendoism&#39;, &#39;zerda&#39;, &#39;zerksism&#39;, &#39;zerosism&#39;, &#39;zestsism&#39;, &#39;zetasism&#39;, &#39;zexesism&#39;, &#39;zezesism&#39;, &#39;zhomoism&#39;, &#39;zibetism&#39;, &#39;ziffsism&#39;, &#39;ziganism&#39;, &#39;zilasism&#39;, &#39;zilchism&#39;, &#39;zilla&#39;, &#39;zillsism&#39;, &#39;zimbiism&#39;, &#39;zimbsism&#39;, &#39;zincoism&#39;, &#39;zincsism&#39;, &#39;zincyism&#39;, &#39;zineb&#39;, &#39;zinesism&#39;, &#39;zingsism&#39;, &#39;zingyism&#39;, &#39;zinkeism&#39;, &#39;zinkyism&#39;, &#39;zippoism&#39;, &#39;zippyism&#39;, &#39;ziramism&#39;, &#39;zitisism&#39;, &#39;zizelism&#39;, &#39;zizitism&#39;, &#39;zloteism&#39;, &#39;zlotyism&#39;, &#39;zoaea&#39;, &#39;zobosism&#39;, &#39;zobusism&#39;, &#39;zoccoism&#39;, &#39;zoeaeism&#39;, &#39;zoealism&#39;, &#39;zoeasism&#39;, &#39;zoismism&#39;, &#39;zoistism&#39;, &#39;zombiism&#39;, &#39;zonaeism&#39;, &#39;zonda&#39;, &#39;zoned&#39;, &#39;zonerism&#39;, &#39;zonesism&#39;, &#39;zonksism&#39;, &#39;zooea&#39;, &#39;zooeyism&#39;, &#39;zooid&#39;, &#39;zooksism&#39;, &#39;zoomsism&#39;, &#39;zoonsism&#39;, &#39;zootyism&#39;, &#39;zoppa&#39;, &#39;zoppoism&#39;, &#39;zorilism&#39;, &#39;zorisism&#39;, &#39;zorroism&#39;, &#39;zouksism&#39;, &#39;zoweeism&#39;, &#39;zowieism&#39;, &#39;zulusism&#39;, &#39;zupanism&#39;, &#39;zupasism&#39;, &#39;zuppa&#39;, &#39;zurfsism&#39;, &#39;zuzimism&#39;, &#39;zygalism&#39;, &#39;zygonism&#39;, &#39;zymesism&#39;, &#39;zymic&#39;] .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2022/04/28/binarylogichacks.html",
            "relUrl": "/2022/04/28/binarylogichacks.html",
            "date": " • Apr 28, 2022"
        }
        
    
  
    
        ,"post62": {
            "title": "Numpy Hacks",
            "content": "from skimage import io from matplotlib import pyplot as plt waldo = io.imread(&#39;waldo.jpg&#39;) plt.imshow(waldo) . &lt;matplotlib.image.AxesImage at 0x7ff18e229160&gt; . plt.imshow(waldo[220:350, 430:500]) . &lt;matplotlib.image.AxesImage at 0x7ff18e1f6160&gt; .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2022/04/23/numpyhacks.html",
            "relUrl": "/2022/04/23/numpyhacks.html",
            "date": " • Apr 23, 2022"
        }
        
    
  
    
        ,"post63": {
            "title": "Smiley",
            "content": "from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Smiley&quot;, &#39;label&#39;: &quot;Smiley&quot;, &#39;file&#39;: &quot;smiley.png&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # display default images from image_data() default_images = image_data() image_display(default_images) .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2022/03/07/smiley.html",
            "relUrl": "/2022/03/07/smiley.html",
            "date": " • Mar 7, 2022"
        }
        
    
  
    
        ,"post64": {
            "title": "PT Grading",
            "content": "Grading 1 . Reporting Category My Score College Board Score Comments . Program Purpose/ Function | 1 | 0 | The person did not distinguish between program purpose and functionality. The person only described functionality | . Data Abstraction | 1 | 1 | Includes two code segments, implements a list for a desired function | . Managing Complexity | 0 | 0 | The provided explanation did not support how the use of a list would manage the program’s complexity. The use of a list did not have any benefit or advantage to fixing errors in the code over something else such as a variable. | . Procedural Abstraction | 1 | 1 | A procedure, ratioCalculate was defined and called. Person also described how the procedure is used and relted to the overall function of the program. | . Algorithm Implementation | 1 | 1 | Program uses all three: sequencing,selection (if), and iteration (through a list) | . Testing | 1 | 1 | Program is tests and when functions are called they properly run. | . Grading 2 . Reporting Category My Score College Board Score Comments . Program Purpose/ Function | 1 | 1 | The person distinguishedbetween program purpose and functionality. Had a clear purpose and clear function. | . Data Abstraction | 1 | 1 | mplements three lists: startGrid, currentGrid and nextGrid. | . Managing Complexity | 1 | 1 | The provided explanationsupports how the use of a listwould manage the program&#39;s complexity by explaining how theuse of variables or other resources would be inefficient. The use of a list did have great benefit. | . Procedural Abstraction | 1 | 1 | A procedure, resetallwas defined and called. The function is used to simply reset the game. Also, newGen was defined which copiesinformation from the old generation to the new one. | . Algorithm Implementation | 1 | 1 | Program uses all three: sequencing, selection (if), and iteration (through a list) | . Testing | 1 | 1 | Program is tests and when functions arecalled they properly run. Clearly describe results in written report as well. | .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2022/01/11/gradingpt.html",
            "relUrl": "/2022/01/11/gradingpt.html",
            "date": " • Jan 11, 2022"
        }
        
    
  
    
        ,"post65": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post66": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Time Box",
          "content": "Week # Title Link to Review Ticket Learning . Week #0 | Tools Setup | Review Ticket 0 | Created personal fastpage, made first markdown post, learned to use vscode, and used jupyter notebook to run python | . Week #1 | Intro Python, Jupyter, Fastpages | Review Ticket 1 | Created a quiz with python, added images to personalize front page, md daily blog post, bash tool check | . Week #2 | Data Abstraction | Review Ticket 2 | Change remote theme temporarily and blog findings, created this page and table, use python find and print certain part of database based on user input (dictionaries) | .",
          "url": "https://tanishapatil1234.github.io/test-fastpage-tp/Time%20Box/",
          "relUrl": "/Time Box/",
          "date": ""
      }
      
  

  

  
      ,"page2": {
          "title": "About Me",
          "content": "| What is API? | API Example | .",
          "url": "https://tanishapatil1234.github.io/test-fastpage-tp/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Binary Buttons",
          "content": "Binary Number 1: Binary Number 2: . . .",
          "url": "https://tanishapatil1234.github.io/test-fastpage-tp/Binary%20Buttons/",
          "relUrl": "/Binary Buttons/",
          "date": ""
      }
      
  

  

  
      ,"page5": {
          "title": "Notes",
          "content": "| Unit 1 | Unit 4 | Final Exam | Night At The Museum | .",
          "url": "https://tanishapatil1234.github.io/test-fastpage-tp/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  

  

  
  

  
      ,"page18": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://tanishapatil1234.github.io/test-fastpage-tp/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}